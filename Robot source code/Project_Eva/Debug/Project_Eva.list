
Project_Eva.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a70  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08008bf8  08008bf8  00018bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d80  08008d80  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08008d80  08008d80  00018d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d88  08008d88  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d8c  08008d8c  00018d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08008d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000204  08008f94  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  08008f94  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b45  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bd6  00000000  00000000  00037d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001298  00000000  00000000  0003a950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  0003bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000238f0  00000000  00000000  0003cd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fbc3  00000000  00000000  00060650  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf7e3  00000000  00000000  00070213  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f9f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000554c  00000000  00000000  0013fa74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000204 	.word	0x20000204
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008be0 	.word	0x08008be0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000208 	.word	0x20000208
 80001c4:	08008be0 	.word	0x08008be0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b972 	b.w	8000ecc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9e08      	ldr	r6, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	4688      	mov	r8, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14b      	bne.n	8000ca6 <__udivmoddi4+0xa6>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4615      	mov	r5, r2
 8000c12:	d967      	bls.n	8000ce4 <__udivmoddi4+0xe4>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0720 	rsb	r7, r2, #32
 8000c1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c22:	fa20 f707 	lsr.w	r7, r0, r7
 8000c26:	4095      	lsls	r5, r2
 8000c28:	ea47 0803 	orr.w	r8, r7, r3
 8000c2c:	4094      	lsls	r4, r2
 8000c2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c38:	fa1f fc85 	uxth.w	ip, r5
 8000c3c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c40:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c44:	fb07 f10c 	mul.w	r1, r7, ip
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x60>
 8000c4c:	18eb      	adds	r3, r5, r3
 8000c4e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c52:	f080 811b 	bcs.w	8000e8c <__udivmoddi4+0x28c>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 8118 	bls.w	8000e8c <__udivmoddi4+0x28c>
 8000c5c:	3f02      	subs	r7, #2
 8000c5e:	442b      	add	r3, r5
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c74:	45a4      	cmp	ip, r4
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x8c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	f080 8107 	bcs.w	8000e90 <__udivmoddi4+0x290>
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	f240 8104 	bls.w	8000e90 <__udivmoddi4+0x290>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	442c      	add	r4, r5
 8000c8c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c90:	eba4 040c 	sub.w	r4, r4, ip
 8000c94:	2700      	movs	r7, #0
 8000c96:	b11e      	cbz	r6, 8000ca0 <__udivmoddi4+0xa0>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0xbe>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	f000 80eb 	beq.w	8000e86 <__udivmoddi4+0x286>
 8000cb0:	2700      	movs	r7, #0
 8000cb2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cb6:	4638      	mov	r0, r7
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	fab3 f783 	clz	r7, r3
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d147      	bne.n	8000d56 <__udivmoddi4+0x156>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xd0>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 80fa 	bhi.w	8000ec4 <__udivmoddi4+0x2c4>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4698      	mov	r8, r3
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d0e0      	beq.n	8000ca0 <__udivmoddi4+0xa0>
 8000cde:	e9c6 4800 	strd	r4, r8, [r6]
 8000ce2:	e7dd      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000ce4:	b902      	cbnz	r2, 8000ce8 <__udivmoddi4+0xe8>
 8000ce6:	deff      	udf	#255	; 0xff
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	f040 808f 	bne.w	8000e10 <__udivmoddi4+0x210>
 8000cf2:	1b49      	subs	r1, r1, r5
 8000cf4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf8:	fa1f f885 	uxth.w	r8, r5
 8000cfc:	2701      	movs	r7, #1
 8000cfe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d02:	0c23      	lsrs	r3, r4, #16
 8000d04:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x124>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x122>
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2bc>
 8000d22:	4684      	mov	ip, r0
 8000d24:	1a59      	subs	r1, r3, r1
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d2c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d30:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d34:	fb08 f800 	mul.w	r8, r8, r0
 8000d38:	45a0      	cmp	r8, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x14c>
 8000d3c:	192c      	adds	r4, r5, r4
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x14a>
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	f200 80b6 	bhi.w	8000eb6 <__udivmoddi4+0x2b6>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 0408 	sub.w	r4, r4, r8
 8000d50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d54:	e79f      	b.n	8000c96 <__udivmoddi4+0x96>
 8000d56:	f1c7 0c20 	rsb	ip, r7, #32
 8000d5a:	40bb      	lsls	r3, r7
 8000d5c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d60:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d64:	fa01 f407 	lsl.w	r4, r1, r7
 8000d68:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d6c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d70:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d74:	4325      	orrs	r5, r4
 8000d76:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d7a:	0c2c      	lsrs	r4, r5, #16
 8000d7c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d80:	fa1f fa8e 	uxth.w	sl, lr
 8000d84:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d88:	fb09 f40a 	mul.w	r4, r9, sl
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d92:	fa00 f107 	lsl.w	r1, r0, r7
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b0>
 8000d98:	eb1e 0303 	adds.w	r3, lr, r3
 8000d9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da0:	f080 8087 	bcs.w	8000eb2 <__udivmoddi4+0x2b2>
 8000da4:	429c      	cmp	r4, r3
 8000da6:	f240 8084 	bls.w	8000eb2 <__udivmoddi4+0x2b2>
 8000daa:	f1a9 0902 	sub.w	r9, r9, #2
 8000dae:	4473      	add	r3, lr
 8000db0:	1b1b      	subs	r3, r3, r4
 8000db2:	b2ad      	uxth	r5, r5
 8000db4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dbc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dc4:	45a2      	cmp	sl, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1da>
 8000dc8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd0:	d26b      	bcs.n	8000eaa <__udivmoddi4+0x2aa>
 8000dd2:	45a2      	cmp	sl, r4
 8000dd4:	d969      	bls.n	8000eaa <__udivmoddi4+0x2aa>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4474      	add	r4, lr
 8000dda:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dde:	fba0 8902 	umull	r8, r9, r0, r2
 8000de2:	eba4 040a 	sub.w	r4, r4, sl
 8000de6:	454c      	cmp	r4, r9
 8000de8:	46c2      	mov	sl, r8
 8000dea:	464b      	mov	r3, r9
 8000dec:	d354      	bcc.n	8000e98 <__udivmoddi4+0x298>
 8000dee:	d051      	beq.n	8000e94 <__udivmoddi4+0x294>
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d069      	beq.n	8000ec8 <__udivmoddi4+0x2c8>
 8000df4:	ebb1 050a 	subs.w	r5, r1, sl
 8000df8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dfc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e00:	40fd      	lsrs	r5, r7
 8000e02:	40fc      	lsrs	r4, r7
 8000e04:	ea4c 0505 	orr.w	r5, ip, r5
 8000e08:	e9c6 5400 	strd	r5, r4, [r6]
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	e747      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e10:	f1c2 0320 	rsb	r3, r2, #32
 8000e14:	fa20 f703 	lsr.w	r7, r0, r3
 8000e18:	4095      	lsls	r5, r2
 8000e1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e26:	4338      	orrs	r0, r7
 8000e28:	0c01      	lsrs	r1, r0, #16
 8000e2a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e2e:	fa1f f885 	uxth.w	r8, r5
 8000e32:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3a:	fb07 f308 	mul.w	r3, r7, r8
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x256>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e4c:	d22f      	bcs.n	8000eae <__udivmoddi4+0x2ae>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d92d      	bls.n	8000eae <__udivmoddi4+0x2ae>
 8000e52:	3f02      	subs	r7, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1acb      	subs	r3, r1, r3
 8000e58:	b281      	uxth	r1, r0
 8000e5a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb00 f308 	mul.w	r3, r0, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x27e>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e74:	d217      	bcs.n	8000ea6 <__udivmoddi4+0x2a6>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d915      	bls.n	8000ea6 <__udivmoddi4+0x2a6>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1ac9      	subs	r1, r1, r3
 8000e80:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e84:	e73b      	b.n	8000cfe <__udivmoddi4+0xfe>
 8000e86:	4637      	mov	r7, r6
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e709      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	e6e7      	b.n	8000c60 <__udivmoddi4+0x60>
 8000e90:	4618      	mov	r0, r3
 8000e92:	e6fb      	b.n	8000c8c <__udivmoddi4+0x8c>
 8000e94:	4541      	cmp	r1, r8
 8000e96:	d2ab      	bcs.n	8000df0 <__udivmoddi4+0x1f0>
 8000e98:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e9c:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea0:	3801      	subs	r0, #1
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	e7a4      	b.n	8000df0 <__udivmoddi4+0x1f0>
 8000ea6:	4660      	mov	r0, ip
 8000ea8:	e7e9      	b.n	8000e7e <__udivmoddi4+0x27e>
 8000eaa:	4618      	mov	r0, r3
 8000eac:	e795      	b.n	8000dda <__udivmoddi4+0x1da>
 8000eae:	4667      	mov	r7, ip
 8000eb0:	e7d1      	b.n	8000e56 <__udivmoddi4+0x256>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e77c      	b.n	8000db0 <__udivmoddi4+0x1b0>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	442c      	add	r4, r5
 8000eba:	e747      	b.n	8000d4c <__udivmoddi4+0x14c>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	442b      	add	r3, r5
 8000ec2:	e72f      	b.n	8000d24 <__udivmoddi4+0x124>
 8000ec4:	4638      	mov	r0, r7
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xda>
 8000ec8:	4637      	mov	r7, r6
 8000eca:	e6e9      	b.n	8000ca0 <__udivmoddi4+0xa0>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HCSR06_Capture_Handler>:

/*
 *
 */
void HCSR06_Capture_Handler(TIM_HandleTypeDef *htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7f1b      	ldrb	r3, [r3, #28]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	2b07      	cmp	r3, #7
 8000ee0:	d82a      	bhi.n	8000f38 <HCSR06_Capture_Handler+0x68>
 8000ee2:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <HCSR06_Capture_Handler+0x18>)
 8000ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee8:	08000f09 	.word	0x08000f09
 8000eec:	08000f15 	.word	0x08000f15
 8000ef0:	08000f39 	.word	0x08000f39
 8000ef4:	08000f21 	.word	0x08000f21
 8000ef8:	08000f39 	.word	0x08000f39
 8000efc:	08000f39 	.word	0x08000f39
 8000f00:	08000f39 	.word	0x08000f39
 8000f04:	08000f2d 	.word	0x08000f2d
	case HAL_TIM_ACTIVE_CHANNEL_1:
		HCSR06_channel_Handler(&Rear, htim, TIM_CHANNEL_1);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <HCSR06_Capture_Handler+0x74>)
 8000f0e:	f000 f823 	bl	8000f58 <HCSR06_channel_Handler>
		break;
 8000f12:	e012      	b.n	8000f3a <HCSR06_Capture_Handler+0x6a>
	case HAL_TIM_ACTIVE_CHANNEL_2:
		HCSR06_channel_Handler(&Front, htim, TIM_CHANNEL_2);
 8000f14:	2204      	movs	r2, #4
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <HCSR06_Capture_Handler+0x78>)
 8000f1a:	f000 f81d 	bl	8000f58 <HCSR06_channel_Handler>
		break;
 8000f1e:	e00c      	b.n	8000f3a <HCSR06_Capture_Handler+0x6a>
	case HAL_TIM_ACTIVE_CHANNEL_3:
		HCSR06_channel_Handler(&Right, htim, TIM_CHANNEL_3);
 8000f20:	2208      	movs	r2, #8
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <HCSR06_Capture_Handler+0x7c>)
 8000f26:	f000 f817 	bl	8000f58 <HCSR06_channel_Handler>
		break;
 8000f2a:	e006      	b.n	8000f3a <HCSR06_Capture_Handler+0x6a>
	case HAL_TIM_ACTIVE_CHANNEL_4:
		HCSR06_channel_Handler(&Left, htim, TIM_CHANNEL_4);
 8000f2c:	220c      	movs	r2, #12
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <HCSR06_Capture_Handler+0x80>)
 8000f32:	f000 f811 	bl	8000f58 <HCSR06_channel_Handler>
		break;
 8000f36:	e000      	b.n	8000f3a <HCSR06_Capture_Handler+0x6a>
	default:
		break;
 8000f38:	bf00      	nop
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200002f4 	.word	0x200002f4
 8000f48:	20000314 	.word	0x20000314
 8000f4c:	20000304 	.word	0x20000304
 8000f50:	200003a4 	.word	0x200003a4
 8000f54:	00000000 	.word	0x00000000

08000f58 <HCSR06_channel_Handler>:


/*
 *
 */
void HCSR06_channel_Handler(t_sonic_sensor *sensor, TIM_HandleTypeDef *htim, uint32_t Channel){
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]

	if (sensor->Is_First_Captured==0) // if the first value is not captured
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	7b1b      	ldrb	r3, [r3, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d162      	bne.n	8001032 <HCSR06_channel_Handler+0xda>
	{
		sensor->IC_Val1 = HAL_TIM_ReadCapturedValue(htim, Channel); // read the first value
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	68b8      	ldr	r0, [r7, #8]
 8000f70:	f004 ff24 	bl	8005dbc <HAL_TIM_ReadCapturedValue>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	601a      	str	r2, [r3, #0]
		sensor->Is_First_Captured = 1;  // set the first captured as true
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	731a      	strb	r2, [r3, #12]
		// Now change the polarity to falling edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d108      	bne.n	8000f98 <HCSR06_channel_Handler+0x40>
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6a1a      	ldr	r2, [r3, #32]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 020a 	bic.w	r2, r2, #10
 8000f94:	621a      	str	r2, [r3, #32]
 8000f96:	e01f      	b.n	8000fd8 <HCSR06_channel_Handler+0x80>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d108      	bne.n	8000fb0 <HCSR06_channel_Handler+0x58>
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a1a      	ldr	r2, [r3, #32]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000fac:	621a      	str	r2, [r3, #32]
 8000fae:	e013      	b.n	8000fd8 <HCSR06_channel_Handler+0x80>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d108      	bne.n	8000fc8 <HCSR06_channel_Handler+0x70>
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000fc4:	621a      	str	r2, [r3, #32]
 8000fc6:	e007      	b.n	8000fd8 <HCSR06_channel_Handler+0x80>
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6a1a      	ldr	r2, [r3, #32]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8000fd6:	621a      	str	r2, [r3, #32]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d108      	bne.n	8000ff0 <HCSR06_channel_Handler+0x98>
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6a1a      	ldr	r2, [r3, #32]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0202 	orr.w	r2, r2, #2
 8000fec:	621a      	str	r2, [r3, #32]
		case TIM_CHANNEL_4:
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
			break;
		}
	}
}
 8000fee:	e103      	b.n	80011f8 <HCSR06_channel_Handler+0x2a0>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	d108      	bne.n	8001008 <HCSR06_channel_Handler+0xb0>
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6a1a      	ldr	r2, [r3, #32]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f042 0220 	orr.w	r2, r2, #32
 8001004:	621a      	str	r2, [r3, #32]
}
 8001006:	e0f7      	b.n	80011f8 <HCSR06_channel_Handler+0x2a0>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b08      	cmp	r3, #8
 800100c:	d108      	bne.n	8001020 <HCSR06_channel_Handler+0xc8>
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a1a      	ldr	r2, [r3, #32]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800101c:	621a      	str	r2, [r3, #32]
}
 800101e:	e0eb      	b.n	80011f8 <HCSR06_channel_Handler+0x2a0>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6a1a      	ldr	r2, [r3, #32]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800102e:	621a      	str	r2, [r3, #32]
}
 8001030:	e0e2      	b.n	80011f8 <HCSR06_channel_Handler+0x2a0>
	else if (sensor->Is_First_Captured==1)   // if the first is already captured
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	7b1b      	ldrb	r3, [r3, #12]
 8001036:	2b01      	cmp	r3, #1
 8001038:	f040 80de 	bne.w	80011f8 <HCSR06_channel_Handler+0x2a0>
		sensor->IC_Val2 = HAL_TIM_ReadCapturedValue(htim, Channel);  // read second value
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	68b8      	ldr	r0, [r7, #8]
 8001040:	f004 febc 	bl	8005dbc <HAL_TIM_ReadCapturedValue>
 8001044:	4602      	mov	r2, r0
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	605a      	str	r2, [r3, #4]
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
		if (sensor->IC_Val2 > sensor->IC_Val1)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d907      	bls.n	800106e <HCSR06_channel_Handler+0x116>
			sensor->Difference = sensor->IC_Val2-sensor->IC_Val1;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	1ad2      	subs	r2, r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	e00f      	b.n	800108e <HCSR06_channel_Handler+0x136>
		else if (sensor->IC_Val1 > sensor->IC_Val2)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	429a      	cmp	r2, r3
 8001078:	d909      	bls.n	800108e <HCSR06_channel_Handler+0x136>
			sensor->Difference = (0xffff - sensor->IC_Val1) + sensor->IC_Val2;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001088:	33ff      	adds	r3, #255	; 0xff
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	6093      	str	r3, [r2, #8]
		sensor->Distance = sensor->Difference * .034/2;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f9da 	bl	800044c <__aeabi_ui2d>
 8001098:	a359      	add	r3, pc, #356	; (adr r3, 8001200 <HCSR06_channel_Handler+0x2a8>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	f7ff fa4f 	bl	8000540 <__aeabi_dmul>
 80010a2:	4603      	mov	r3, r0
 80010a4:	460c      	mov	r4, r1
 80010a6:	4618      	mov	r0, r3
 80010a8:	4621      	mov	r1, r4
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b2:	f7ff fb6f 	bl	8000794 <__aeabi_ddiv>
 80010b6:	4603      	mov	r3, r0
 80010b8:	460c      	mov	r4, r1
 80010ba:	4618      	mov	r0, r3
 80010bc:	4621      	mov	r1, r4
 80010be:	f7ff fd17 	bl	8000af0 <__aeabi_d2uiz>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	735a      	strb	r2, [r3, #13]
		sensor->Is_First_Captured = 0; // set it back to false
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	731a      	strb	r2, [r3, #12]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d108      	bne.n	80010e8 <HCSR06_channel_Handler+0x190>
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a1a      	ldr	r2, [r3, #32]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 020a 	bic.w	r2, r2, #10
 80010e4:	621a      	str	r2, [r3, #32]
 80010e6:	e01f      	b.n	8001128 <HCSR06_channel_Handler+0x1d0>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d108      	bne.n	8001100 <HCSR06_channel_Handler+0x1a8>
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6a1a      	ldr	r2, [r3, #32]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80010fc:	621a      	str	r2, [r3, #32]
 80010fe:	e013      	b.n	8001128 <HCSR06_channel_Handler+0x1d0>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b08      	cmp	r3, #8
 8001104:	d108      	bne.n	8001118 <HCSR06_channel_Handler+0x1c0>
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a1a      	ldr	r2, [r3, #32]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001114:	621a      	str	r2, [r3, #32]
 8001116:	e007      	b.n	8001128 <HCSR06_channel_Handler+0x1d0>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6a1a      	ldr	r2, [r3, #32]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001126:	621a      	str	r2, [r3, #32]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HCSR06_channel_Handler+0x1e4>
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6a12      	ldr	r2, [r2, #32]
 8001138:	621a      	str	r2, [r3, #32]
 800113a:	e019      	b.n	8001170 <HCSR06_channel_Handler+0x218>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b04      	cmp	r3, #4
 8001140:	d106      	bne.n	8001150 <HCSR06_channel_Handler+0x1f8>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6a12      	ldr	r2, [r2, #32]
 800114c:	621a      	str	r2, [r3, #32]
 800114e:	e00f      	b.n	8001170 <HCSR06_channel_Handler+0x218>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b08      	cmp	r3, #8
 8001154:	d106      	bne.n	8001164 <HCSR06_channel_Handler+0x20c>
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6a12      	ldr	r2, [r2, #32]
 8001160:	621a      	str	r2, [r3, #32]
 8001162:	e005      	b.n	8001170 <HCSR06_channel_Handler+0x218>
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6a12      	ldr	r2, [r2, #32]
 800116e:	621a      	str	r2, [r3, #32]
		switch(Channel){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b0c      	cmp	r3, #12
 8001174:	d840      	bhi.n	80011f8 <HCSR06_channel_Handler+0x2a0>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <HCSR06_channel_Handler+0x224>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	080011b1 	.word	0x080011b1
 8001180:	080011f9 	.word	0x080011f9
 8001184:	080011f9 	.word	0x080011f9
 8001188:	080011f9 	.word	0x080011f9
 800118c:	080011c3 	.word	0x080011c3
 8001190:	080011f9 	.word	0x080011f9
 8001194:	080011f9 	.word	0x080011f9
 8001198:	080011f9 	.word	0x080011f9
 800119c:	080011d5 	.word	0x080011d5
 80011a0:	080011f9 	.word	0x080011f9
 80011a4:	080011f9 	.word	0x080011f9
 80011a8:	080011f9 	.word	0x080011f9
 80011ac:	080011e7 	.word	0x080011e7
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0202 	bic.w	r2, r2, #2
 80011be:	60da      	str	r2, [r3, #12]
			break;
 80011c0:	e01a      	b.n	80011f8 <HCSR06_channel_Handler+0x2a0>
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0204 	bic.w	r2, r2, #4
 80011d0:	60da      	str	r2, [r3, #12]
			break;
 80011d2:	e011      	b.n	80011f8 <HCSR06_channel_Handler+0x2a0>
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0208 	bic.w	r2, r2, #8
 80011e2:	60da      	str	r2, [r3, #12]
			break;
 80011e4:	e008      	b.n	80011f8 <HCSR06_channel_Handler+0x2a0>
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0210 	bic.w	r2, r2, #16
 80011f4:	60da      	str	r2, [r3, #12]
			break;
 80011f6:	bf00      	nop
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	b020c49c 	.word	0xb020c49c
 8001204:	3fa16872 	.word	0x3fa16872

08001208 <get_Distance_Data>:

/*
 *
 */
int get_Distance_Data(uint8_t sensor){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
//
	switch(sensor){
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b03      	cmp	r3, #3
 8001216:	d81f      	bhi.n	8001258 <get_Distance_Data+0x50>
 8001218:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <get_Distance_Data+0x18>)
 800121a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121e:	bf00      	nop
 8001220:	08001231 	.word	0x08001231
 8001224:	0800123b 	.word	0x0800123b
 8001228:	08001245 	.word	0x08001245
 800122c:	0800124f 	.word	0x0800124f
	case REAR_SENSOR:
		return get_sensor_dist(&Rear);
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <get_Distance_Data+0x5c>)
 8001232:	f000 f81f 	bl	8001274 <get_sensor_dist>
 8001236:	4603      	mov	r3, r0
 8001238:	e00f      	b.n	800125a <get_Distance_Data+0x52>
		break;
	case FRONT_SENSOR:
		return get_sensor_dist(&Front);
 800123a:	480b      	ldr	r0, [pc, #44]	; (8001268 <get_Distance_Data+0x60>)
 800123c:	f000 f81a 	bl	8001274 <get_sensor_dist>
 8001240:	4603      	mov	r3, r0
 8001242:	e00a      	b.n	800125a <get_Distance_Data+0x52>
		break;
	case FRONT_L_SENSOR:
		return get_sensor_dist(&Left);
 8001244:	4809      	ldr	r0, [pc, #36]	; (800126c <get_Distance_Data+0x64>)
 8001246:	f000 f815 	bl	8001274 <get_sensor_dist>
 800124a:	4603      	mov	r3, r0
 800124c:	e005      	b.n	800125a <get_Distance_Data+0x52>
		break;
	case FRONT_R_SENSOR:
		return get_sensor_dist(&Right);
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <get_Distance_Data+0x68>)
 8001250:	f000 f810 	bl	8001274 <get_sensor_dist>
 8001254:	4603      	mov	r3, r0
 8001256:	e000      	b.n	800125a <get_Distance_Data+0x52>
		break;
	}
return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200002f4 	.word	0x200002f4
 8001268:	20000314 	.word	0x20000314
 800126c:	200003a4 	.word	0x200003a4
 8001270:	20000304 	.word	0x20000304

08001274 <get_sensor_dist>:

int get_sensor_dist(t_sonic_sensor *sensor){
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	return sensor->Distance;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7b5b      	ldrb	r3, [r3, #13]
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <Initiate_Sensor_Timers>:

void Initiate_Sensor_Timers(){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
//
	// init 10us timer
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <Initiate_Sensor_Timers+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001298:	2100      	movs	r1, #0
 800129a:	480c      	ldr	r0, [pc, #48]	; (80012cc <Initiate_Sensor_Timers+0x40>)
 800129c:	f004 f938 	bl	8005510 <HAL_TIM_PWM_Start>

	// init capture compare timers
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <Initiate_Sensor_Timers+0x44>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80012a8:	2100      	movs	r1, #0
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <Initiate_Sensor_Timers+0x44>)
 80012ac:	f004 f9fc 	bl	80056a8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80012b0:	2104      	movs	r1, #4
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <Initiate_Sensor_Timers+0x44>)
 80012b4:	f004 f9f8 	bl	80056a8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 80012b8:	2108      	movs	r1, #8
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <Initiate_Sensor_Timers+0x44>)
 80012bc:	f004 f9f4 	bl	80056a8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 80012c0:	210c      	movs	r1, #12
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <Initiate_Sensor_Timers+0x44>)
 80012c4:	f004 f9f0 	bl	80056a8 <HAL_TIM_IC_Start_IT>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000364 	.word	0x20000364
 80012d0:	20000324 	.word	0x20000324

080012d4 <disable_10us_Timer>:


void disable_10us_Timer(){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 80012d8:	2100      	movs	r1, #0
 80012da:	4802      	ldr	r0, [pc, #8]	; (80012e4 <disable_10us_Timer+0x10>)
 80012dc:	f004 f956 	bl	800558c <HAL_TIM_PWM_Stop>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000364 	.word	0x20000364

080012e8 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 80012f0:	2254      	movs	r2, #84	; 0x54
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <MPU6050_Init+0x1c>)
 80012f6:	f006 f9b5 	bl	8007664 <memcpy>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000220 	.word	0x20000220

08001308 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af02      	add	r7, sp, #8
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
 8001314:	4613      	mov	r3, r2
 8001316:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001318:	23d0      	movs	r3, #208	; 0xd0
 800131a:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	b299      	uxth	r1, r3
 8001324:	f107 020c 	add.w	r2, r7, #12
 8001328:	230a      	movs	r3, #10
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <I2C_Read+0x4c>)
 8001330:	f002 fb2a 	bl	8003988 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	b299      	uxth	r1, r3
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	b29a      	uxth	r2, r3
 800133c:	2364      	movs	r3, #100	; 0x64
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	4613      	mov	r3, r2
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <I2C_Read+0x4c>)
 8001346:	f002 fc1d 	bl	8003b84 <HAL_I2C_Master_Receive>
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000220 	.word	0x20000220

08001358 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af02      	add	r7, sp, #8
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001370:	23d0      	movs	r3, #208	; 0xd0
 8001372:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	b299      	uxth	r1, r3
 8001378:	f107 020c 	add.w	r2, r7, #12
 800137c:	2364      	movs	r3, #100	; 0x64
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2302      	movs	r3, #2
 8001382:	4803      	ldr	r0, [pc, #12]	; (8001390 <I2C_Write8+0x38>)
 8001384:	f002 fb00 	bl	8003988 <HAL_I2C_Master_Transmit>
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000220 	.word	0x20000220

08001394 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	206b      	movs	r0, #107	; 0x6b
 80013a4:	f7ff ffd8 	bl	8001358 <I2C_Write8>
	HAL_Delay(100);
 80013a8:	2064      	movs	r0, #100	; 0x64
 80013aa:	f001 fe91 	bl	80030d0 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	019b      	lsls	r3, r3, #6
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	4619      	mov	r1, r3
 80013d4:	206b      	movs	r0, #107	; 0x6b
 80013d6:	f7ff ffbf 	bl	8001358 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80013da:	2064      	movs	r0, #100	; 0x64
 80013dc:	f001 fe78 	bl	80030d0 <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	78db      	ldrb	r3, [r3, #3]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	4619      	mov	r1, r3
 80013f2:	201a      	movs	r0, #26
 80013f4:	f7ff ffb0 	bl	8001358 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	785b      	ldrb	r3, [r3, #1]
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f003 0318 	and.w	r3, r3, #24
 8001408:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	4619      	mov	r1, r3
 800140e:	201b      	movs	r0, #27
 8001410:	f7ff ffa2 	bl	8001358 <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	789b      	ldrb	r3, [r3, #2]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 0318 	and.w	r3, r3, #24
 8001424:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	4619      	mov	r1, r3
 800142a:	201c      	movs	r0, #28
 800142c:	f7ff ff94 	bl	8001358 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001430:	2004      	movs	r0, #4
 8001432:	f000 f857 	bl	80014e4 <MPU6050_Set_SMPRT_DIV>


	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	789b      	ldrb	r3, [r3, #2]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d81a      	bhi.n	8001474 <MPU6050_Config+0xe0>
 800143e:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <MPU6050_Config+0xb0>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001455 	.word	0x08001455
 8001448:	0800145d 	.word	0x0800145d
 800144c:	08001465 	.word	0x08001465
 8001450:	0800146d 	.word	0x0800146d
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MPU6050_Config+0x12c>)
 8001456:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <MPU6050_Config+0x130>)
 8001458:	601a      	str	r2, [r3, #0]
			break;
 800145a:	e00c      	b.n	8001476 <MPU6050_Config+0xe2>

		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MPU6050_Config+0x12c>)
 800145e:	4a1a      	ldr	r2, [pc, #104]	; (80014c8 <MPU6050_Config+0x134>)
 8001460:	601a      	str	r2, [r3, #0]
				break;
 8001462:	e008      	b.n	8001476 <MPU6050_Config+0xe2>

		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MPU6050_Config+0x12c>)
 8001466:	4a19      	ldr	r2, [pc, #100]	; (80014cc <MPU6050_Config+0x138>)
 8001468:	601a      	str	r2, [r3, #0]
			break;
 800146a:	e004      	b.n	8001476 <MPU6050_Config+0xe2>

		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MPU6050_Config+0x12c>)
 800146e:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <MPU6050_Config+0x13c>)
 8001470:	601a      	str	r2, [r3, #0]
			break;
 8001472:	e000      	b.n	8001476 <MPU6050_Config+0xe2>

		default:
			break;
 8001474:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d81a      	bhi.n	80014b4 <MPU6050_Config+0x120>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <MPU6050_Config+0xf0>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	08001495 	.word	0x08001495
 8001488:	0800149d 	.word	0x0800149d
 800148c:	080014a5 	.word	0x080014a5
 8001490:	080014ad 	.word	0x080014ad
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MPU6050_Config+0x140>)
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <MPU6050_Config+0x144>)
 8001498:	601a      	str	r2, [r3, #0]
			break;
 800149a:	e00c      	b.n	80014b6 <MPU6050_Config+0x122>

		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <MPU6050_Config+0x140>)
 800149e:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <MPU6050_Config+0x148>)
 80014a0:	601a      	str	r2, [r3, #0]
				break;
 80014a2:	e008      	b.n	80014b6 <MPU6050_Config+0x122>

		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MPU6050_Config+0x140>)
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <MPU6050_Config+0x14c>)
 80014a8:	601a      	str	r2, [r3, #0]
			break;
 80014aa:	e004      	b.n	80014b6 <MPU6050_Config+0x122>

		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MPU6050_Config+0x140>)
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <MPU6050_Config+0x130>)
 80014b0:	601a      	str	r2, [r3, #0]
			break;
 80014b2:	e000      	b.n	80014b6 <MPU6050_Config+0x122>

		default:
			break;
 80014b4:	bf00      	nop
	}

}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000274 	.word	0x20000274
 80014c4:	3d7a0000 	.word	0x3d7a0000
 80014c8:	3dfa0000 	.word	0x3dfa0000
 80014cc:	3e7a0000 	.word	0x3e7a0000
 80014d0:	3efa0000 	.word	0x3efa0000
 80014d4:	20000278 	.word	0x20000278
 80014d8:	3bfa0000 	.word	0x3bfa0000
 80014dc:	3c7a0000 	.word	0x3c7a0000
 80014e0:	3cfa0000 	.word	0x3cfa0000

080014e4 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	4619      	mov	r1, r3
 80014f2:	2019      	movs	r0, #25
 80014f4:	f7ff ff30 	bl	8001358 <I2C_Write8>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <MPU6050_Get_Accel_RawData>:

}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	3301      	adds	r3, #1
 800150e:	2201      	movs	r2, #1
 8001510:	4619      	mov	r1, r3
 8001512:	203a      	movs	r0, #58	; 0x3a
 8001514:	f7ff fef8 	bl	8001308 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001518:	7f7b      	ldrb	r3, [r7, #29]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d04f      	beq.n	80015be <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2206      	movs	r2, #6
 8001524:	4619      	mov	r1, r3
 8001526:	203b      	movs	r0, #59	; 0x3b
 8001528:	f7ff feee 	bl	8001308 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 800152c:	7d3b      	ldrb	r3, [r7, #20]
 800152e:	b29b      	uxth	r3, r3
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b29a      	uxth	r2, r3
 8001534:	7d7b      	ldrb	r3, [r7, #21]
 8001536:	b29b      	uxth	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b29b      	uxth	r3, r3
 800153c:	b21a      	sxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8001542:	7dbb      	ldrb	r3, [r7, #22]
 8001544:	b29b      	uxth	r3, r3
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b29a      	uxth	r2, r3
 800154a:	7dfb      	ldrb	r3, [r7, #23]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	b21a      	sxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8001558:	7e3b      	ldrb	r3, [r7, #24]
 800155a:	b29b      	uxth	r3, r3
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b29a      	uxth	r2, r3
 8001560:	7e7b      	ldrb	r3, [r7, #25]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4413      	add	r3, r2
 8001566:	b29b      	uxth	r3, r3
 8001568:	b21a      	sxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	2206      	movs	r2, #6
 8001574:	4619      	mov	r1, r3
 8001576:	2043      	movs	r0, #67	; 0x43
 8001578:	f7ff fec6 	bl	8001308 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 800157c:	7b3b      	ldrb	r3, [r7, #12]
 800157e:	b29b      	uxth	r3, r3
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b29a      	uxth	r2, r3
 8001584:	7b7b      	ldrb	r3, [r7, #13]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4413      	add	r3, r2
 800158a:	b29b      	uxth	r3, r3
 800158c:	b21a      	sxth	r2, r3
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MPU6050_Get_Accel_RawData+0xc8>)
 8001590:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8001592:	7bbb      	ldrb	r3, [r7, #14]
 8001594:	b29b      	uxth	r3, r3
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b29a      	uxth	r2, r3
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4413      	add	r3, r2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MPU6050_Get_Accel_RawData+0xc8>)
 80015a6:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 80015a8:	7c3b      	ldrb	r3, [r7, #16]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	7c7b      	ldrb	r3, [r7, #17]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <MPU6050_Get_Accel_RawData+0xc8>)
 80015bc:	809a      	strh	r2, [r3, #4]
	}
}
 80015be:	bf00      	nop
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000027c 	.word	0x2000027c
 80015cc:	00000000 	.word	0x00000000

080015d0 <calculate_Gaussian_Transform>:
/* calculates the discrete transformation vector
 * that transforms the user angle into a radius
 * of turning of the robot, this function runs
 * once after the Micro-controller is initialized.
 */
void calculate_Gaussian_Transform(){
 80015d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015d4:	b089      	sub	sp, #36	; 0x24
 80015d6:	af00      	add	r7, sp, #0
//
	float F_of_X[4];
	for(int i=0; i<=90; i++){
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	e0ef      	b.n	80017be <calculate_Gaussian_Transform+0x1ee>
		F_of_X[0] = a1*expf(-pow(i-b,2)/(2*pow(c1,2)));
 80015de:	69f8      	ldr	r0, [r7, #28]
 80015e0:	f7fe ff44 	bl	800046c <__aeabi_i2d>
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	4b7d      	ldr	r3, [pc, #500]	; (80017e0 <calculate_Gaussian_Transform+0x210>)
 80015ea:	f7fe fdf1 	bl	80001d0 <__aeabi_dsub>
 80015ee:	4603      	mov	r3, r0
 80015f0:	460c      	mov	r4, r1
 80015f2:	ec44 3b17 	vmov	d7, r3, r4
 80015f6:	ed9f 1b76 	vldr	d1, [pc, #472]	; 80017d0 <calculate_Gaussian_Transform+0x200>
 80015fa:	eeb0 0a47 	vmov.f32	s0, s14
 80015fe:	eef0 0a67 	vmov.f32	s1, s15
 8001602:	f006 f93f 	bl	8007884 <pow>
 8001606:	ec54 3b10 	vmov	r3, r4, d0
 800160a:	461d      	mov	r5, r3
 800160c:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	4b73      	ldr	r3, [pc, #460]	; (80017e4 <calculate_Gaussian_Transform+0x214>)
 8001616:	4628      	mov	r0, r5
 8001618:	4631      	mov	r1, r6
 800161a:	f7ff f8bb 	bl	8000794 <__aeabi_ddiv>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	4618      	mov	r0, r3
 8001624:	4621      	mov	r1, r4
 8001626:	f7ff fa83 	bl	8000b30 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee00 3a10 	vmov	s0, r3
 8001630:	f006 fa98 	bl	8007b64 <expf>
 8001634:	eeb0 7a40 	vmov.f32	s14, s0
 8001638:	eddf 7a6b 	vldr	s15, [pc, #428]	; 80017e8 <calculate_Gaussian_Transform+0x218>
 800163c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001640:	edc7 7a03 	vstr	s15, [r7, #12]
		F_of_X[1] = a2*expf(-pow(i-b,2)/(2*pow(c2,2)));
 8001644:	69f8      	ldr	r0, [r7, #28]
 8001646:	f7fe ff11 	bl	800046c <__aeabi_i2d>
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <calculate_Gaussian_Transform+0x210>)
 8001650:	f7fe fdbe 	bl	80001d0 <__aeabi_dsub>
 8001654:	4603      	mov	r3, r0
 8001656:	460c      	mov	r4, r1
 8001658:	ec44 3b17 	vmov	d7, r3, r4
 800165c:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 80017d0 <calculate_Gaussian_Transform+0x200>
 8001660:	eeb0 0a47 	vmov.f32	s0, s14
 8001664:	eef0 0a67 	vmov.f32	s1, s15
 8001668:	f006 f90c 	bl	8007884 <pow>
 800166c:	ec54 3b10 	vmov	r3, r4, d0
 8001670:	4698      	mov	r8, r3
 8001672:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b5c      	ldr	r3, [pc, #368]	; (80017ec <calculate_Gaussian_Transform+0x21c>)
 800167c:	4640      	mov	r0, r8
 800167e:	4649      	mov	r1, r9
 8001680:	f7ff f888 	bl	8000794 <__aeabi_ddiv>
 8001684:	4603      	mov	r3, r0
 8001686:	460c      	mov	r4, r1
 8001688:	4618      	mov	r0, r3
 800168a:	4621      	mov	r1, r4
 800168c:	f7ff fa50 	bl	8000b30 <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	ee00 3a10 	vmov	s0, r3
 8001696:	f006 fa65 	bl	8007b64 <expf>
 800169a:	eeb0 7a40 	vmov.f32	s14, s0
 800169e:	eddf 7a54 	vldr	s15, [pc, #336]	; 80017f0 <calculate_Gaussian_Transform+0x220>
 80016a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a6:	edc7 7a04 	vstr	s15, [r7, #16]
		F_of_X[2] = a3*expf(-pow(i-b,2)/(2*pow(c3,2)));
 80016aa:	69f8      	ldr	r0, [r7, #28]
 80016ac:	f7fe fede 	bl	800046c <__aeabi_i2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <calculate_Gaussian_Transform+0x210>)
 80016b6:	f7fe fd8b 	bl	80001d0 <__aeabi_dsub>
 80016ba:	4603      	mov	r3, r0
 80016bc:	460c      	mov	r4, r1
 80016be:	ec44 3b17 	vmov	d7, r3, r4
 80016c2:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80017d0 <calculate_Gaussian_Transform+0x200>
 80016c6:	eeb0 0a47 	vmov.f32	s0, s14
 80016ca:	eef0 0a67 	vmov.f32	s1, s15
 80016ce:	f006 f8d9 	bl	8007884 <pow>
 80016d2:	ec54 3b10 	vmov	r3, r4, d0
 80016d6:	469a      	mov	sl, r3
 80016d8:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <calculate_Gaussian_Transform+0x224>)
 80016e2:	4650      	mov	r0, sl
 80016e4:	4659      	mov	r1, fp
 80016e6:	f7ff f855 	bl	8000794 <__aeabi_ddiv>
 80016ea:	4603      	mov	r3, r0
 80016ec:	460c      	mov	r4, r1
 80016ee:	4618      	mov	r0, r3
 80016f0:	4621      	mov	r1, r4
 80016f2:	f7ff fa1d 	bl	8000b30 <__aeabi_d2f>
 80016f6:	4603      	mov	r3, r0
 80016f8:	ee00 3a10 	vmov	s0, r3
 80016fc:	f006 fa32 	bl	8007b64 <expf>
 8001700:	eeb0 7a40 	vmov.f32	s14, s0
 8001704:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170c:	edc7 7a05 	vstr	s15, [r7, #20]
		F_of_X[3] = a4*expf(-pow(i-b,2)/(2*pow(c4,2)));
 8001710:	69f8      	ldr	r0, [r7, #28]
 8001712:	f7fe feab 	bl	800046c <__aeabi_i2d>
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <calculate_Gaussian_Transform+0x210>)
 800171c:	f7fe fd58 	bl	80001d0 <__aeabi_dsub>
 8001720:	4603      	mov	r3, r0
 8001722:	460c      	mov	r4, r1
 8001724:	ec44 3b17 	vmov	d7, r3, r4
 8001728:	ed9f 1b29 	vldr	d1, [pc, #164]	; 80017d0 <calculate_Gaussian_Transform+0x200>
 800172c:	eeb0 0a47 	vmov.f32	s0, s14
 8001730:	eef0 0a67 	vmov.f32	s1, s15
 8001734:	f006 f8a6 	bl	8007884 <pow>
 8001738:	ec54 3b10 	vmov	r3, r4, d0
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	a324      	add	r3, pc, #144	; (adr r3, 80017d8 <calculate_Gaussian_Transform+0x208>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800174e:	f7ff f821 	bl	8000794 <__aeabi_ddiv>
 8001752:	4603      	mov	r3, r0
 8001754:	460c      	mov	r4, r1
 8001756:	4618      	mov	r0, r3
 8001758:	4621      	mov	r1, r4
 800175a:	f7ff f9e9 	bl	8000b30 <__aeabi_d2f>
 800175e:	4603      	mov	r3, r0
 8001760:	ee00 3a10 	vmov	s0, r3
 8001764:	f006 f9fe 	bl	8007b64 <expf>
 8001768:	eeb0 7a40 	vmov.f32	s14, s0
 800176c:	eddf 7a22 	vldr	s15, [pc, #136]	; 80017f8 <calculate_Gaussian_Transform+0x228>
 8001770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001774:	edc7 7a06 	vstr	s15, [r7, #24]
		H_of_X [i] = F_of_X[0] + F_of_X[1] + F_of_X[2] + F_of_X[3];
 8001778:	ed97 7a03 	vldr	s14, [r7, #12]
 800177c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001784:	edd7 7a05 	vldr	s15, [r7, #20]
 8001788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <calculate_Gaussian_Transform+0x22c>)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	edc3 7a00 	vstr	s15, [r3]
		H_of_X [180-i] = H_of_X [i];
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80017a6:	4915      	ldr	r1, [pc, #84]	; (80017fc <calculate_Gaussian_Transform+0x22c>)
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	440a      	add	r2, r1
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	4912      	ldr	r1, [pc, #72]	; (80017fc <calculate_Gaussian_Transform+0x22c>)
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	601a      	str	r2, [r3, #0]
	for(int i=0; i<=90; i++){
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	3301      	adds	r3, #1
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	2b5a      	cmp	r3, #90	; 0x5a
 80017c2:	f77f af0c 	ble.w	80015de <calculate_Gaussian_Transform+0xe>
	}
}
 80017c6:	bf00      	nop
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40000000 	.word	0x40000000
 80017d8:	00000000 	.word	0x00000000
 80017dc:	413e8480 	.word	0x413e8480
 80017e0:	40568000 	.word	0x40568000
 80017e4:	40400000 	.word	0x40400000
 80017e8:	453b8000 	.word	0x453b8000
 80017ec:	40890000 	.word	0x40890000
 80017f0:	42c80000 	.word	0x42c80000
 80017f4:	40a90000 	.word	0x40a90000
 80017f8:	42000000 	.word	0x42000000
 80017fc:	200003b4 	.word	0x200003b4

08001800 <Get_Halt_Status>:

int Get_Halt_Status(){
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	int Halt=0;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
	Halt += UART_Halt_Status();
 800180a:	f000 fcc5 	bl	8002198 <UART_Halt_Status>
 800180e:	4602      	mov	r2, r0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	607b      	str	r3, [r7, #4]
	Halt += Scheduler_Halt_Status();
 8001816:	f000 fbf1 	bl	8001ffc <Scheduler_Halt_Status>
 800181a:	4602      	mov	r2, r0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	607b      	str	r3, [r7, #4]
	return Halt;
 8001822:	687b      	ldr	r3, [r7, #4]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	0000      	movs	r0, r0
	...

08001830 <Kinematics_Controler>:

//Runs at 0.5ms 1Khz
void Kinematics_Controler(){
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
//
	float Speed =0;
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
	int Joy_Angle =0;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]

	if(Get_Halt_Status() != HALT){
 8001840:	f7ff ffde 	bl	8001800 <Get_Halt_Status>
 8001844:	4603      	mov	r3, r0
 8001846:	2b01      	cmp	r3, #1
 8001848:	d021      	beq.n	800188e <Kinematics_Controler+0x5e>
		if(Scheduler_Control()){
 800184a:	f000 fbdf 	bl	800200c <Scheduler_Control>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00b      	beq.n	800186c <Kinematics_Controler+0x3c>
			Speed = get_Scheduler_Speed();
 8001854:	f000 fbe6 	bl	8002024 <get_Scheduler_Speed>
 8001858:	ee07 0a90 	vmov	s15, r0
 800185c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001860:	edc7 7a07 	vstr	s15, [r7, #28]
			Joy_Angle = get_Scheduler_Angle();
 8001864:	f000 fbea 	bl	800203c <get_Scheduler_Angle>
 8001868:	61b8      	str	r0, [r7, #24]
 800186a:	e015      	b.n	8001898 <Kinematics_Controler+0x68>
		}
		else if(Remote_Control() == ENABLED){
 800186c:	f000 fc8c 	bl	8002188 <Remote_Control>
 8001870:	4603      	mov	r3, r0
 8001872:	2b01      	cmp	r3, #1
 8001874:	d110      	bne.n	8001898 <Kinematics_Controler+0x68>
			Speed = Get_Gradiant_Trottle();
 8001876:	f000 f9f9 	bl	8001c6c <Get_Gradiant_Trottle>
 800187a:	ee07 0a90 	vmov	s15, r0
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	edc7 7a07 	vstr	s15, [r7, #28]
			Joy_Angle = get_angle();
 8001886:	f000 fc69 	bl	800215c <get_angle>
 800188a:	61b8      	str	r0, [r7, #24]
 800188c:	e004      	b.n	8001898 <Kinematics_Controler+0x68>
			//Speed = Get_SW_Speed();
			//Joy_Angle = Get_SW_Angle();
		}
	}
	else {
		Speed=0;
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
		Joy_Angle =0;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
	}
	int polar = Joy_Angle/90;
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	4abf      	ldr	r2, [pc, #764]	; (8001b98 <Kinematics_Controler+0x368>)
 800189c:	fb82 1203 	smull	r1, r2, r2, r3
 80018a0:	441a      	add	r2, r3
 80018a2:	1192      	asrs	r2, r2, #6
 80018a4:	17db      	asrs	r3, r3, #31
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
	int ang = Joy_Angle%180;
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4aba      	ldr	r2, [pc, #744]	; (8001b98 <Kinematics_Controler+0x368>)
 80018ae:	fb82 1203 	smull	r1, r2, r2, r3
 80018b2:	441a      	add	r2, r3
 80018b4:	11d1      	asrs	r1, r2, #7
 80018b6:	17da      	asrs	r2, r3, #31
 80018b8:	1a8a      	subs	r2, r1, r2
 80018ba:	21b4      	movs	r1, #180	; 0xb4
 80018bc:	fb01 f202 	mul.w	r2, r1, r2
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
	float Rad = 0;
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
	float diff =0;
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]

	if(abs(Speed) <= Cutoff_speed) Speed =0;
 80018d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d8:	ee17 3a90 	vmov	r3, s15
 80018dc:	f113 0f12 	cmn.w	r3, #18
 80018e0:	db0a      	blt.n	80018f8 <Kinematics_Controler+0xc8>
 80018e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ea:	ee17 3a90 	vmov	r3, s15
 80018ee:	2b12      	cmp	r3, #18
 80018f0:	dc02      	bgt.n	80018f8 <Kinematics_Controler+0xc8>
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]

	if(ang<20 || ang>160){
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b13      	cmp	r3, #19
 80018fc:	dd02      	ble.n	8001904 <Kinematics_Controler+0xd4>
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	2ba0      	cmp	r3, #160	; 0xa0
 8001902:	dd4a      	ble.n	800199a <Kinematics_Controler+0x16a>
		Right_Target_Speed = -Speed*pitch_res*Polarity_Vector[polar];
 8001904:	edd7 7a07 	vldr	s15, [r7, #28]
 8001908:	eef1 7a67 	vneg.f32	s15, s15
 800190c:	ee17 3a90 	vmov	r3, s15
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fdbd 	bl	8000490 <__aeabi_f2d>
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4ba0      	ldr	r3, [pc, #640]	; (8001b9c <Kinematics_Controler+0x36c>)
 800191c:	f7fe fe10 	bl	8000540 <__aeabi_dmul>
 8001920:	4603      	mov	r3, r0
 8001922:	460c      	mov	r4, r1
 8001924:	4625      	mov	r5, r4
 8001926:	461c      	mov	r4, r3
 8001928:	4a9d      	ldr	r2, [pc, #628]	; (8001ba0 <Kinematics_Controler+0x370>)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fd9b 	bl	800046c <__aeabi_i2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4620      	mov	r0, r4
 800193c:	4629      	mov	r1, r5
 800193e:	f7fe fdff 	bl	8000540 <__aeabi_dmul>
 8001942:	4603      	mov	r3, r0
 8001944:	460c      	mov	r4, r1
 8001946:	4618      	mov	r0, r3
 8001948:	4621      	mov	r1, r4
 800194a:	f7ff f8f1 	bl	8000b30 <__aeabi_d2f>
 800194e:	4602      	mov	r2, r0
 8001950:	4b94      	ldr	r3, [pc, #592]	; (8001ba4 <Kinematics_Controler+0x374>)
 8001952:	601a      	str	r2, [r3, #0]
		Left_Target_Speed  =  Speed*pitch_res*Polarity_Vector[polar];
 8001954:	69f8      	ldr	r0, [r7, #28]
 8001956:	f7fe fd9b 	bl	8000490 <__aeabi_f2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b8f      	ldr	r3, [pc, #572]	; (8001b9c <Kinematics_Controler+0x36c>)
 8001960:	f7fe fdee 	bl	8000540 <__aeabi_dmul>
 8001964:	4603      	mov	r3, r0
 8001966:	460c      	mov	r4, r1
 8001968:	4625      	mov	r5, r4
 800196a:	461c      	mov	r4, r3
 800196c:	4a8c      	ldr	r2, [pc, #560]	; (8001ba0 <Kinematics_Controler+0x370>)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fd79 	bl	800046c <__aeabi_i2d>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4620      	mov	r0, r4
 8001980:	4629      	mov	r1, r5
 8001982:	f7fe fddd 	bl	8000540 <__aeabi_dmul>
 8001986:	4603      	mov	r3, r0
 8001988:	460c      	mov	r4, r1
 800198a:	4618      	mov	r0, r3
 800198c:	4621      	mov	r1, r4
 800198e:	f7ff f8cf 	bl	8000b30 <__aeabi_d2f>
 8001992:	4602      	mov	r2, r0
 8001994:	4b84      	ldr	r3, [pc, #528]	; (8001ba8 <Kinematics_Controler+0x378>)
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	e05d      	b.n	8001a56 <Kinematics_Controler+0x226>
	}
	else {
		if(Joy_Angle >= 180) Speed = -Speed;
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2bb3      	cmp	r3, #179	; 0xb3
 800199e:	dd05      	ble.n	80019ac <Kinematics_Controler+0x17c>
 80019a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019a4:	eef1 7a67 	vneg.f32	s15, s15
 80019a8:	edc7 7a07 	vstr	s15, [r7, #28]
		// ################### System Plant #####################
		/* calculate the desired wheel speeds
		 * right = Omega(Raduis-L/2) = V/R(R-L/2) = V(1-L/2R)
		 * Left  = Omega(Raduis+L/2) = V/R(R+L/2) = V(1+L/2R)*/
		Rad = H_of_X[ang]*Polarity_Vector[polar];
 80019ac:	4a7f      	ldr	r2, [pc, #508]	; (8001bac <Kinematics_Controler+0x37c>)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	ed93 7a00 	vldr	s14, [r3]
 80019b8:	4a79      	ldr	r2, [pc, #484]	; (8001ba0 <Kinematics_Controler+0x370>)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	edc7 7a03 	vstr	s15, [r7, #12]
		diff = l/Rad;
 80019d0:	4b77      	ldr	r3, [pc, #476]	; (8001bb0 <Kinematics_Controler+0x380>)
 80019d2:	edd3 6a00 	vldr	s13, [r3]
 80019d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80019da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019de:	edc7 7a02 	vstr	s15, [r7, #8]
		Right_Target_Speed = Speed*(1.0 - diff);
 80019e2:	69f8      	ldr	r0, [r7, #28]
 80019e4:	f7fe fd54 	bl	8000490 <__aeabi_f2d>
 80019e8:	4604      	mov	r4, r0
 80019ea:	460d      	mov	r5, r1
 80019ec:	68b8      	ldr	r0, [r7, #8]
 80019ee:	f7fe fd4f 	bl	8000490 <__aeabi_f2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	496e      	ldr	r1, [pc, #440]	; (8001bb4 <Kinematics_Controler+0x384>)
 80019fc:	f7fe fbe8 	bl	80001d0 <__aeabi_dsub>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4620      	mov	r0, r4
 8001a06:	4629      	mov	r1, r5
 8001a08:	f7fe fd9a 	bl	8000540 <__aeabi_dmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	4618      	mov	r0, r3
 8001a12:	4621      	mov	r1, r4
 8001a14:	f7ff f88c 	bl	8000b30 <__aeabi_d2f>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4b62      	ldr	r3, [pc, #392]	; (8001ba4 <Kinematics_Controler+0x374>)
 8001a1c:	601a      	str	r2, [r3, #0]
		Left_Target_Speed  = Speed*(1.0 + diff);
 8001a1e:	69f8      	ldr	r0, [r7, #28]
 8001a20:	f7fe fd36 	bl	8000490 <__aeabi_f2d>
 8001a24:	4604      	mov	r4, r0
 8001a26:	460d      	mov	r5, r1
 8001a28:	68b8      	ldr	r0, [r7, #8]
 8001a2a:	f7fe fd31 	bl	8000490 <__aeabi_f2d>
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	4b60      	ldr	r3, [pc, #384]	; (8001bb4 <Kinematics_Controler+0x384>)
 8001a34:	f7fe fbce 	bl	80001d4 <__adddf3>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	4629      	mov	r1, r5
 8001a40:	f7fe fd7e 	bl	8000540 <__aeabi_dmul>
 8001a44:	4603      	mov	r3, r0
 8001a46:	460c      	mov	r4, r1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	f7ff f870 	bl	8000b30 <__aeabi_d2f>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b55      	ldr	r3, [pc, #340]	; (8001ba8 <Kinematics_Controler+0x378>)
 8001a54:	601a      	str	r2, [r3, #0]
	}
	//Get_PID_Controller_Correction()
	float R_error = Right_Target_Speed - Right_Motor_Speed;
 8001a56:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <Kinematics_Controler+0x374>)
 8001a58:	ed93 7a00 	vldr	s14, [r3]
 8001a5c:	4b56      	ldr	r3, [pc, #344]	; (8001bb8 <Kinematics_Controler+0x388>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a66:	edc7 7a01 	vstr	s15, [r7, #4]
	float L_error = Left_Target_Speed - Left_Motor_Speed;
 8001a6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ba8 <Kinematics_Controler+0x378>)
 8001a6c:	ed93 7a00 	vldr	s14, [r3]
 8001a70:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <Kinematics_Controler+0x38c>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7a:	edc7 7a00 	vstr	s15, [r7]
	Right_Motor_Speed += R_error*Kp;
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <Kinematics_Controler+0x388>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd04 	bl	8000490 <__aeabi_f2d>
 8001a88:	4604      	mov	r4, r0
 8001a8a:	460d      	mov	r5, r1
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7fe fcff 	bl	8000490 <__aeabi_f2d>
 8001a92:	a33f      	add	r3, pc, #252	; (adr r3, 8001b90 <Kinematics_Controler+0x360>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fd52 	bl	8000540 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	f7fe fb96 	bl	80001d4 <__adddf3>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	4618      	mov	r0, r3
 8001aae:	4621      	mov	r1, r4
 8001ab0:	f7ff f83e 	bl	8000b30 <__aeabi_d2f>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <Kinematics_Controler+0x388>)
 8001ab8:	601a      	str	r2, [r3, #0]
	Left_Motor_Speed  += L_error*Kp;
 8001aba:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <Kinematics_Controler+0x38c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fce6 	bl	8000490 <__aeabi_f2d>
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	460d      	mov	r5, r1
 8001ac8:	6838      	ldr	r0, [r7, #0]
 8001aca:	f7fe fce1 	bl	8000490 <__aeabi_f2d>
 8001ace:	a330      	add	r3, pc, #192	; (adr r3, 8001b90 <Kinematics_Controler+0x360>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7fe fd34 	bl	8000540 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fb78 	bl	80001d4 <__adddf3>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	460c      	mov	r4, r1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	4621      	mov	r1, r4
 8001aec:	f7ff f820 	bl	8000b30 <__aeabi_d2f>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <Kinematics_Controler+0x38c>)
 8001af4:	601a      	str	r2, [r3, #0]

	if(abs(Right_Motor_Speed) < Dir_Trans_Speed){
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <Kinematics_Controler+0x388>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b00:	ee17 3a90 	vmov	r3, s15
 8001b04:	f113 0f0e 	cmn.w	r3, #14
 8001b08:	db24      	blt.n	8001b54 <Kinematics_Controler+0x324>
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <Kinematics_Controler+0x388>)
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b14:	ee17 3a90 	vmov	r3, s15
 8001b18:	2b0e      	cmp	r3, #14
 8001b1a:	dc1b      	bgt.n	8001b54 <Kinematics_Controler+0x324>
		Right_Wheel_dir = (Right_Motor_Speed>0)?FORWARD:BACKWARD;
 8001b1c:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <Kinematics_Controler+0x388>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	dd01      	ble.n	8001b30 <Kinematics_Controler+0x300>
 8001b2c:	2246      	movs	r2, #70	; 0x46
 8001b2e:	e000      	b.n	8001b32 <Kinematics_Controler+0x302>
 8001b30:	2242      	movs	r2, #66	; 0x42
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <Kinematics_Controler+0x390>)
 8001b34:	701a      	strb	r2, [r3, #0]
		if(Right_Wheel_dir != prev_Right_Wheel_dir){
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <Kinematics_Controler+0x390>)
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <Kinematics_Controler+0x394>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d008      	beq.n	8001b54 <Kinematics_Controler+0x324>
			Set_Right_Motor_Direction(Right_Wheel_dir);
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <Kinematics_Controler+0x390>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f900 	bl	8001d4c <Set_Right_Motor_Direction>
			prev_Right_Wheel_dir = Right_Wheel_dir;
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <Kinematics_Controler+0x390>)
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <Kinematics_Controler+0x394>)
 8001b52:	701a      	strb	r2, [r3, #0]
		}
	}
	if(abs(Left_Motor_Speed) < Dir_Trans_Speed){
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <Kinematics_Controler+0x38c>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b5e:	ee17 3a90 	vmov	r3, s15
 8001b62:	f113 0f0e 	cmn.w	r3, #14
 8001b66:	db41      	blt.n	8001bec <Kinematics_Controler+0x3bc>
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <Kinematics_Controler+0x38c>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b72:	ee17 3a90 	vmov	r3, s15
 8001b76:	2b0e      	cmp	r3, #14
 8001b78:	dc38      	bgt.n	8001bec <Kinematics_Controler+0x3bc>
		Left_Wheel_dir = (Left_Motor_Speed>=0)?FORWARD:BACKWARD;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <Kinematics_Controler+0x38c>)
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	db1e      	blt.n	8001bc8 <Kinematics_Controler+0x398>
 8001b8a:	2246      	movs	r2, #70	; 0x46
 8001b8c:	e01d      	b.n	8001bca <Kinematics_Controler+0x39a>
 8001b8e:	bf00      	nop
 8001b90:	47ae147b 	.word	0x47ae147b
 8001b94:	3fc47ae1 	.word	0x3fc47ae1
 8001b98:	b60b60b7 	.word	0xb60b60b7
 8001b9c:	3fe80000 	.word	0x3fe80000
 8001ba0:	2000000c 	.word	0x2000000c
 8001ba4:	2000028c 	.word	0x2000028c
 8001ba8:	20000290 	.word	0x20000290
 8001bac:	200003b4 	.word	0x200003b4
 8001bb0:	20000004 	.word	0x20000004
 8001bb4:	3ff00000 	.word	0x3ff00000
 8001bb8:	20000294 	.word	0x20000294
 8001bbc:	20000298 	.word	0x20000298
 8001bc0:	2000000a 	.word	0x2000000a
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	2242      	movs	r2, #66	; 0x42
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <Kinematics_Controler+0x42c>)
 8001bcc:	701a      	strb	r2, [r3, #0]
		if(Left_Wheel_dir != prev_Left_Wheel_dir){
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <Kinematics_Controler+0x42c>)
 8001bd0:	781a      	ldrb	r2, [r3, #0]
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <Kinematics_Controler+0x430>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d008      	beq.n	8001bec <Kinematics_Controler+0x3bc>
			Set_Left_Motor_Direction(Left_Wheel_dir);
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <Kinematics_Controler+0x42c>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f8d0 	bl	8001d84 <Set_Left_Motor_Direction>
			prev_Left_Wheel_dir = Left_Wheel_dir;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <Kinematics_Controler+0x42c>)
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <Kinematics_Controler+0x430>)
 8001bea:	701a      	strb	r2, [r3, #0]
		}
	}
	//
	Set_Motor_Speed(RIGHT, abs(round(Right_Motor_Speed)));
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <Kinematics_Controler+0x434>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fc4d 	bl	8000490 <__aeabi_f2d>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	ec44 3b10 	vmov	d0, r3, r4
 8001bfe:	f005 fdf7 	bl	80077f0 <round>
 8001c02:	ec54 3b10 	vmov	r3, r4, d0
 8001c06:	4618      	mov	r0, r3
 8001c08:	4621      	mov	r1, r4
 8001c0a:	f7fe ff49 	bl	8000aa0 <__aeabi_d2iz>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bfb8      	it	lt
 8001c14:	425b      	neglt	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	2052      	movs	r0, #82	; 0x52
 8001c1c:	f000 f8ce 	bl	8001dbc <Set_Motor_Speed>
	Set_Motor_Speed(LEFT, abs(round(Left_Motor_Speed)));
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <Kinematics_Controler+0x438>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc33 	bl	8000490 <__aeabi_f2d>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460c      	mov	r4, r1
 8001c2e:	ec44 3b10 	vmov	d0, r3, r4
 8001c32:	f005 fddd 	bl	80077f0 <round>
 8001c36:	ec54 3b10 	vmov	r3, r4, d0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	f7fe ff2f 	bl	8000aa0 <__aeabi_d2iz>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bfb8      	it	lt
 8001c48:	425b      	neglt	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	204c      	movs	r0, #76	; 0x4c
 8001c50:	f000 f8b4 	bl	8001dbc <Set_Motor_Speed>
}
 8001c54:	bf00      	nop
 8001c56:	3720      	adds	r7, #32
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5c:	2000000b 	.word	0x2000000b
 8001c60:	20000009 	.word	0x20000009
 8001c64:	20000294 	.word	0x20000294
 8001c68:	20000298 	.word	0x20000298

08001c6c <Get_Gradiant_Trottle>:

int Get_Gradiant_Trottle(){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
//
	int Throttle = get_Throttle();
 8001c72:	f000 fa57 	bl	8002124 <get_Throttle>
 8001c76:	6078      	str	r0, [r7, #4]
	//
	if(abs(Throttle - prev_Throttle) > joy_frame){
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <Get_Gradiant_Trottle+0x9c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bfb8      	it	lt
 8001c84:	425b      	neglt	r3, r3
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	dd1b      	ble.n	8001cc2 <Get_Gradiant_Trottle+0x56>
		if(Throttle > Threshold){
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <Get_Gradiant_Trottle+0xa0>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4293      	cmp	r3, r2
 8001c94:	dd0b      	ble.n	8001cae <Get_Gradiant_Trottle+0x42>
			Threshold = lower_Threshold;
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <Get_Gradiant_Trottle+0xa0>)
 8001c98:	2214      	movs	r2, #20
 8001c9a:	701a      	strb	r2, [r3, #0]
			Target_speed = Throttle;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <Get_Gradiant_Trottle+0xa4>)
 8001ca8:	edc3 7a00 	vstr	s15, [r3]
 8001cac:	e006      	b.n	8001cbc <Get_Gradiant_Trottle+0x50>
		}
		else {
			Threshold = upper_Threshold;
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <Get_Gradiant_Trottle+0xa0>)
 8001cb0:	221e      	movs	r2, #30
 8001cb2:	701a      	strb	r2, [r3, #0]
			Target_speed = 0;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <Get_Gradiant_Trottle+0xa4>)
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
		}
		prev_Throttle = Throttle;
 8001cbc:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <Get_Gradiant_Trottle+0x9c>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
	}
	//
	if(abs(Target_speed) <= Cutoff_speed) Target_speed =0;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <Get_Gradiant_Trottle+0xa4>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ccc:	ee17 3a90 	vmov	r3, s15
 8001cd0:	f113 0f12 	cmn.w	r3, #18
 8001cd4:	db0c      	blt.n	8001cf0 <Get_Gradiant_Trottle+0x84>
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <Get_Gradiant_Trottle+0xa4>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce0:	ee17 3a90 	vmov	r3, s15
 8001ce4:	2b12      	cmp	r3, #18
 8001ce6:	dc03      	bgt.n	8001cf0 <Get_Gradiant_Trottle+0x84>
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <Get_Gradiant_Trottle+0xa4>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
	//
	return Target_speed;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <Get_Gradiant_Trottle+0xa4>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfa:	ee17 3a90 	vmov	r3, s15
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000284 	.word	0x20000284
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000288 	.word	0x20000288

08001d14 <Enable_Motor>:

void Enable_Motor(char motor){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
//
	if(motor == RIGHT){
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b52      	cmp	r3, #82	; 0x52
 8001d22:	d104      	bne.n	8001d2e <Enable_Motor+0x1a>
		HAL_GPIO_WritePin(GPIOA, R_Mot_EN_Pin, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2110      	movs	r1, #16
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <Enable_Motor+0x34>)
 8001d2a:	f001 fcc1 	bl	80036b0 <HAL_GPIO_WritePin>
	}
	if(motor == LEFT){
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b4c      	cmp	r3, #76	; 0x4c
 8001d32:	d104      	bne.n	8001d3e <Enable_Motor+0x2a>
		HAL_GPIO_WritePin(GPIOA, L_Mot_EN_Pin, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2120      	movs	r1, #32
 8001d38:	4803      	ldr	r0, [pc, #12]	; (8001d48 <Enable_Motor+0x34>)
 8001d3a:	f001 fcb9 	bl	80036b0 <HAL_GPIO_WritePin>
	}
} //One is enabled
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40020000 	.word	0x40020000

08001d4c <Set_Right_Motor_Direction>:
		HAL_GPIO_WritePin(GPIOA, L_Mot_EN_Pin, 1);
	}

} //Zero is Disabled

void Set_Right_Motor_Direction(char direction){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
//
	if(direction == FORWARD){
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	2b46      	cmp	r3, #70	; 0x46
 8001d5a:	d104      	bne.n	8001d66 <Set_Right_Motor_Direction+0x1a>
		HAL_GPIO_WritePin(GPIOC, R_Mot_Dir_Pin, 1);	//forwards is 0
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2110      	movs	r1, #16
 8001d60:	4807      	ldr	r0, [pc, #28]	; (8001d80 <Set_Right_Motor_Direction+0x34>)
 8001d62:	f001 fca5 	bl	80036b0 <HAL_GPIO_WritePin>
	}
	if(direction == BACKWARD){
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	2b42      	cmp	r3, #66	; 0x42
 8001d6a:	d104      	bne.n	8001d76 <Set_Right_Motor_Direction+0x2a>
		HAL_GPIO_WritePin(GPIOC, R_Mot_Dir_Pin, 0); //backwards is 1
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2110      	movs	r1, #16
 8001d70:	4803      	ldr	r0, [pc, #12]	; (8001d80 <Set_Right_Motor_Direction+0x34>)
 8001d72:	f001 fc9d 	bl	80036b0 <HAL_GPIO_WritePin>
	}

}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40020800 	.word	0x40020800

08001d84 <Set_Left_Motor_Direction>:

void Set_Left_Motor_Direction(char direction){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
//
	if(direction == FORWARD){
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2b46      	cmp	r3, #70	; 0x46
 8001d92:	d104      	bne.n	8001d9e <Set_Left_Motor_Direction+0x1a>
		HAL_GPIO_WritePin(GPIOC, L_Mot_Dir_Pin, 0);	//forwards is 1
 8001d94:	2200      	movs	r2, #0
 8001d96:	2120      	movs	r1, #32
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <Set_Left_Motor_Direction+0x34>)
 8001d9a:	f001 fc89 	bl	80036b0 <HAL_GPIO_WritePin>
	}
	if(direction == BACKWARD){
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2b42      	cmp	r3, #66	; 0x42
 8001da2:	d104      	bne.n	8001dae <Set_Left_Motor_Direction+0x2a>
		HAL_GPIO_WritePin(GPIOC, L_Mot_Dir_Pin, 1);	//backwards is 0
 8001da4:	2201      	movs	r2, #1
 8001da6:	2120      	movs	r1, #32
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <Set_Left_Motor_Direction+0x34>)
 8001daa:	f001 fc81 	bl	80036b0 <HAL_GPIO_WritePin>
	}
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40020800 	.word	0x40020800

08001dbc <Set_Motor_Speed>:

void Set_Motor_Speed(char motor, uint8_t Speed){
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71bb      	strb	r3, [r7, #6]
//
	if(motor == RIGHT){
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2b52      	cmp	r3, #82	; 0x52
 8001dd0:	d103      	bne.n	8001dda <Set_Motor_Speed+0x1e>
		htim2.Instance -> CCR1= Speed  ;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <Set_Motor_Speed+0x38>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	79ba      	ldrb	r2, [r7, #6]
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(motor == LEFT){
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b4c      	cmp	r3, #76	; 0x4c
 8001dde:	d103      	bne.n	8001de8 <Set_Motor_Speed+0x2c>
		htim2.Instance -> CCR2= Speed  ;
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <Set_Motor_Speed+0x38>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	79ba      	ldrb	r2, [r7, #6]
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	20000708 	.word	0x20000708

08001df8 <Initiate_PWM_Signal>:

void Initiate_PWM_Signal(char motor){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
//
	if(motor == RIGHT){
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b52      	cmp	r3, #82	; 0x52
 8001e06:	d103      	bne.n	8001e10 <Initiate_PWM_Signal+0x18>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4807      	ldr	r0, [pc, #28]	; (8001e28 <Initiate_PWM_Signal+0x30>)
 8001e0c:	f003 fb80 	bl	8005510 <HAL_TIM_PWM_Start>
	}
	if(motor == LEFT){
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b4c      	cmp	r3, #76	; 0x4c
 8001e14:	d103      	bne.n	8001e1e <Initiate_PWM_Signal+0x26>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001e16:	2104      	movs	r1, #4
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <Initiate_PWM_Signal+0x30>)
 8001e1a:	f003 fb79 	bl	8005510 <HAL_TIM_PWM_Start>
	}
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000708 	.word	0x20000708

08001e2c <Pixy_SPI_Blind_Transmit>:
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&temp+cnt+3, (uint8_t*)&inbuffer[4], payload_size+2, 50);
	HAL_GPIO_WritePin(GPIOB, SPI1_SS_Pin, 1);
	return 0;
}

void Pixy_SPI_Blind_Transmit(uint8_t *buffer_ptr, uint8_t Size){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
//
	memset(&inbuffer[0], 0, sizeof(inbuffer));
 8001e38:	221e      	movs	r2, #30
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <Pixy_SPI_Blind_Transmit+0x48>)
 8001e3e:	f005 fc1c 	bl	800767a <memset>
	HAL_GPIO_WritePin(GPIOB, SPI1_SS_Pin, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	480c      	ldr	r0, [pc, #48]	; (8001e78 <Pixy_SPI_Blind_Transmit+0x4c>)
 8001e48:	f001 fc32 	bl	80036b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)buffer_ptr, (uint8_t*)&inbuffer[0], Size, 50);
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	2332      	movs	r3, #50	; 0x32
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <Pixy_SPI_Blind_Transmit+0x48>)
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4808      	ldr	r0, [pc, #32]	; (8001e7c <Pixy_SPI_Blind_Transmit+0x50>)
 8001e5c:	f003 f886 	bl	8004f6c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, SPI1_SS_Pin, 1);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <Pixy_SPI_Blind_Transmit+0x4c>)
 8001e66:	f001 fc23 	bl	80036b0 <HAL_GPIO_WritePin>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000029c 	.word	0x2000029c
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	2000074c 	.word	0x2000074c

08001e80 <Set_RGB_LED>:
 *	3		Length of payload	3
 *	4		r - Red value		0 - 255
 *	5		g - Green value		0 - 255
 *	6		b - Blue value		0 - 255
 */
void Set_RGB_LED(uint8_t Red, uint8_t Green, uint8_t Blue){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	71bb      	strb	r3, [r7, #6]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	717b      	strb	r3, [r7, #5]
//
	uint8_t temp_Buff[15] = {0xae, 0xc1,
 8001e92:	23ae      	movs	r3, #174	; 0xae
 8001e94:	723b      	strb	r3, [r7, #8]
 8001e96:	23c1      	movs	r3, #193	; 0xc1
 8001e98:	727b      	strb	r3, [r7, #9]
 8001e9a:	2314      	movs	r3, #20
 8001e9c:	72bb      	strb	r3, [r7, #10]
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	72fb      	strb	r3, [r7, #11]
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	733b      	strb	r3, [r7, #12]
 8001ea6:	79bb      	ldrb	r3, [r7, #6]
 8001ea8:	737b      	strb	r3, [r7, #13]
 8001eaa:	797b      	ldrb	r3, [r7, #5]
 8001eac:	73bb      	strb	r3, [r7, #14]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	743b      	strb	r3, [r7, #16]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	747b      	strb	r3, [r7, #17]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	74bb      	strb	r3, [r7, #18]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	74fb      	strb	r3, [r7, #19]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	753b      	strb	r3, [r7, #20]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	757b      	strb	r3, [r7, #21]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75bb      	strb	r3, [r7, #22]
						   	 0x14, 0x03,
							 Red, Green, Blue,
							 0, 0, 0, 0,
							 0, 0, 0, 0
							 };
	Pixy_SPI_Blind_Transmit(&temp_Buff[0], sizeof(temp_Buff));
 8001ece:	f107 0308 	add.w	r3, r7, #8
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ffa9 	bl	8001e2c <Pixy_SPI_Blind_Transmit>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <scheduler>:
int Distance[4] = {0};
int temp_Dist1 =0;
int temp_Dist2 =0;

//Runs at 20ms 50Hz
void scheduler(void){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
//
	/*Scheduler Alive LED*/
	if(led_cnt++ > LED_COUNT){
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <scheduler+0x100>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	493d      	ldr	r1, [pc, #244]	; (8001fe4 <scheduler+0x100>)
 8001ef0:	600a      	str	r2, [r1, #0]
 8001ef2:	2b09      	cmp	r3, #9
 8001ef4:	dd06      	ble.n	8001f04 <scheduler+0x20>
		led_cnt =0;
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <scheduler+0x100>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8001efc:	2140      	movs	r1, #64	; 0x40
 8001efe:	483a      	ldr	r0, [pc, #232]	; (8001fe8 <scheduler+0x104>)
 8001f00:	f001 fbef 	bl	80036e2 <HAL_GPIO_TogglePin>
	}
	/*##################################*/

	/* Ultra-Sonic sensor section*/
	if(sonic_cnt++ > HCSR04_COUNT){
 8001f04:	4b39      	ldr	r3, [pc, #228]	; (8001fec <scheduler+0x108>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	4938      	ldr	r1, [pc, #224]	; (8001fec <scheduler+0x108>)
 8001f0c:	600a      	str	r2, [r1, #0]
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	dd49      	ble.n	8001fa6 <scheduler+0xc2>
		sonic_cnt =0;
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <scheduler+0x108>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
		Initiate_Sensor_Timers();
 8001f18:	f7ff f9b8 	bl	800128c <Initiate_Sensor_Timers>
		Distance[0] = get_Distance_Data(REAR_SENSOR);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff f973 	bl	8001208 <get_Distance_Data>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <scheduler+0x10c>)
 8001f26:	601a      	str	r2, [r3, #0]
		Distance[1] = get_Distance_Data(FRONT_SENSOR);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff f96d 	bl	8001208 <get_Distance_Data>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <scheduler+0x10c>)
 8001f32:	605a      	str	r2, [r3, #4]
		Distance[2] = get_Distance_Data(FRONT_L_SENSOR);
 8001f34:	2002      	movs	r0, #2
 8001f36:	f7ff f967 	bl	8001208 <get_Distance_Data>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <scheduler+0x10c>)
 8001f3e:	609a      	str	r2, [r3, #8]
		Distance[3] = get_Distance_Data(FRONT_R_SENSOR);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f7ff f961 	bl	8001208 <get_Distance_Data>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <scheduler+0x10c>)
 8001f4a:	60da      	str	r2, [r3, #12]

		if(Distance[0]< 30){
 8001f4c:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <scheduler+0x10c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b1d      	cmp	r3, #29
 8001f52:	dc05      	bgt.n	8001f60 <scheduler+0x7c>
			Set_RGB_LED(0, 0, 255);
 8001f54:	22ff      	movs	r2, #255	; 0xff
 8001f56:	2100      	movs	r1, #0
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff ff91 	bl	8001e80 <Set_RGB_LED>
 8001f5e:	e022      	b.n	8001fa6 <scheduler+0xc2>
		}
		else if(Distance[1]< 30){
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <scheduler+0x10c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b1d      	cmp	r3, #29
 8001f66:	dc05      	bgt.n	8001f74 <scheduler+0x90>
			Set_RGB_LED(0, 255, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	21ff      	movs	r1, #255	; 0xff
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff ff87 	bl	8001e80 <Set_RGB_LED>
 8001f72:	e018      	b.n	8001fa6 <scheduler+0xc2>
		}
		else if(Distance[2]< 30){
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <scheduler+0x10c>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b1d      	cmp	r3, #29
 8001f7a:	dc05      	bgt.n	8001f88 <scheduler+0xa4>
			Set_RGB_LED(255, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	20ff      	movs	r0, #255	; 0xff
 8001f82:	f7ff ff7d 	bl	8001e80 <Set_RGB_LED>
 8001f86:	e00e      	b.n	8001fa6 <scheduler+0xc2>
		}
		else if(Distance[3]< 30){
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <scheduler+0x10c>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b1d      	cmp	r3, #29
 8001f8e:	dc05      	bgt.n	8001f9c <scheduler+0xb8>
			Set_RGB_LED(255, 255, 255);
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	21ff      	movs	r1, #255	; 0xff
 8001f94:	20ff      	movs	r0, #255	; 0xff
 8001f96:	f7ff ff73 	bl	8001e80 <Set_RGB_LED>
 8001f9a:	e004      	b.n	8001fa6 <scheduler+0xc2>
		}
		else{
			Set_RGB_LED(0, 0, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff ff6d 	bl	8001e80 <Set_RGB_LED>
 * Motion sensor data analysis section
 * if sensor enabled
 * get sensor data
 * decide on action
 */
	MPU6050_Get_Accel_RawData(&Accel_Raw_Data);
 8001fa6:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <scheduler+0x110>)
 8001fa8:	f7ff faaa 	bl	8001500 <MPU6050_Get_Accel_RawData>
	//MPU6050_Get_Gyro_RawData(&Gyro_Raw_Data);
	//Accel_Raw_Data -= Accel_Raw_Cali;
	if( abs(Accel_Raw_Data.y) > 1500 ){
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <scheduler+0x110>)
 8001fae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bfb8      	it	lt
 8001fb6:	425b      	neglt	r3, r3
 8001fb8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	dd0d      	ble.n	8001fdc <scheduler+0xf8>
		if(counter++ > I2C_COUNT){
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <scheduler+0x114>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <scheduler+0x114>)
 8001fc8:	600a      	str	r2, [r1, #0]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	dd06      	ble.n	8001fdc <scheduler+0xf8>
			HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <scheduler+0x104>)
 8001fd2:	f001 fb86 	bl	80036e2 <HAL_GPIO_TogglePin>
		counter =0;
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <scheduler+0x114>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]


	/*##################################*/

	// Stop PWM logic for 10us Pulse
	disable_10us_Timer();
 8001fdc:	f7ff f97a 	bl	80012d4 <disable_10us_Timer>
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	200002cc 	.word	0x200002cc
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	200002c8 	.word	0x200002c8
 8001ff0:	200002d0 	.word	0x200002d0
 8001ff4:	200007ac 	.word	0x200007ac
 8001ff8:	200002c4 	.word	0x200002c4

08001ffc <Scheduler_Halt_Status>:

int Scheduler_Halt_Status(){
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
	return SCHEDULER_UNHALT;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <Scheduler_Control>:

int Scheduler_Control(){
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
	return Intervine_Scheduler;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <Scheduler_Control+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	200002bc 	.word	0x200002bc

08002024 <get_Scheduler_Speed>:

int get_Scheduler_Speed(){
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
	return Sched_Speed;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <get_Scheduler_Speed+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	200002c0 	.word	0x200002c0

0800203c <get_Scheduler_Angle>:

int get_Scheduler_Angle(){
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
	return Sched_Angle;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <get_Scheduler_Angle+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	2000001c 	.word	0x2000001c

08002054 <Interrupt_On_Character>:
int Strength = 0;

/*
 *
 */
void Interrupt_On_Character(){
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
//
	if(Transmittion == BEGIN){
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <Interrupt_On_Character+0xb4>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d10d      	bne.n	800207c <Interrupt_On_Character+0x28>
		bufffer_index = 0;
 8002060:	4b2a      	ldr	r3, [pc, #168]	; (800210c <Interrupt_On_Character+0xb8>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
		memset(&buffer, 0, sizeof(buffer));
 8002066:	220a      	movs	r2, #10
 8002068:	2100      	movs	r1, #0
 800206a:	4829      	ldr	r0, [pc, #164]	; (8002110 <Interrupt_On_Character+0xbc>)
 800206c:	f005 fb05 	bl	800767a <memset>
		angle_count = 0;
 8002070:	4b28      	ldr	r3, [pc, #160]	; (8002114 <Interrupt_On_Character+0xc0>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
		Transmittion = START;
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <Interrupt_On_Character+0xb4>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
	}
	if(bufffer_index > 9) {
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <Interrupt_On_Character+0xb8>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b09      	cmp	r3, #9
 8002082:	d903      	bls.n	800208c <Interrupt_On_Character+0x38>
		Transmittion = ENDED;
 8002084:	4b20      	ldr	r3, [pc, #128]	; (8002108 <Interrupt_On_Character+0xb4>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
		return;
 800208a:	e03b      	b.n	8002104 <Interrupt_On_Character+0xb0>
	}
	HAL_UART_Receive(&huart1, (uint8_t*)&buffer[bufffer_index], 1, 10);
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <Interrupt_On_Character+0xb8>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <Interrupt_On_Character+0xbc>)
 8002094:	18d1      	adds	r1, r2, r3
 8002096:	230a      	movs	r3, #10
 8002098:	2201      	movs	r2, #1
 800209a:	481f      	ldr	r0, [pc, #124]	; (8002118 <Interrupt_On_Character+0xc4>)
 800209c:	f004 fc07 	bl	80068ae <HAL_UART_Receive>
	if(buffer[bufffer_index] == 'a') {
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <Interrupt_On_Character+0xb8>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <Interrupt_On_Character+0xbc>)
 80020a8:	5c9b      	ldrb	r3, [r3, r2]
 80020aa:	2b61      	cmp	r3, #97	; 0x61
 80020ac:	d103      	bne.n	80020b6 <Interrupt_On_Character+0x62>
		angle_count = bufffer_index;
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <Interrupt_On_Character+0xb8>)
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <Interrupt_On_Character+0xc0>)
 80020b4:	701a      	strb	r2, [r3, #0]
	}
	if(buffer[bufffer_index] == 's'){
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <Interrupt_On_Character+0xb8>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b14      	ldr	r3, [pc, #80]	; (8002110 <Interrupt_On_Character+0xbc>)
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	2b73      	cmp	r3, #115	; 0x73
 80020c2:	d107      	bne.n	80020d4 <Interrupt_On_Character+0x80>
		Transmittion = ENDED;
 80020c4:	4b10      	ldr	r3, [pc, #64]	; (8002108 <Interrupt_On_Character+0xb4>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
	}
	else {
		bufffer_index++;
		return;
	}
	if(bufffer_index > 3){
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <Interrupt_On_Character+0xb8>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d918      	bls.n	8002104 <Interrupt_On_Character+0xb0>
 80020d2:	e006      	b.n	80020e2 <Interrupt_On_Character+0x8e>
		bufffer_index++;
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <Interrupt_On_Character+0xb8>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <Interrupt_On_Character+0xb8>)
 80020de:	701a      	strb	r2, [r3, #0]
		return;
 80020e0:	e010      	b.n	8002104 <Interrupt_On_Character+0xb0>
		Angle = atoi(&buffer[0]);
 80020e2:	480b      	ldr	r0, [pc, #44]	; (8002110 <Interrupt_On_Character+0xbc>)
 80020e4:	f005 fa90 	bl	8007608 <atoi>
 80020e8:	4602      	mov	r2, r0
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <Interrupt_On_Character+0xc8>)
 80020ec:	601a      	str	r2, [r3, #0]
		Strength = atoi(&buffer[angle_count+1]);
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <Interrupt_On_Character+0xc0>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <Interrupt_On_Character+0xbc>)
 80020f6:	4413      	add	r3, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f005 fa85 	bl	8007608 <atoi>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <Interrupt_On_Character+0xcc>)
 8002102:	601a      	str	r2, [r3, #0]
	}
}
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000020 	.word	0x20000020
 800210c:	200002ea 	.word	0x200002ea
 8002110:	200002e0 	.word	0x200002e0
 8002114:	200002eb 	.word	0x200002eb
 8002118:	20000808 	.word	0x20000808
 800211c:	200002ec 	.word	0x200002ec
 8002120:	200002f0 	.word	0x200002f0

08002124 <get_Throttle>:

/*
 * This function makes it possible to get the
 * Strength data in different parts of the code.
 */
int get_Throttle(){
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
	if(Strength >= 0 && Strength <= 100) return Strength;
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <get_Throttle+0x34>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db06      	blt.n	800213e <get_Throttle+0x1a>
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <get_Throttle+0x34>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b64      	cmp	r3, #100	; 0x64
 8002136:	dc02      	bgt.n	800213e <get_Throttle+0x1a>
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <get_Throttle+0x34>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	e006      	b.n	800214c <get_Throttle+0x28>
	else if(Strength > 100) return 100;
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <get_Throttle+0x34>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	dd01      	ble.n	800214a <get_Throttle+0x26>
 8002146:	2364      	movs	r3, #100	; 0x64
 8002148:	e000      	b.n	800214c <get_Throttle+0x28>
	return 0 ;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	200002f0 	.word	0x200002f0

0800215c <get_angle>:

/*
 * This function makes it possible to get the
 * Angle data in different parts of the code.
 */
int get_angle(){
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	if(Angle >= 0 && Angle <= 360) return Angle ;
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <get_angle+0x28>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db07      	blt.n	8002178 <get_angle+0x1c>
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <get_angle+0x28>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002170:	dc02      	bgt.n	8002178 <get_angle+0x1c>
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <get_angle+0x28>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	e000      	b.n	800217a <get_angle+0x1e>
	return 0 ;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	200002ec 	.word	0x200002ec

08002188 <Remote_Control>:

/*Logic needs to be added in order to
 *manipulate control between SW & UART*/
int Remote_Control(){
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
	return RC_ENABLED;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <UART_Halt_Status>:
int UART_Halt_Status(){
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	return UART_UNHALT;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ae:	f000 ff1d 	bl	8002fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021b2:	f000 f865 	bl	8002280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021b6:	f000 fb6b 	bl	8002890 <MX_GPIO_Init>
  MX_TIM2_Init();
 80021ba:	f000 f92f 	bl	800241c <MX_TIM2_Init>
  MX_I2C2_Init();
 80021be:	f000 f8c9 	bl	8002354 <MX_I2C2_Init>
  MX_SPI1_Init();
 80021c2:	f000 f8f5 	bl	80023b0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80021c6:	f000 fb39 	bl	800283c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80021ca:	f000 fa1f 	bl	800260c <MX_TIM4_Init>
  MX_TIM6_Init();
 80021ce:	f000 fab1 	bl	8002734 <MX_TIM6_Init>
  MX_TIM10_Init();
 80021d2:	f000 fae5 	bl	80027a0 <MX_TIM10_Init>
  MX_TIM3_Init();
 80021d6:	f000 f9a1 	bl	800251c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  calculate_Gaussian_Transform();
 80021da:	f7ff f9f9 	bl	80015d0 <calculate_Gaussian_Transform>
  //.set LED off:
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	4821      	ldr	r0, [pc, #132]	; (8002268 <main+0xc0>)
 80021e4:	f001 fa64 	bl	80036b0 <HAL_GPIO_WritePin>
  //.general IO initializations:
  HAL_TIM_Base_Start_IT(&htim6);				//initiate scheduler timer 20ms period
 80021e8:	4820      	ldr	r0, [pc, #128]	; (800226c <main+0xc4>)
 80021ea:	f003 f938 	bl	800545e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);				//initiate Motor Drive control Timer 0.5ms period
 80021ee:	4820      	ldr	r0, [pc, #128]	; (8002270 <main+0xc8>)
 80021f0:	f003 f935 	bl	800545e <HAL_TIM_Base_Start_IT>
  //.start UART Engine on interrupt mode:
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);	//initiate hsuart interrupt on rx
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <main+0xcc>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <main+0xcc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0220 	orr.w	r2, r2, #32
 8002202:	60da      	str	r2, [r3, #12]

  //.setup MPU6050 Sensor:
  MPU6050_Init(&hi2c2);
 8002204:	481c      	ldr	r0, [pc, #112]	; (8002278 <main+0xd0>)
 8002206:	f7ff f86f 	bl	80012e8 <MPU6050_Init>
  MPU_ConfigTypeDef MPU6050IMU ;
  MPU6050IMU.Accel_Full_Scale = AFS_SEL_2g;
 800220a:	2300      	movs	r3, #0
 800220c:	72bb      	strb	r3, [r7, #10]
  MPU6050IMU.CONFIG_DLPF = DLPF_184A_188G_Hz;
 800220e:	2301      	movs	r3, #1
 8002210:	72fb      	strb	r3, [r7, #11]
  MPU6050IMU.ClockSource = Internal_8MHz;
 8002212:	2300      	movs	r3, #0
 8002214:	723b      	strb	r3, [r7, #8]
  MPU6050IMU.Gyro_Full_Scale = FS_SEL_250;
 8002216:	2300      	movs	r3, #0
 8002218:	727b      	strb	r3, [r7, #9]
  MPU6050IMU.Sleep_Mode_Bit = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	733b      	strb	r3, [r7, #12]
  MPU6050_Config(&MPU6050IMU);
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f8b6 	bl	8001394 <MPU6050_Config>
  RawData_Def Accel_Raw_Cali;
  MPU6050_Get_Accel_RawData(&Accel_Raw_Cali);
 8002228:	463b      	mov	r3, r7
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff f968 	bl	8001500 <MPU6050_Get_Accel_RawData>
  // ************************
  Enable_Motor('R');
 8002230:	2052      	movs	r0, #82	; 0x52
 8002232:	f7ff fd6f 	bl	8001d14 <Enable_Motor>
  Enable_Motor('L');
 8002236:	204c      	movs	r0, #76	; 0x4c
 8002238:	f7ff fd6c 	bl	8001d14 <Enable_Motor>
  Initiate_PWM_Signal('R');
 800223c:	2052      	movs	r0, #82	; 0x52
 800223e:	f7ff fddb 	bl	8001df8 <Initiate_PWM_Signal>
  Initiate_PWM_Signal('L');
 8002242:	204c      	movs	r0, #76	; 0x4c
 8002244:	f7ff fdd8 	bl	8001df8 <Initiate_PWM_Signal>
  Set_Right_Motor_Direction('F');
 8002248:	2046      	movs	r0, #70	; 0x46
 800224a:	f7ff fd7f 	bl	8001d4c <Set_Right_Motor_Direction>
  Set_Left_Motor_Direction('F');
 800224e:	2046      	movs	r0, #70	; 0x46
 8002250:	f7ff fd98 	bl	8001d84 <Set_Left_Motor_Direction>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002254:	2100      	movs	r1, #0
 8002256:	4809      	ldr	r0, [pc, #36]	; (800227c <main+0xd4>)
 8002258:	f003 f95a 	bl	8005510 <HAL_TIM_PWM_Start>

  //htim3.Instance -> CCR1= (180+0)  ;
  //htim3.Instance -> CCR1= (180+90)  ;
  //htim3.Instance -> CCR1= (180+180)  ;
  //htim3.Instance -> CCR1= (180+45)  ;
  htim3.Instance -> CCR1= (180+180);
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <main+0xd4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002264:	635a      	str	r2, [r3, #52]	; 0x34
  //int num=360;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002266:	e7fe      	b.n	8002266 <main+0xbe>
 8002268:	40020000 	.word	0x40020000
 800226c:	20000860 	.word	0x20000860
 8002270:	20000708 	.word	0x20000708
 8002274:	20000808 	.word	0x20000808
 8002278:	200007b4 	.word	0x200007b4
 800227c:	20000688 	.word	0x20000688

08002280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b094      	sub	sp, #80	; 0x50
 8002284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002286:	f107 0320 	add.w	r3, r7, #32
 800228a:	2230      	movs	r2, #48	; 0x30
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f005 f9f3 	bl	800767a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <SystemClock_Config+0xcc>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	4a27      	ldr	r2, [pc, #156]	; (800234c <SystemClock_Config+0xcc>)
 80022ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b2:	6413      	str	r3, [r2, #64]	; 0x40
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <SystemClock_Config+0xcc>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	4b22      	ldr	r3, [pc, #136]	; (8002350 <SystemClock_Config+0xd0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a21      	ldr	r2, [pc, #132]	; (8002350 <SystemClock_Config+0xd0>)
 80022ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <SystemClock_Config+0xd0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022dc:	2302      	movs	r3, #2
 80022de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e0:	2301      	movs	r3, #1
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022e4:	2310      	movs	r3, #16
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e8:	2302      	movs	r3, #2
 80022ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022ec:	2300      	movs	r3, #0
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022f0:	2308      	movs	r3, #8
 80022f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022f8:	2302      	movs	r3, #2
 80022fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022fc:	2304      	movs	r3, #4
 80022fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002300:	f107 0320 	add.w	r3, r7, #32
 8002304:	4618      	mov	r0, r3
 8002306:	f002 f991 	bl	800462c <HAL_RCC_OscConfig>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002310:	f000 fb71 	bl	80029f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002314:	230f      	movs	r3, #15
 8002316:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002318:	2302      	movs	r3, #2
 800231a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002320:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002324:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	2104      	movs	r1, #4
 8002332:	4618      	mov	r0, r3
 8002334:	f002 fbea 	bl	8004b0c <HAL_RCC_ClockConfig>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800233e:	f000 fb5a 	bl	80029f6 <Error_Handler>
  }
}
 8002342:	bf00      	nop
 8002344:	3750      	adds	r7, #80	; 0x50
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000

08002354 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <MX_I2C2_Init+0x50>)
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <MX_I2C2_Init+0x54>)
 800235c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002360:	4a12      	ldr	r2, [pc, #72]	; (80023ac <MX_I2C2_Init+0x58>)
 8002362:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 200;
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <MX_I2C2_Init+0x50>)
 800236c:	22c8      	movs	r2, #200	; 0xc8
 800236e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002372:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002376:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <MX_I2C2_Init+0x50>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <MX_I2C2_Init+0x50>)
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002390:	4804      	ldr	r0, [pc, #16]	; (80023a4 <MX_I2C2_Init+0x50>)
 8002392:	f001 f9c1 	bl	8003718 <HAL_I2C_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800239c:	f000 fb2b 	bl	80029f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200007b4 	.word	0x200007b4
 80023a8:	40005800 	.word	0x40005800
 80023ac:	000186a0 	.word	0x000186a0

080023b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <MX_SPI1_Init+0x64>)
 80023b6:	4a18      	ldr	r2, [pc, #96]	; (8002418 <MX_SPI1_Init+0x68>)
 80023b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <MX_SPI1_Init+0x64>)
 80023bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <MX_SPI1_Init+0x64>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <MX_SPI1_Init+0x64>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MX_SPI1_Init+0x64>)
 80023d0:	2202      	movs	r2, #2
 80023d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <MX_SPI1_Init+0x64>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <MX_SPI1_Init+0x64>)
 80023dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MX_SPI1_Init+0x64>)
 80023e4:	2220      	movs	r2, #32
 80023e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <MX_SPI1_Init+0x64>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_SPI1_Init+0x64>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <MX_SPI1_Init+0x64>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <MX_SPI1_Init+0x64>)
 80023fc:	220a      	movs	r2, #10
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002400:	4804      	ldr	r0, [pc, #16]	; (8002414 <MX_SPI1_Init+0x64>)
 8002402:	f002 fd4f 	bl	8004ea4 <HAL_SPI_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800240c:	f000 faf3 	bl	80029f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000074c 	.word	0x2000074c
 8002418:	40013000 	.word	0x40013000

0800241c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08e      	sub	sp, #56	; 0x38
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002430:	f107 0320 	add.w	r3, r7, #32
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
 8002448:	615a      	str	r2, [r3, #20]
 800244a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800244c:	4b32      	ldr	r3, [pc, #200]	; (8002518 <MX_TIM2_Init+0xfc>)
 800244e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120-1;
 8002454:	4b30      	ldr	r3, [pc, #192]	; (8002518 <MX_TIM2_Init+0xfc>)
 8002456:	2277      	movs	r2, #119	; 0x77
 8002458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800245a:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <MX_TIM2_Init+0xfc>)
 800245c:	2220      	movs	r2, #32
 800245e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256-1;
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <MX_TIM2_Init+0xfc>)
 8002462:	22ff      	movs	r2, #255	; 0xff
 8002464:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002466:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <MX_TIM2_Init+0xfc>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246c:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <MX_TIM2_Init+0xfc>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002472:	4829      	ldr	r0, [pc, #164]	; (8002518 <MX_TIM2_Init+0xfc>)
 8002474:	f002 ffc8 	bl	8005408 <HAL_TIM_Base_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800247e:	f000 faba 	bl	80029f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800248c:	4619      	mov	r1, r3
 800248e:	4822      	ldr	r0, [pc, #136]	; (8002518 <MX_TIM2_Init+0xfc>)
 8002490:	f003 fbdc 	bl	8005c4c <HAL_TIM_ConfigClockSource>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800249a:	f000 faac 	bl	80029f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800249e:	481e      	ldr	r0, [pc, #120]	; (8002518 <MX_TIM2_Init+0xfc>)
 80024a0:	f003 f801 	bl	80054a6 <HAL_TIM_PWM_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80024aa:	f000 faa4 	bl	80029f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024b6:	f107 0320 	add.w	r3, r7, #32
 80024ba:	4619      	mov	r1, r3
 80024bc:	4816      	ldr	r0, [pc, #88]	; (8002518 <MX_TIM2_Init+0xfc>)
 80024be:	f004 f919 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80024c8:	f000 fa95 	bl	80029f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024cc:	2360      	movs	r3, #96	; 0x60
 80024ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2200      	movs	r2, #0
 80024e0:	4619      	mov	r1, r3
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <MX_TIM2_Init+0xfc>)
 80024e4:	f003 faec 	bl	8005ac0 <HAL_TIM_PWM_ConfigChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80024ee:	f000 fa82 	bl	80029f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	2204      	movs	r2, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	4807      	ldr	r0, [pc, #28]	; (8002518 <MX_TIM2_Init+0xfc>)
 80024fa:	f003 fae1 	bl	8005ac0 <HAL_TIM_PWM_ConfigChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8002504:	f000 fa77 	bl	80029f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002508:	4803      	ldr	r0, [pc, #12]	; (8002518 <MX_TIM2_Init+0xfc>)
 800250a:	f000 fbe9 	bl	8002ce0 <HAL_TIM_MspPostInit>

}
 800250e:	bf00      	nop
 8002510:	3738      	adds	r7, #56	; 0x38
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000708 	.word	0x20000708

0800251c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08e      	sub	sp, #56	; 0x38
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002530:	f107 0320 	add.w	r3, r7, #32
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
 8002548:	615a      	str	r2, [r3, #20]
 800254a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800254c:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <MX_TIM3_Init+0xe8>)
 800254e:	4a2e      	ldr	r2, [pc, #184]	; (8002608 <MX_TIM3_Init+0xec>)
 8002550:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 358-1;
 8002552:	4b2c      	ldr	r3, [pc, #176]	; (8002604 <MX_TIM3_Init+0xe8>)
 8002554:	f240 1265 	movw	r2, #357	; 0x165
 8002558:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255a:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <MX_TIM3_Init+0xe8>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600-1;
 8002560:	4b28      	ldr	r3, [pc, #160]	; (8002604 <MX_TIM3_Init+0xe8>)
 8002562:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002566:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002568:	4b26      	ldr	r3, [pc, #152]	; (8002604 <MX_TIM3_Init+0xe8>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256e:	4b25      	ldr	r3, [pc, #148]	; (8002604 <MX_TIM3_Init+0xe8>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002574:	4823      	ldr	r0, [pc, #140]	; (8002604 <MX_TIM3_Init+0xe8>)
 8002576:	f002 ff47 	bl	8005408 <HAL_TIM_Base_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002580:	f000 fa39 	bl	80029f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800258a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800258e:	4619      	mov	r1, r3
 8002590:	481c      	ldr	r0, [pc, #112]	; (8002604 <MX_TIM3_Init+0xe8>)
 8002592:	f003 fb5b 	bl	8005c4c <HAL_TIM_ConfigClockSource>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800259c:	f000 fa2b 	bl	80029f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025a0:	4818      	ldr	r0, [pc, #96]	; (8002604 <MX_TIM3_Init+0xe8>)
 80025a2:	f002 ff80 	bl	80054a6 <HAL_TIM_PWM_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80025ac:	f000 fa23 	bl	80029f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b8:	f107 0320 	add.w	r3, r7, #32
 80025bc:	4619      	mov	r1, r3
 80025be:	4811      	ldr	r0, [pc, #68]	; (8002604 <MX_TIM3_Init+0xe8>)
 80025c0:	f004 f898 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80025ca:	f000 fa14 	bl	80029f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ce:	2360      	movs	r3, #96	; 0x60
 80025d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 180-1;
 80025d2:	23b3      	movs	r3, #179	; 0xb3
 80025d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	2200      	movs	r2, #0
 80025e2:	4619      	mov	r1, r3
 80025e4:	4807      	ldr	r0, [pc, #28]	; (8002604 <MX_TIM3_Init+0xe8>)
 80025e6:	f003 fa6b 	bl	8005ac0 <HAL_TIM_PWM_ConfigChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80025f0:	f000 fa01 	bl	80029f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <MX_TIM3_Init+0xe8>)
 80025f6:	f000 fb73 	bl	8002ce0 <HAL_TIM_MspPostInit>

}
 80025fa:	bf00      	nop
 80025fc:	3738      	adds	r7, #56	; 0x38
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000688 	.word	0x20000688
 8002608:	40000400 	.word	0x40000400

0800260c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002612:	f107 0318 	add.w	r3, r7, #24
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002620:	f107 0310 	add.w	r3, r7, #16
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800262a:	463b      	mov	r3, r7
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002636:	4b3d      	ldr	r3, [pc, #244]	; (800272c <MX_TIM4_Init+0x120>)
 8002638:	4a3d      	ldr	r2, [pc, #244]	; (8002730 <MX_TIM4_Init+0x124>)
 800263a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 800263c:	4b3b      	ldr	r3, [pc, #236]	; (800272c <MX_TIM4_Init+0x120>)
 800263e:	223f      	movs	r2, #63	; 0x3f
 8002640:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002642:	4b3a      	ldr	r3, [pc, #232]	; (800272c <MX_TIM4_Init+0x120>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002648:	4b38      	ldr	r3, [pc, #224]	; (800272c <MX_TIM4_Init+0x120>)
 800264a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800264e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002650:	4b36      	ldr	r3, [pc, #216]	; (800272c <MX_TIM4_Init+0x120>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <MX_TIM4_Init+0x120>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800265c:	4833      	ldr	r0, [pc, #204]	; (800272c <MX_TIM4_Init+0x120>)
 800265e:	f002 fed3 	bl	8005408 <HAL_TIM_Base_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002668:	f000 f9c5 	bl	80029f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002670:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002672:	f107 0318 	add.w	r3, r7, #24
 8002676:	4619      	mov	r1, r3
 8002678:	482c      	ldr	r0, [pc, #176]	; (800272c <MX_TIM4_Init+0x120>)
 800267a:	f003 fae7 	bl	8005c4c <HAL_TIM_ConfigClockSource>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002684:	f000 f9b7 	bl	80029f6 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002688:	4828      	ldr	r0, [pc, #160]	; (800272c <MX_TIM4_Init+0x120>)
 800268a:	f002 ffd7 	bl	800563c <HAL_TIM_IC_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002694:	f000 f9af 	bl	80029f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	4619      	mov	r1, r3
 80026a6:	4821      	ldr	r0, [pc, #132]	; (800272c <MX_TIM4_Init+0x120>)
 80026a8:	f004 f824 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80026b2:	f000 f9a0 	bl	80029f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80026ba:	2301      	movs	r3, #1
 80026bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80026c6:	463b      	mov	r3, r7
 80026c8:	2200      	movs	r2, #0
 80026ca:	4619      	mov	r1, r3
 80026cc:	4817      	ldr	r0, [pc, #92]	; (800272c <MX_TIM4_Init+0x120>)
 80026ce:	f003 f95b 	bl	8005988 <HAL_TIM_IC_ConfigChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80026d8:	f000 f98d 	bl	80029f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80026dc:	230a      	movs	r3, #10
 80026de:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80026e0:	463b      	mov	r3, r7
 80026e2:	2204      	movs	r2, #4
 80026e4:	4619      	mov	r1, r3
 80026e6:	4811      	ldr	r0, [pc, #68]	; (800272c <MX_TIM4_Init+0x120>)
 80026e8:	f003 f94e 	bl	8005988 <HAL_TIM_IC_ConfigChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80026f2:	f000 f980 	bl	80029f6 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80026f6:	463b      	mov	r3, r7
 80026f8:	2208      	movs	r2, #8
 80026fa:	4619      	mov	r1, r3
 80026fc:	480b      	ldr	r0, [pc, #44]	; (800272c <MX_TIM4_Init+0x120>)
 80026fe:	f003 f943 	bl	8005988 <HAL_TIM_IC_ConfigChannel>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8002708:	f000 f975 	bl	80029f6 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800270c:	463b      	mov	r3, r7
 800270e:	220c      	movs	r2, #12
 8002710:	4619      	mov	r1, r3
 8002712:	4806      	ldr	r0, [pc, #24]	; (800272c <MX_TIM4_Init+0x120>)
 8002714:	f003 f938 	bl	8005988 <HAL_TIM_IC_ConfigChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 800271e:	f000 f96a 	bl	80029f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	3728      	adds	r7, #40	; 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000324 	.word	0x20000324
 8002730:	40000800 	.word	0x40000800

08002734 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273a:	463b      	mov	r3, r7
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <MX_TIM6_Init+0x64>)
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <MX_TIM6_Init+0x68>)
 8002746:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1024-1;
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <MX_TIM6_Init+0x64>)
 800274a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800274e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <MX_TIM6_Init+0x64>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1260-1;
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_TIM6_Init+0x64>)
 8002758:	f240 42eb 	movw	r2, #1259	; 0x4eb
 800275c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <MX_TIM6_Init+0x64>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <MX_TIM6_Init+0x64>)
 8002766:	f002 fe4f 	bl	8005408 <HAL_TIM_Base_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002770:	f000 f941 	bl	80029f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800277c:	463b      	mov	r3, r7
 800277e:	4619      	mov	r1, r3
 8002780:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_TIM6_Init+0x64>)
 8002782:	f003 ffb7 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800278c:	f000 f933 	bl	80029f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000860 	.word	0x20000860
 800279c:	40001000 	.word	0x40001000

080027a0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
 80027b4:	615a      	str	r2, [r3, #20]
 80027b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80027b8:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <MX_TIM10_Init+0x94>)
 80027ba:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <MX_TIM10_Init+0x98>)
 80027bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 128-1;
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <MX_TIM10_Init+0x94>)
 80027c0:	227f      	movs	r2, #127	; 0x7f
 80027c2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <MX_TIM10_Init+0x94>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80027ca:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <MX_TIM10_Init+0x94>)
 80027cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027d0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d2:	4b18      	ldr	r3, [pc, #96]	; (8002834 <MX_TIM10_Init+0x94>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027d8:	4b16      	ldr	r3, [pc, #88]	; (8002834 <MX_TIM10_Init+0x94>)
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80027de:	4815      	ldr	r0, [pc, #84]	; (8002834 <MX_TIM10_Init+0x94>)
 80027e0:	f002 fe12 	bl	8005408 <HAL_TIM_Base_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80027ea:	f000 f904 	bl	80029f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80027ee:	4811      	ldr	r0, [pc, #68]	; (8002834 <MX_TIM10_Init+0x94>)
 80027f0:	f002 fe59 	bl	80054a6 <HAL_TIM_PWM_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80027fa:	f000 f8fc 	bl	80029f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027fe:	2360      	movs	r3, #96	; 0x60
 8002800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8002802:	230a      	movs	r3, #10
 8002804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	2200      	movs	r2, #0
 8002812:	4619      	mov	r1, r3
 8002814:	4807      	ldr	r0, [pc, #28]	; (8002834 <MX_TIM10_Init+0x94>)
 8002816:	f003 f953 	bl	8005ac0 <HAL_TIM_PWM_ConfigChannel>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002820:	f000 f8e9 	bl	80029f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002824:	4803      	ldr	r0, [pc, #12]	; (8002834 <MX_TIM10_Init+0x94>)
 8002826:	f000 fa5b 	bl	8002ce0 <HAL_TIM_MspPostInit>

}
 800282a:	bf00      	nop
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000364 	.word	0x20000364
 8002838:	40014400 	.word	0x40014400

0800283c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <MX_USART1_UART_Init+0x50>)
 8002844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002848:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800284c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002862:	220c      	movs	r2, #12
 8002864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002872:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002874:	f003 ffce 	bl	8006814 <HAL_UART_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800287e:	f000 f8ba 	bl	80029f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000808 	.word	0x20000808
 800288c:	40011000 	.word	0x40011000

08002890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <MX_GPIO_Init+0x110>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a3c      	ldr	r2, [pc, #240]	; (80029a0 <MX_GPIO_Init+0x110>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <MX_GPIO_Init+0x110>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <MX_GPIO_Init+0x110>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a35      	ldr	r2, [pc, #212]	; (80029a0 <MX_GPIO_Init+0x110>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <MX_GPIO_Init+0x110>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <MX_GPIO_Init+0x110>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a2e      	ldr	r2, [pc, #184]	; (80029a0 <MX_GPIO_Init+0x110>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <MX_GPIO_Init+0x110>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <MX_GPIO_Init+0x110>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a27      	ldr	r2, [pc, #156]	; (80029a0 <MX_GPIO_Init+0x110>)
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <MX_GPIO_Init+0x110>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_Mot_EN_Pin|L_Mot_EN_Pin|LED2_Pin|Servo_EN_Pin, GPIO_PIN_RESET);
 8002916:	2200      	movs	r2, #0
 8002918:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800291c:	4821      	ldr	r0, [pc, #132]	; (80029a4 <MX_GPIO_Init+0x114>)
 800291e:	f000 fec7 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002922:	2201      	movs	r2, #1
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	481f      	ldr	r0, [pc, #124]	; (80029a4 <MX_GPIO_Init+0x114>)
 8002928:	f000 fec2 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_Mot_Dir_Pin|L_Mot_Dir_Pin, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	2130      	movs	r1, #48	; 0x30
 8002930:	481d      	ldr	r0, [pc, #116]	; (80029a8 <MX_GPIO_Init+0x118>)
 8002932:	f000 febd 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET);
 8002936:	2201      	movs	r2, #1
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	481c      	ldr	r0, [pc, #112]	; (80029ac <MX_GPIO_Init+0x11c>)
 800293c:	f000 feb8 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_Mot_EN_Pin L_Mot_EN_Pin LED1_Pin LED2_Pin
                           Servo_EN_Pin */
  GPIO_InitStruct.Pin = R_Mot_EN_Pin|L_Mot_EN_Pin|LED1_Pin|LED2_Pin
 8002940:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8002944:	617b      	str	r3, [r7, #20]
                          |Servo_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002946:	2301      	movs	r3, #1
 8002948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	4812      	ldr	r0, [pc, #72]	; (80029a4 <MX_GPIO_Init+0x114>)
 800295a:	f000 fd0f 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : R_Mot_Dir_Pin L_Mot_Dir_Pin */
  GPIO_InitStruct.Pin = R_Mot_Dir_Pin|L_Mot_Dir_Pin;
 800295e:	2330      	movs	r3, #48	; 0x30
 8002960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002962:	2301      	movs	r3, #1
 8002964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800296a:	2302      	movs	r3, #2
 800296c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4619      	mov	r1, r3
 8002974:	480c      	ldr	r0, [pc, #48]	; (80029a8 <MX_GPIO_Init+0x118>)
 8002976:	f000 fd01 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297e:	2301      	movs	r3, #1
 8002980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002986:	2303      	movs	r3, #3
 8002988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	4806      	ldr	r0, [pc, #24]	; (80029ac <MX_GPIO_Init+0x11c>)
 8002992:	f000 fcf3 	bl	800337c <HAL_GPIO_Init>

}
 8002996:	bf00      	nop
 8002998:	3728      	adds	r7, #40	; 0x28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020400 	.word	0x40020400

080029b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
//
	if( htim == &htim6 ){
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0x14>
		//Scheduler runs at 20ms
		scheduler();
 80029c0:	f7ff fa90 	bl	8001ee4 <scheduler>
	}
	if( htim == &htim2 ){
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_TIM_PeriodElapsedCallback+0x20>
		//if(Halt_Controller == 0){
		Kinematics_Controler();
 80029cc:	f7fe ff30 	bl	8001830 <Kinematics_Controler>
		//}
	}
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000860 	.word	0x20000860
 80029dc:	20000708 	.word	0x20000708

080029e0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	HCSR06_Capture_Handler(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fe fa71 	bl	8000ed0 <HCSR06_Capture_Handler>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800

08002a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_I2C_MspInit+0x84>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d12c      	bne.n	8002ad0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_I2C_MspInit+0x88>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <HAL_I2C_MspInit+0x88>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_I2C_MspInit+0x88>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a98:	2312      	movs	r3, #18
 8002a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	480c      	ldr	r0, [pc, #48]	; (8002ae0 <HAL_I2C_MspInit+0x8c>)
 8002ab0:	f000 fc64 	bl	800337c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_I2C_MspInit+0x88>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	4a07      	ldr	r2, [pc, #28]	; (8002adc <HAL_I2C_MspInit+0x88>)
 8002abe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_I2C_MspInit+0x88>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40005800 	.word	0x40005800
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020400 	.word	0x40020400

08002ae4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 0314 	add.w	r3, r7, #20
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <HAL_SPI_MspInit+0x84>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d12b      	bne.n	8002b5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <HAL_SPI_MspInit+0x88>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <HAL_SPI_MspInit+0x88>)
 8002b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b14:	6453      	str	r3, [r2, #68]	; 0x44
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <HAL_SPI_MspInit+0x88>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_SPI_MspInit+0x88>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a10      	ldr	r2, [pc, #64]	; (8002b6c <HAL_SPI_MspInit+0x88>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <HAL_SPI_MspInit+0x88>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b3e:	2338      	movs	r3, #56	; 0x38
 8002b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b4e:	2305      	movs	r3, #5
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b52:	f107 0314 	add.w	r3, r7, #20
 8002b56:	4619      	mov	r1, r3
 8002b58:	4805      	ldr	r0, [pc, #20]	; (8002b70 <HAL_SPI_MspInit+0x8c>)
 8002b5a:	f000 fc0f 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	; 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40013000 	.word	0x40013000
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020400 	.word	0x40020400

08002b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	; 0x38
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b94:	d116      	bne.n	8002bc4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
 8002b9a:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a4a      	ldr	r2, [pc, #296]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b48      	ldr	r3, [pc, #288]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	201c      	movs	r0, #28
 8002bb8:	f000 fb87 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bbc:	201c      	movs	r0, #28
 8002bbe:	f000 fba0 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002bc2:	e07d      	b.n	8002cc0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a40      	ldr	r2, [pc, #256]	; (8002ccc <HAL_TIM_Base_MspInit+0x158>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a3c      	ldr	r2, [pc, #240]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
}
 8002bea:	e069      	b.n	8002cc0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a37      	ldr	r2, [pc, #220]	; (8002cd0 <HAL_TIM_Base_MspInit+0x15c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d135      	bne.n	8002c62 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	4b2c      	ldr	r3, [pc, #176]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002c1c:	f043 0308 	orr.w	r3, r3, #8
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b29      	ldr	r3, [pc, #164]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c2e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c40:	2302      	movs	r3, #2
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4822      	ldr	r0, [pc, #136]	; (8002cd4 <HAL_TIM_Base_MspInit+0x160>)
 8002c4c:	f000 fb96 	bl	800337c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2100      	movs	r1, #0
 8002c54:	201e      	movs	r0, #30
 8002c56:	f000 fb38 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c5a:	201e      	movs	r0, #30
 8002c5c:	f000 fb51 	bl	8003302 <HAL_NVIC_EnableIRQ>
}
 8002c60:	e02e      	b.n	8002cc0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM6)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_TIM_Base_MspInit+0x164>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d116      	bne.n	8002c9a <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002c76:	f043 0310 	orr.w	r3, r3, #16
 8002c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2036      	movs	r0, #54	; 0x36
 8002c8e:	f000 fb1c 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c92:	2036      	movs	r0, #54	; 0x36
 8002c94:	f000 fb35 	bl	8003302 <HAL_NVIC_EnableIRQ>
}
 8002c98:	e012      	b.n	8002cc0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM10)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a0f      	ldr	r2, [pc, #60]	; (8002cdc <HAL_TIM_Base_MspInit+0x168>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	4a06      	ldr	r2, [pc, #24]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb2:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <HAL_TIM_Base_MspInit+0x154>)
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3738      	adds	r7, #56	; 0x38
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40000400 	.word	0x40000400
 8002cd0:	40000800 	.word	0x40000800
 8002cd4:	40020c00 	.word	0x40020c00
 8002cd8:	40001000 	.word	0x40001000
 8002cdc:	40014400 	.word	0x40014400

08002ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d00:	d11e      	bne.n	8002d40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	4b34      	ldr	r3, [pc, #208]	; (8002dd8 <HAL_TIM_MspPostInit+0xf8>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a33      	ldr	r2, [pc, #204]	; (8002dd8 <HAL_TIM_MspPostInit+0xf8>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <HAL_TIM_MspPostInit+0xf8>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Right_Mot_signal_Pin|Left_Mot_signal_Pin;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4619      	mov	r1, r3
 8002d38:	4828      	ldr	r0, [pc, #160]	; (8002ddc <HAL_TIM_MspPostInit+0xfc>)
 8002d3a:	f000 fb1f 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002d3e:	e047      	b.n	8002dd0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a26      	ldr	r2, [pc, #152]	; (8002de0 <HAL_TIM_MspPostInit+0x100>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d11e      	bne.n	8002d88 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <HAL_TIM_MspPostInit+0xf8>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <HAL_TIM_MspPostInit+0xf8>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <HAL_TIM_MspPostInit+0xf8>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d66:	2340      	movs	r3, #64	; 0x40
 8002d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d76:	2302      	movs	r3, #2
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7a:	f107 0314 	add.w	r3, r7, #20
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4818      	ldr	r0, [pc, #96]	; (8002de4 <HAL_TIM_MspPostInit+0x104>)
 8002d82:	f000 fafb 	bl	800337c <HAL_GPIO_Init>
}
 8002d86:	e023      	b.n	8002dd0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM10)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a16      	ldr	r2, [pc, #88]	; (8002de8 <HAL_TIM_MspPostInit+0x108>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d11e      	bne.n	8002dd0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_TIM_MspPostInit+0xf8>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a0f      	ldr	r2, [pc, #60]	; (8002dd8 <HAL_TIM_MspPostInit+0xf8>)
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_TIM_MspPostInit+0xf8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4808      	ldr	r0, [pc, #32]	; (8002dec <HAL_TIM_MspPostInit+0x10c>)
 8002dcc:	f000 fad6 	bl	800337c <HAL_GPIO_Init>
}
 8002dd0:	bf00      	nop
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40014400 	.word	0x40014400
 8002dec:	40020400 	.word	0x40020400

08002df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <HAL_UART_MspInit+0x94>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d134      	bne.n	8002e7c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <HAL_UART_MspInit+0x98>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	4a1b      	ldr	r2, [pc, #108]	; (8002e88 <HAL_UART_MspInit+0x98>)
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	6453      	str	r3, [r2, #68]	; 0x44
 8002e22:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_UART_MspInit+0x98>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <HAL_UART_MspInit+0x98>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <HAL_UART_MspInit+0x98>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_UART_MspInit+0x98>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e50:	2302      	movs	r3, #2
 8002e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4619      	mov	r1, r3
 8002e66:	4809      	ldr	r0, [pc, #36]	; (8002e8c <HAL_UART_MspInit+0x9c>)
 8002e68:	f000 fa88 	bl	800337c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2025      	movs	r0, #37	; 0x25
 8002e72:	f000 fa2a 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e76:	2025      	movs	r0, #37	; 0x25
 8002e78:	f000 fa43 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e7c:	bf00      	nop
 8002e7e:	3728      	adds	r7, #40	; 0x28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40011000 	.word	0x40011000
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40020000 	.word	0x40020000

08002e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea2:	e7fe      	b.n	8002ea2 <HardFault_Handler+0x4>

08002ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <MemManage_Handler+0x4>

08002eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eae:	e7fe      	b.n	8002eae <BusFault_Handler+0x4>

08002eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb4:	e7fe      	b.n	8002eb4 <UsageFault_Handler+0x4>

08002eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee4:	f000 f8d4 	bl	8003090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}

08002eec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <TIM2_IRQHandler+0x10>)
 8002ef2:	f002 fc41 	bl	8005778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000708 	.word	0x20000708

08002f00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <TIM4_IRQHandler+0x10>)
 8002f06:	f002 fc37 	bl	8005778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000324 	.word	0x20000324

08002f14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Interrupt_On_Character();
 8002f1a:	f7ff f89b 	bl	8002054 <Interrupt_On_Character>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f1e:	480d      	ldr	r0, [pc, #52]	; (8002f54 <USART1_IRQHandler+0x40>)
 8002f20:	f003 fd6c 	bl	80069fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <USART1_IRQHandler+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
  __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <USART1_IRQHandler+0x40>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f06f 0220 	mvn.w	r2, #32
 8002f32:	601a      	str	r2, [r3, #0]
  __HAL_UART_CLEAR_PEFLAG(&huart1);
 8002f34:	2300      	movs	r3, #0
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <USART1_IRQHandler+0x40>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <USART1_IRQHandler+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART1_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000808 	.word	0x20000808

08002f58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f5c:	4802      	ldr	r0, [pc, #8]	; (8002f68 <TIM6_DAC_IRQHandler+0x10>)
 8002f5e:	f002 fc0b 	bl	8005778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000860 	.word	0x20000860

08002f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <SystemInit+0x28>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <SystemInit+0x28>)
 8002f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <SystemInit+0x28>)
 8002f82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f86:	609a      	str	r2, [r3, #8]
#endif
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f9e:	e003      	b.n	8002fa8 <LoopCopyDataInit>

08002fa0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fa6:	3104      	adds	r1, #4

08002fa8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fa8:	480b      	ldr	r0, [pc, #44]	; (8002fd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002faa:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fb0:	d3f6      	bcc.n	8002fa0 <CopyDataInit>
  ldr  r2, =_sbss
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fb4:	e002      	b.n	8002fbc <LoopFillZerobss>

08002fb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fb8:	f842 3b04 	str.w	r3, [r2], #4

08002fbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fc0:	d3f9      	bcc.n	8002fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fc2:	f7ff ffd3 	bl	8002f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fc6:	f004 fb29 	bl	800761c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fca:	f7ff f8ed 	bl	80021a8 <main>
  bx  lr    
 8002fce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002fd4:	08008d90 	.word	0x08008d90
  ldr  r0, =_sdata
 8002fd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fdc:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8002fe0:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 8002fe4:	200008a4 	.word	0x200008a4

08002fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe8:	e7fe      	b.n	8002fe8 <ADC_IRQHandler>
	...

08002fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	; (800302c <HAL_Init+0x40>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	; (800302c <HAL_Init+0x40>)
 8002ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_Init+0x40>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0a      	ldr	r2, [pc, #40]	; (800302c <HAL_Init+0x40>)
 8003002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_Init+0x40>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a07      	ldr	r2, [pc, #28]	; (800302c <HAL_Init+0x40>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003014:	2003      	movs	r0, #3
 8003016:	f000 f94d 	bl	80032b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800301a:	2000      	movs	r0, #0
 800301c:	f000 f808 	bl	8003030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003020:	f7ff fcf0 	bl	8002a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023c00 	.word	0x40023c00

08003030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_InitTick+0x54>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_InitTick+0x58>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4619      	mov	r1, r3
 8003042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003046:	fbb3 f3f1 	udiv	r3, r3, r1
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f965 	bl	800331e <HAL_SYSTICK_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e00e      	b.n	800307c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b0f      	cmp	r3, #15
 8003062:	d80a      	bhi.n	800307a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003064:	2200      	movs	r2, #0
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f000 f92d 	bl	80032ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003070:	4a06      	ldr	r2, [pc, #24]	; (800308c <HAL_InitTick+0x5c>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000024 	.word	0x20000024
 8003088:	2000002c 	.word	0x2000002c
 800308c:	20000028 	.word	0x20000028

08003090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_IncTick+0x20>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_IncTick+0x24>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <HAL_IncTick+0x24>)
 80030a2:	6013      	str	r3, [r2, #0]
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	2000002c 	.word	0x2000002c
 80030b4:	200008a0 	.word	0x200008a0

080030b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return uwTick;
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_GetTick+0x14>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	200008a0 	.word	0x200008a0

080030d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff ffee 	bl	80030b8 <HAL_GetTick>
 80030dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d005      	beq.n	80030f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_Delay+0x40>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030f6:	bf00      	nop
 80030f8:	f7ff ffde 	bl	80030b8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	429a      	cmp	r2, r3
 8003106:	d8f7      	bhi.n	80030f8 <HAL_Delay+0x28>
  {
  }
}
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	2000002c 	.word	0x2000002c

08003114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003130:	4013      	ands	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800313c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003146:	4a04      	ldr	r2, [pc, #16]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <__NVIC_GetPriorityGrouping+0x18>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0307 	and.w	r3, r3, #7
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4907      	ldr	r1, [pc, #28]	; (80031b0 <__NVIC_EnableIRQ+0x38>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3b01      	subs	r3, #1
 800327c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003280:	d301      	bcc.n	8003286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003282:	2301      	movs	r3, #1
 8003284:	e00f      	b.n	80032a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <SysTick_Config+0x40>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328e:	210f      	movs	r1, #15
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	f7ff ff8e 	bl	80031b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <SysTick_Config+0x40>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <SysTick_Config+0x40>)
 80032a0:	2207      	movs	r2, #7
 80032a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000e010 	.word	0xe000e010

080032b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff29 	bl	8003114 <__NVIC_SetPriorityGrouping>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032dc:	f7ff ff3e 	bl	800315c <__NVIC_GetPriorityGrouping>
 80032e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f7ff ff8e 	bl	8003208 <NVIC_EncodePriority>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff5d 	bl	80031b4 <__NVIC_SetPriority>
}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	4603      	mov	r3, r0
 800330a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff31 	bl	8003178 <__NVIC_EnableIRQ>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ffa2 	bl	8003270 <SysTick_Config>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d004      	beq.n	8003354 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2280      	movs	r2, #128	; 0x80
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e00c      	b.n	800336e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2205      	movs	r2, #5
 8003358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	e16b      	b.n	8003670 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003398:	2201      	movs	r2, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	f040 815a 	bne.w	800366a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d00b      	beq.n	80033d6 <HAL_GPIO_Init+0x5a>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d007      	beq.n	80033d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ca:	2b11      	cmp	r3, #17
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b12      	cmp	r3, #18
 80033d4:	d130      	bne.n	8003438 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	2203      	movs	r2, #3
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800340c:	2201      	movs	r2, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 0201 	and.w	r2, r3, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0xfc>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b12      	cmp	r3, #18
 8003476:	d123      	bne.n	80034c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	08da      	lsrs	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0203 	and.w	r2, r3, #3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80b4 	beq.w	800366a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <HAL_GPIO_Init+0x308>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	4a5e      	ldr	r2, [pc, #376]	; (8003684 <HAL_GPIO_Init+0x308>)
 800350c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003510:	6453      	str	r3, [r2, #68]	; 0x44
 8003512:	4b5c      	ldr	r3, [pc, #368]	; (8003684 <HAL_GPIO_Init+0x308>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351e:	4a5a      	ldr	r2, [pc, #360]	; (8003688 <HAL_GPIO_Init+0x30c>)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a51      	ldr	r2, [pc, #324]	; (800368c <HAL_GPIO_Init+0x310>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02b      	beq.n	80035a2 <HAL_GPIO_Init+0x226>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a50      	ldr	r2, [pc, #320]	; (8003690 <HAL_GPIO_Init+0x314>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d025      	beq.n	800359e <HAL_GPIO_Init+0x222>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4f      	ldr	r2, [pc, #316]	; (8003694 <HAL_GPIO_Init+0x318>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01f      	beq.n	800359a <HAL_GPIO_Init+0x21e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4e      	ldr	r2, [pc, #312]	; (8003698 <HAL_GPIO_Init+0x31c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d019      	beq.n	8003596 <HAL_GPIO_Init+0x21a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4d      	ldr	r2, [pc, #308]	; (800369c <HAL_GPIO_Init+0x320>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_GPIO_Init+0x216>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4c      	ldr	r2, [pc, #304]	; (80036a0 <HAL_GPIO_Init+0x324>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00d      	beq.n	800358e <HAL_GPIO_Init+0x212>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4b      	ldr	r2, [pc, #300]	; (80036a4 <HAL_GPIO_Init+0x328>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <HAL_GPIO_Init+0x20e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4a      	ldr	r2, [pc, #296]	; (80036a8 <HAL_GPIO_Init+0x32c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_GPIO_Init+0x20a>
 8003582:	2307      	movs	r3, #7
 8003584:	e00e      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 8003586:	2308      	movs	r3, #8
 8003588:	e00c      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800358a:	2306      	movs	r3, #6
 800358c:	e00a      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800358e:	2305      	movs	r3, #5
 8003590:	e008      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 8003592:	2304      	movs	r3, #4
 8003594:	e006      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 8003596:	2303      	movs	r3, #3
 8003598:	e004      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800359a:	2302      	movs	r3, #2
 800359c:	e002      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 80035a2:	2300      	movs	r3, #0
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	f002 0203 	and.w	r2, r2, #3
 80035aa:	0092      	lsls	r2, r2, #2
 80035ac:	4093      	lsls	r3, r2
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b4:	4934      	ldr	r1, [pc, #208]	; (8003688 <HAL_GPIO_Init+0x30c>)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	3302      	adds	r3, #2
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c2:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_GPIO_Init+0x330>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e6:	4a31      	ldr	r2, [pc, #196]	; (80036ac <HAL_GPIO_Init+0x330>)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035ec:	4b2f      	ldr	r3, [pc, #188]	; (80036ac <HAL_GPIO_Init+0x330>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003610:	4a26      	ldr	r2, [pc, #152]	; (80036ac <HAL_GPIO_Init+0x330>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003616:	4b25      	ldr	r3, [pc, #148]	; (80036ac <HAL_GPIO_Init+0x330>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <HAL_GPIO_Init+0x330>)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_GPIO_Init+0x330>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003664:	4a11      	ldr	r2, [pc, #68]	; (80036ac <HAL_GPIO_Init+0x330>)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3301      	adds	r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b0f      	cmp	r3, #15
 8003674:	f67f ae90 	bls.w	8003398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003678:	bf00      	nop
 800367a:	3724      	adds	r7, #36	; 0x24
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40023800 	.word	0x40023800
 8003688:	40013800 	.word	0x40013800
 800368c:	40020000 	.word	0x40020000
 8003690:	40020400 	.word	0x40020400
 8003694:	40020800 	.word	0x40020800
 8003698:	40020c00 	.word	0x40020c00
 800369c:	40021000 	.word	0x40021000
 80036a0:	40021400 	.word	0x40021400
 80036a4:	40021800 	.word	0x40021800
 80036a8:	40021c00 	.word	0x40021c00
 80036ac:	40013c00 	.word	0x40013c00

080036b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]
 80036bc:	4613      	mov	r3, r2
 80036be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c0:	787b      	ldrb	r3, [r7, #1]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c6:	887a      	ldrh	r2, [r7, #2]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036cc:	e003      	b.n	80036d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	041a      	lsls	r2, r3, #16
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	619a      	str	r2, [r3, #24]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	401a      	ands	r2, r3
 80036f6:	887b      	ldrh	r3, [r7, #2]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d104      	bne.n	8003706 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	041a      	lsls	r2, r3, #16
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003704:	e002      	b.n	800370c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e11f      	b.n	800396a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff f988 	bl	8002a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800376a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800377a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800377c:	f001 fb6a 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 8003780:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4a7b      	ldr	r2, [pc, #492]	; (8003974 <HAL_I2C_Init+0x25c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d807      	bhi.n	800379c <HAL_I2C_Init+0x84>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a7a      	ldr	r2, [pc, #488]	; (8003978 <HAL_I2C_Init+0x260>)
 8003790:	4293      	cmp	r3, r2
 8003792:	bf94      	ite	ls
 8003794:	2301      	movls	r3, #1
 8003796:	2300      	movhi	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e006      	b.n	80037aa <HAL_I2C_Init+0x92>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a77      	ldr	r2, [pc, #476]	; (800397c <HAL_I2C_Init+0x264>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	bf94      	ite	ls
 80037a4:	2301      	movls	r3, #1
 80037a6:	2300      	movhi	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0db      	b.n	800396a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a72      	ldr	r2, [pc, #456]	; (8003980 <HAL_I2C_Init+0x268>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0c9b      	lsrs	r3, r3, #18
 80037bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a64      	ldr	r2, [pc, #400]	; (8003974 <HAL_I2C_Init+0x25c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d802      	bhi.n	80037ec <HAL_I2C_Init+0xd4>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3301      	adds	r3, #1
 80037ea:	e009      	b.n	8003800 <HAL_I2C_Init+0xe8>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	4a63      	ldr	r2, [pc, #396]	; (8003984 <HAL_I2C_Init+0x26c>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	3301      	adds	r3, #1
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	430b      	orrs	r3, r1
 8003806:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003812:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4956      	ldr	r1, [pc, #344]	; (8003974 <HAL_I2C_Init+0x25c>)
 800381c:	428b      	cmp	r3, r1
 800381e:	d80d      	bhi.n	800383c <HAL_I2C_Init+0x124>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e59      	subs	r1, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fbb1 f3f3 	udiv	r3, r1, r3
 800382e:	3301      	adds	r3, #1
 8003830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003834:	2b04      	cmp	r3, #4
 8003836:	bf38      	it	cc
 8003838:	2304      	movcc	r3, #4
 800383a:	e04f      	b.n	80038dc <HAL_I2C_Init+0x1c4>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d111      	bne.n	8003868 <HAL_I2C_Init+0x150>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1e58      	subs	r0, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	440b      	add	r3, r1
 8003852:	fbb0 f3f3 	udiv	r3, r0, r3
 8003856:	3301      	adds	r3, #1
 8003858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e012      	b.n	800388e <HAL_I2C_Init+0x176>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1e58      	subs	r0, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	0099      	lsls	r1, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	fbb0 f3f3 	udiv	r3, r0, r3
 800387e:	3301      	adds	r3, #1
 8003880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Init+0x17e>
 8003892:	2301      	movs	r3, #1
 8003894:	e022      	b.n	80038dc <HAL_I2C_Init+0x1c4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10e      	bne.n	80038bc <HAL_I2C_Init+0x1a4>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1e58      	subs	r0, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	440b      	add	r3, r1
 80038ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ba:	e00f      	b.n	80038dc <HAL_I2C_Init+0x1c4>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e58      	subs	r0, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	0099      	lsls	r1, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d2:	3301      	adds	r3, #1
 80038d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	6809      	ldr	r1, [r1, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800390a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6911      	ldr	r1, [r2, #16]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68d2      	ldr	r2, [r2, #12]
 8003916:	4311      	orrs	r1, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	430b      	orrs	r3, r1
 800391e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	000186a0 	.word	0x000186a0
 8003978:	001e847f 	.word	0x001e847f
 800397c:	003d08ff 	.word	0x003d08ff
 8003980:	431bde83 	.word	0x431bde83
 8003984:	10624dd3 	.word	0x10624dd3

08003988 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	461a      	mov	r2, r3
 8003994:	460b      	mov	r3, r1
 8003996:	817b      	strh	r3, [r7, #10]
 8003998:	4613      	mov	r3, r2
 800399a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff fb8c 	bl	80030b8 <HAL_GetTick>
 80039a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	f040 80e0 	bne.w	8003b70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2319      	movs	r3, #25
 80039b6:	2201      	movs	r2, #1
 80039b8:	4970      	ldr	r1, [pc, #448]	; (8003b7c <HAL_I2C_Master_Transmit+0x1f4>)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fc58 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
 80039c8:	e0d3      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_I2C_Master_Transmit+0x50>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e0cc      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d007      	beq.n	80039fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2221      	movs	r2, #33	; 0x21
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2210      	movs	r2, #16
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	893a      	ldrh	r2, [r7, #8]
 8003a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a50      	ldr	r2, [pc, #320]	; (8003b80 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a40:	8979      	ldrh	r1, [r7, #10]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fac2 	bl	8003fd0 <I2C_MasterRequestWrite>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e08d      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a6c:	e066      	b.n	8003b3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	6a39      	ldr	r1, [r7, #32]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fcd2 	bl	800441c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d107      	bne.n	8003a96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e06b      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d11b      	bne.n	8003b10 <HAL_I2C_Master_Transmit+0x188>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d017      	beq.n	8003b10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	6a39      	ldr	r1, [r7, #32]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fcc2 	bl	800449e <I2C_WaitOnBTFFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00d      	beq.n	8003b3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d107      	bne.n	8003b38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e01a      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d194      	bne.n	8003a6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e000      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
  }
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	00100002 	.word	0x00100002
 8003b80:	ffff0000 	.word	0xffff0000

08003b84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	460b      	mov	r3, r1
 8003b92:	817b      	strh	r3, [r7, #10]
 8003b94:	4613      	mov	r3, r2
 8003b96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b98:	f7ff fa8e 	bl	80030b8 <HAL_GetTick>
 8003b9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	f040 820b 	bne.w	8003fc2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	2319      	movs	r3, #25
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	497c      	ldr	r1, [pc, #496]	; (8003da8 <HAL_I2C_Master_Receive+0x224>)
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fb5a 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e1fe      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2C_Master_Receive+0x50>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e1f7      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d007      	beq.n	8003bfa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2222      	movs	r2, #34	; 0x22
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2210      	movs	r2, #16
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	893a      	ldrh	r2, [r7, #8]
 8003c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a5c      	ldr	r2, [pc, #368]	; (8003dac <HAL_I2C_Master_Receive+0x228>)
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c3c:	8979      	ldrh	r1, [r7, #10]
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fa46 	bl	80040d4 <I2C_MasterRequestRead>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e1b8      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d113      	bne.n	8003c82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	623b      	str	r3, [r7, #32]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	623b      	str	r3, [r7, #32]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e18c      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d11b      	bne.n	8003cc2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e16c      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d11b      	bne.n	8003d02 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	e14c      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d28:	e138      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	f200 80f1 	bhi.w	8003f16 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d123      	bne.n	8003d84 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fbed 	bl	8004520 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e139      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d82:	e10b      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d14e      	bne.n	8003e2a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	2200      	movs	r2, #0
 8003d94:	4906      	ldr	r1, [pc, #24]	; (8003db0 <HAL_I2C_Master_Receive+0x22c>)
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fa6a 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e10e      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
 8003da6:	bf00      	nop
 8003da8:	00100002 	.word	0x00100002
 8003dac:	ffff0000 	.word	0xffff0000
 8003db0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e28:	e0b8      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	2200      	movs	r2, #0
 8003e32:	4966      	ldr	r1, [pc, #408]	; (8003fcc <HAL_I2C_Master_Receive+0x448>)
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fa1b 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0bf      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	494f      	ldr	r1, [pc, #316]	; (8003fcc <HAL_I2C_Master_Receive+0x448>)
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f9ed 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e091      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f14:	e042      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fb00 	bl	8004520 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e04c      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d118      	bne.n	8003f9c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f47f aec2 	bne.w	8003d2a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
  }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3728      	adds	r7, #40	; 0x28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	00010004 	.word	0x00010004

08003fd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d006      	beq.n	8003ffa <I2C_MasterRequestWrite+0x2a>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d003      	beq.n	8003ffa <I2C_MasterRequestWrite+0x2a>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ff8:	d108      	bne.n	800400c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e00b      	b.n	8004024 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	2b12      	cmp	r3, #18
 8004012:	d107      	bne.n	8004024 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004022:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f91d 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404a:	d103      	bne.n	8004054 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004052:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e035      	b.n	80040c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004060:	d108      	bne.n	8004074 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004062:	897b      	ldrh	r3, [r7, #10]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004070:	611a      	str	r2, [r3, #16]
 8004072:	e01b      	b.n	80040ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004074:	897b      	ldrh	r3, [r7, #10]
 8004076:	11db      	asrs	r3, r3, #7
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f003 0306 	and.w	r3, r3, #6
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f063 030f 	orn	r3, r3, #15
 8004084:	b2da      	uxtb	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	490e      	ldr	r1, [pc, #56]	; (80040cc <I2C_MasterRequestWrite+0xfc>)
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f943 	bl	800431e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e010      	b.n	80040c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040a2:	897b      	ldrh	r3, [r7, #10]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4907      	ldr	r1, [pc, #28]	; (80040d0 <I2C_MasterRequestWrite+0x100>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f933 	bl	800431e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	00010008 	.word	0x00010008
 80040d0:	00010002 	.word	0x00010002

080040d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	460b      	mov	r3, r1
 80040e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d006      	beq.n	800410e <I2C_MasterRequestRead+0x3a>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d003      	beq.n	800410e <I2C_MasterRequestRead+0x3a>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800410c:	d108      	bne.n	8004120 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e00b      	b.n	8004138 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	2b11      	cmp	r3, #17
 8004126:	d107      	bne.n	8004138 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004136:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f893 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415e:	d103      	bne.n	8004168 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e079      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004174:	d108      	bne.n	8004188 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	611a      	str	r2, [r3, #16]
 8004186:	e05f      	b.n	8004248 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004188:	897b      	ldrh	r3, [r7, #10]
 800418a:	11db      	asrs	r3, r3, #7
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0306 	and.w	r3, r3, #6
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f063 030f 	orn	r3, r3, #15
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4930      	ldr	r1, [pc, #192]	; (8004268 <I2C_MasterRequestRead+0x194>)
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f8b9 	bl	800431e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e054      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4929      	ldr	r1, [pc, #164]	; (800426c <I2C_MasterRequestRead+0x198>)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f8a9 	bl	800431e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e044      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f831 	bl	8004270 <I2C_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004222:	d103      	bne.n	800422c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e017      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004230:	897b      	ldrh	r3, [r7, #10]
 8004232:	11db      	asrs	r3, r3, #7
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 0306 	and.w	r3, r3, #6
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f063 030e 	orn	r3, r3, #14
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	4907      	ldr	r1, [pc, #28]	; (800426c <I2C_MasterRequestRead+0x198>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f865 	bl	800431e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	00010008 	.word	0x00010008
 800426c:	00010002 	.word	0x00010002

08004270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004280:	e025      	b.n	80042ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d021      	beq.n	80042ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fe ff15 	bl	80030b8 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d116      	bne.n	80042ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f043 0220 	orr.w	r2, r3, #32
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e023      	b.n	8004316 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d10d      	bne.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	43da      	mvns	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4013      	ands	r3, r2
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	e00c      	b.n	800430e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	429a      	cmp	r2, r3
 8004312:	d0b6      	beq.n	8004282 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800432c:	e051      	b.n	80043d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	d123      	bne.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004356:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f043 0204 	orr.w	r2, r3, #4
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e046      	b.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d021      	beq.n	80043d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fe fe93 	bl	80030b8 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d116      	bne.n	80043d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e020      	b.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10c      	bne.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	43da      	mvns	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4013      	ands	r3, r2
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bf14      	ite	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	2300      	moveq	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	e00b      	b.n	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	43da      	mvns	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4013      	ands	r3, r2
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d18d      	bne.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004428:	e02d      	b.n	8004486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f8ce 	bl	80045cc <I2C_IsAcknowledgeFailed>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e02d      	b.n	8004496 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d021      	beq.n	8004486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fe fe39 	bl	80030b8 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d116      	bne.n	8004486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e007      	b.n	8004496 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d1ca      	bne.n	800442a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044aa:	e02d      	b.n	8004508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f88d 	bl	80045cc <I2C_IsAcknowledgeFailed>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e02d      	b.n	8004518 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d021      	beq.n	8004508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c4:	f7fe fdf8 	bl	80030b8 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d302      	bcc.n	80044da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d116      	bne.n	8004508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e007      	b.n	8004518 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b04      	cmp	r3, #4
 8004514:	d1ca      	bne.n	80044ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800452c:	e042      	b.n	80045b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b10      	cmp	r3, #16
 800453a:	d119      	bne.n	8004570 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0210 	mvn.w	r2, #16
 8004544:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e029      	b.n	80045c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004570:	f7fe fda2 	bl	80030b8 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	429a      	cmp	r2, r3
 800457e:	d302      	bcc.n	8004586 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d116      	bne.n	80045b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f043 0220 	orr.w	r2, r3, #32
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e007      	b.n	80045c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d1b5      	bne.n	800452e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e2:	d11b      	bne.n	800461c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	f043 0204 	orr.w	r2, r3, #4
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e25b      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d075      	beq.n	8004736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800464a:	4ba3      	ldr	r3, [pc, #652]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b04      	cmp	r3, #4
 8004654:	d00c      	beq.n	8004670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004656:	4ba0      	ldr	r3, [pc, #640]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800465e:	2b08      	cmp	r3, #8
 8004660:	d112      	bne.n	8004688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004662:	4b9d      	ldr	r3, [pc, #628]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800466e:	d10b      	bne.n	8004688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	4b99      	ldr	r3, [pc, #612]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05b      	beq.n	8004734 <HAL_RCC_OscConfig+0x108>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d157      	bne.n	8004734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e236      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x74>
 8004692:	4b91      	ldr	r3, [pc, #580]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a90      	ldr	r2, [pc, #576]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e01d      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x98>
 80046aa:	4b8b      	ldr	r3, [pc, #556]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a8a      	ldr	r2, [pc, #552]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b88      	ldr	r3, [pc, #544]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a87      	ldr	r2, [pc, #540]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046c4:	4b84      	ldr	r3, [pc, #528]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a83      	ldr	r2, [pc, #524]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b81      	ldr	r3, [pc, #516]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a80      	ldr	r2, [pc, #512]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fe fce8 	bl	80030b8 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ec:	f7fe fce4 	bl	80030b8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e1fb      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	4b76      	ldr	r3, [pc, #472]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0xc0>
 800470a:	e014      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fe fcd4 	bl	80030b8 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004714:	f7fe fcd0 	bl	80030b8 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	; 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e1e7      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	4b6c      	ldr	r3, [pc, #432]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0xe8>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d063      	beq.n	800480a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004742:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474e:	4b62      	ldr	r3, [pc, #392]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004756:	2b08      	cmp	r3, #8
 8004758:	d11c      	bne.n	8004794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800475a:	4b5f      	ldr	r3, [pc, #380]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d116      	bne.n	8004794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004766:	4b5c      	ldr	r3, [pc, #368]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_RCC_OscConfig+0x152>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d001      	beq.n	800477e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e1bb      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b56      	ldr	r3, [pc, #344]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4952      	ldr	r1, [pc, #328]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	e03a      	b.n	800480a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479c:	4b4f      	ldr	r3, [pc, #316]	; (80048dc <HAL_RCC_OscConfig+0x2b0>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7fe fc89 	bl	80030b8 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047aa:	f7fe fc85 	bl	80030b8 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e19c      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	4b46      	ldr	r3, [pc, #280]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b43      	ldr	r3, [pc, #268]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4940      	ldr	r1, [pc, #256]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	600b      	str	r3, [r1, #0]
 80047dc:	e015      	b.n	800480a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <HAL_RCC_OscConfig+0x2b0>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fe fc68 	bl	80030b8 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ec:	f7fe fc64 	bl	80030b8 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e17b      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	4b36      	ldr	r3, [pc, #216]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d030      	beq.n	8004878 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d016      	beq.n	800484c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800481e:	4b30      	ldr	r3, [pc, #192]	; (80048e0 <HAL_RCC_OscConfig+0x2b4>)
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fe fc48 	bl	80030b8 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800482c:	f7fe fc44 	bl	80030b8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e15b      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	4b26      	ldr	r3, [pc, #152]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x200>
 800484a:	e015      	b.n	8004878 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484c:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <HAL_RCC_OscConfig+0x2b4>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004852:	f7fe fc31 	bl	80030b8 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485a:	f7fe fc2d 	bl	80030b8 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e144      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800486e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f0      	bne.n	800485a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80a0 	beq.w	80049c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488a:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10f      	bne.n	80048b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	4a0e      	ldr	r2, [pc, #56]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80048a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a4:	6413      	str	r3, [r2, #64]	; 0x40
 80048a6:	4b0c      	ldr	r3, [pc, #48]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_RCC_OscConfig+0x2b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d121      	bne.n	8004906 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <HAL_RCC_OscConfig+0x2b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a07      	ldr	r2, [pc, #28]	; (80048e4 <HAL_RCC_OscConfig+0x2b8>)
 80048c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ce:	f7fe fbf3 	bl	80030b8 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	e011      	b.n	80048fa <HAL_RCC_OscConfig+0x2ce>
 80048d6:	bf00      	nop
 80048d8:	40023800 	.word	0x40023800
 80048dc:	42470000 	.word	0x42470000
 80048e0:	42470e80 	.word	0x42470e80
 80048e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e8:	f7fe fbe6 	bl	80030b8 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0fd      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fa:	4b81      	ldr	r3, [pc, #516]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d106      	bne.n	800491c <HAL_RCC_OscConfig+0x2f0>
 800490e:	4b7d      	ldr	r3, [pc, #500]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a7c      	ldr	r2, [pc, #496]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
 800491a:	e01c      	b.n	8004956 <HAL_RCC_OscConfig+0x32a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b05      	cmp	r3, #5
 8004922:	d10c      	bne.n	800493e <HAL_RCC_OscConfig+0x312>
 8004924:	4b77      	ldr	r3, [pc, #476]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	4a76      	ldr	r2, [pc, #472]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 800492a:	f043 0304 	orr.w	r3, r3, #4
 800492e:	6713      	str	r3, [r2, #112]	; 0x70
 8004930:	4b74      	ldr	r3, [pc, #464]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	4a73      	ldr	r2, [pc, #460]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	6713      	str	r3, [r2, #112]	; 0x70
 800493c:	e00b      	b.n	8004956 <HAL_RCC_OscConfig+0x32a>
 800493e:	4b71      	ldr	r3, [pc, #452]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	4a70      	ldr	r2, [pc, #448]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	6713      	str	r3, [r2, #112]	; 0x70
 800494a:	4b6e      	ldr	r3, [pc, #440]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	4a6d      	ldr	r2, [pc, #436]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004950:	f023 0304 	bic.w	r3, r3, #4
 8004954:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d015      	beq.n	800498a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495e:	f7fe fbab 	bl	80030b8 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004964:	e00a      	b.n	800497c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fe fba7 	bl	80030b8 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	f241 3288 	movw	r2, #5000	; 0x1388
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e0bc      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497c:	4b61      	ldr	r3, [pc, #388]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 800497e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0ee      	beq.n	8004966 <HAL_RCC_OscConfig+0x33a>
 8004988:	e014      	b.n	80049b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498a:	f7fe fb95 	bl	80030b8 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004992:	f7fe fb91 	bl	80030b8 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e0a6      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a8:	4b56      	ldr	r3, [pc, #344]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1ee      	bne.n	8004992 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d105      	bne.n	80049c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ba:	4b52      	ldr	r3, [pc, #328]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	4a51      	ldr	r2, [pc, #324]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 80049c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 8092 	beq.w	8004af4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049d0:	4b4c      	ldr	r3, [pc, #304]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d05c      	beq.n	8004a96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d141      	bne.n	8004a68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e4:	4b48      	ldr	r3, [pc, #288]	; (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ea:	f7fe fb65 	bl	80030b8 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f2:	f7fe fb61 	bl	80030b8 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e078      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a04:	4b3f      	ldr	r3, [pc, #252]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f0      	bne.n	80049f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	019b      	lsls	r3, r3, #6
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	041b      	lsls	r3, r3, #16
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	061b      	lsls	r3, r3, #24
 8004a34:	4933      	ldr	r1, [pc, #204]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a3a:	4b33      	ldr	r3, [pc, #204]	; (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fe fb3a 	bl	80030b8 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fe fb36 	bl	80030b8 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e04d      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5a:	4b2a      	ldr	r3, [pc, #168]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0x41c>
 8004a66:	e045      	b.n	8004af4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a68:	4b27      	ldr	r3, [pc, #156]	; (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6e:	f7fe fb23 	bl	80030b8 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a76:	f7fe fb1f 	bl	80030b8 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e036      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f0      	bne.n	8004a76 <HAL_RCC_OscConfig+0x44a>
 8004a94:	e02e      	b.n	8004af4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e029      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aa2:	4b18      	ldr	r3, [pc, #96]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d11c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d115      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aca:	4013      	ands	r3, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10d      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d106      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40007000 	.word	0x40007000
 8004b04:	40023800 	.word	0x40023800
 8004b08:	42470060 	.word	0x42470060

08004b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0cc      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b68      	ldr	r3, [pc, #416]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d90c      	bls.n	8004b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b65      	ldr	r3, [pc, #404]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b63      	ldr	r3, [pc, #396]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0b8      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d020      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b60:	4b59      	ldr	r3, [pc, #356]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a58      	ldr	r2, [pc, #352]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b78:	4b53      	ldr	r3, [pc, #332]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	4a52      	ldr	r2, [pc, #328]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b50      	ldr	r3, [pc, #320]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	494d      	ldr	r1, [pc, #308]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d044      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004baa:	4b47      	ldr	r3, [pc, #284]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d119      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e07f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bca:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e06f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bda:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e067      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bea:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f023 0203 	bic.w	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	4934      	ldr	r1, [pc, #208]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bfc:	f7fe fa5c 	bl	80030b8 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	e00a      	b.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c04:	f7fe fa58 	bl	80030b8 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e04f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1a:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 020c 	and.w	r2, r3, #12
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d1eb      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d20c      	bcs.n	8004c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b22      	ldr	r3, [pc, #136]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	4b20      	ldr	r3, [pc, #128]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e032      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c60:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4916      	ldr	r1, [pc, #88]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	490e      	ldr	r1, [pc, #56]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c92:	f000 f821 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8004c96:	4601      	mov	r1, r0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	091b      	lsrs	r3, r3, #4
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	4a0a      	ldr	r2, [pc, #40]	; (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004ca4:	5cd3      	ldrb	r3, [r2, r3]
 8004ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8004caa:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cae:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fe f9bc 	bl	8003030 <HAL_InitTick>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023c00 	.word	0x40023c00
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	08008bf8 	.word	0x08008bf8
 8004cd0:	20000024 	.word	0x20000024
 8004cd4:	20000028 	.word	0x20000028

08004cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cee:	4b50      	ldr	r3, [pc, #320]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d007      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0x32>
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d008      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x38>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f040 808d 	bne.w	8004e1e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d04:	4b4b      	ldr	r3, [pc, #300]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004d06:	60bb      	str	r3, [r7, #8]
       break;
 8004d08:	e08c      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d0a:	4b4b      	ldr	r3, [pc, #300]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d0c:	60bb      	str	r3, [r7, #8]
      break;
 8004d0e:	e089      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d10:	4b47      	ldr	r3, [pc, #284]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d1a:	4b45      	ldr	r3, [pc, #276]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d023      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d26:	4b42      	ldr	r3, [pc, #264]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	099b      	lsrs	r3, r3, #6
 8004d2c:	f04f 0400 	mov.w	r4, #0
 8004d30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	ea03 0501 	and.w	r5, r3, r1
 8004d3c:	ea04 0602 	and.w	r6, r4, r2
 8004d40:	4a3d      	ldr	r2, [pc, #244]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d42:	fb02 f106 	mul.w	r1, r2, r6
 8004d46:	2200      	movs	r2, #0
 8004d48:	fb02 f205 	mul.w	r2, r2, r5
 8004d4c:	440a      	add	r2, r1
 8004d4e:	493a      	ldr	r1, [pc, #232]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d50:	fba5 0101 	umull	r0, r1, r5, r1
 8004d54:	1853      	adds	r3, r2, r1
 8004d56:	4619      	mov	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f04f 0400 	mov.w	r4, #0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4623      	mov	r3, r4
 8004d62:	f7fb ff35 	bl	8000bd0 <__aeabi_uldivmod>
 8004d66:	4603      	mov	r3, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e049      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6e:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	099b      	lsrs	r3, r3, #6
 8004d74:	f04f 0400 	mov.w	r4, #0
 8004d78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	ea03 0501 	and.w	r5, r3, r1
 8004d84:	ea04 0602 	and.w	r6, r4, r2
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4632      	mov	r2, r6
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	f04f 0400 	mov.w	r4, #0
 8004d94:	0154      	lsls	r4, r2, #5
 8004d96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d9a:	014b      	lsls	r3, r1, #5
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4622      	mov	r2, r4
 8004da0:	1b49      	subs	r1, r1, r5
 8004da2:	eb62 0206 	sbc.w	r2, r2, r6
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	f04f 0400 	mov.w	r4, #0
 8004dae:	0194      	lsls	r4, r2, #6
 8004db0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004db4:	018b      	lsls	r3, r1, #6
 8004db6:	1a5b      	subs	r3, r3, r1
 8004db8:	eb64 0402 	sbc.w	r4, r4, r2
 8004dbc:	f04f 0100 	mov.w	r1, #0
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	00e2      	lsls	r2, r4, #3
 8004dc6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dca:	00d9      	lsls	r1, r3, #3
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4614      	mov	r4, r2
 8004dd0:	195b      	adds	r3, r3, r5
 8004dd2:	eb44 0406 	adc.w	r4, r4, r6
 8004dd6:	f04f 0100 	mov.w	r1, #0
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	02a2      	lsls	r2, r4, #10
 8004de0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004de4:	0299      	lsls	r1, r3, #10
 8004de6:	460b      	mov	r3, r1
 8004de8:	4614      	mov	r4, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	4621      	mov	r1, r4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f04f 0400 	mov.w	r4, #0
 8004df4:	461a      	mov	r2, r3
 8004df6:	4623      	mov	r3, r4
 8004df8:	f7fb feea 	bl	8000bd0 <__aeabi_uldivmod>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	0c1b      	lsrs	r3, r3, #16
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1a:	60bb      	str	r3, [r7, #8]
      break;
 8004e1c:	e002      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004e20:	60bb      	str	r3, [r7, #8]
      break;
 8004e22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e24:	68bb      	ldr	r3, [r7, #8]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
 8004e34:	00f42400 	.word	0x00f42400
 8004e38:	017d7840 	.word	0x017d7840

08004e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e40:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e42:	681b      	ldr	r3, [r3, #0]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000024 	.word	0x20000024

08004e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e58:	f7ff fff0 	bl	8004e3c <HAL_RCC_GetHCLKFreq>
 8004e5c:	4601      	mov	r1, r0
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	0a9b      	lsrs	r3, r3, #10
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	4a03      	ldr	r2, [pc, #12]	; (8004e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e6a:	5cd3      	ldrb	r3, [r2, r3]
 8004e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40023800 	.word	0x40023800
 8004e78:	08008c08 	.word	0x08008c08

08004e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e80:	f7ff ffdc 	bl	8004e3c <HAL_RCC_GetHCLKFreq>
 8004e84:	4601      	mov	r1, r0
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	0b5b      	lsrs	r3, r3, #13
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	4a03      	ldr	r2, [pc, #12]	; (8004ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e92:	5cd3      	ldrb	r3, [r2, r3]
 8004e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	08008c08 	.word	0x08008c08

08004ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e056      	b.n	8004f64 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fd fe07 	bl	8002ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	ea42 0103 	orr.w	r1, r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	0c1b      	lsrs	r3, r3, #16
 8004f34:	f003 0104 	and.w	r1, r3, #4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69da      	ldr	r2, [r3, #28]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08c      	sub	sp, #48	; 0x30
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_SPI_TransmitReceive+0x26>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e18a      	b.n	80052a8 <HAL_SPI_TransmitReceive+0x33c>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f9a:	f7fe f88d 	bl	80030b8 <HAL_GetTick>
 8004f9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fb0:	887b      	ldrh	r3, [r7, #2]
 8004fb2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d00f      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x70>
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc2:	d107      	bne.n	8004fd4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d103      	bne.n	8004fd4 <HAL_SPI_TransmitReceive+0x68>
 8004fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d003      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fda:	e15b      	b.n	8005294 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <HAL_SPI_TransmitReceive+0x82>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_SPI_TransmitReceive+0x82>
 8004fe8:	887b      	ldrh	r3, [r7, #2]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ff4:	e14e      	b.n	8005294 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d003      	beq.n	800500a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2205      	movs	r2, #5
 8005006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	887a      	ldrh	r2, [r7, #2]
 800501a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	887a      	ldrh	r2, [r7, #2]
 8005020:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	887a      	ldrh	r2, [r7, #2]
 800502c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	887a      	ldrh	r2, [r7, #2]
 8005032:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d007      	beq.n	800505e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800505c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005066:	d178      	bne.n	800515a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_SPI_TransmitReceive+0x10a>
 8005070:	8b7b      	ldrh	r3, [r7, #26]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d166      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	881a      	ldrh	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	1c9a      	adds	r2, r3, #2
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800509a:	e053      	b.n	8005144 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d11b      	bne.n	80050e2 <HAL_SPI_TransmitReceive+0x176>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d016      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x176>
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d113      	bne.n	80050e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	881a      	ldrh	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	1c9a      	adds	r2, r3, #2
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d119      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x1b8>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d014      	beq.n	8005124 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	b292      	uxth	r2, r2
 8005106:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	1c9a      	adds	r2, r3, #2
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005120:	2301      	movs	r3, #1
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005124:	f7fd ffc8 	bl	80030b8 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005130:	429a      	cmp	r2, r3
 8005132:	d807      	bhi.n	8005144 <HAL_SPI_TransmitReceive+0x1d8>
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513a:	d003      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005142:	e0a7      	b.n	8005294 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1a6      	bne.n	800509c <HAL_SPI_TransmitReceive+0x130>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1a1      	bne.n	800509c <HAL_SPI_TransmitReceive+0x130>
 8005158:	e07c      	b.n	8005254 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_SPI_TransmitReceive+0x1fc>
 8005162:	8b7b      	ldrh	r3, [r7, #26]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d16b      	bne.n	8005240 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	7812      	ldrb	r2, [r2, #0]
 8005174:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800518e:	e057      	b.n	8005240 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b02      	cmp	r3, #2
 800519c:	d11c      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x26c>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d017      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x26c>
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d114      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	7812      	ldrb	r2, [r2, #0]
 80051ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d119      	bne.n	800521a <HAL_SPI_TransmitReceive+0x2ae>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d014      	beq.n	800521a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005216:	2301      	movs	r3, #1
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800521a:	f7fd ff4d 	bl	80030b8 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005226:	429a      	cmp	r2, r3
 8005228:	d803      	bhi.n	8005232 <HAL_SPI_TransmitReceive+0x2c6>
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d102      	bne.n	8005238 <HAL_SPI_TransmitReceive+0x2cc>
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	2b00      	cmp	r3, #0
 8005236:	d103      	bne.n	8005240 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800523e:	e029      	b.n	8005294 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1a2      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x224>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d19d      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005256:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f893 	bl	8005384 <SPI_EndRxTxTransaction>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d006      	beq.n	8005272 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005270:	e010      	b.n	8005294 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	e000      	b.n	8005294 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005292:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3730      	adds	r7, #48	; 0x30
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052c0:	e04c      	b.n	800535c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d048      	beq.n	800535c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80052ca:	f7fd fef5 	bl	80030b8 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d902      	bls.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d13d      	bne.n	800535c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052f8:	d111      	bne.n	800531e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005302:	d004      	beq.n	800530e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530c:	d107      	bne.n	800531e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005326:	d10f      	bne.n	8005348 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005346:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e00f      	b.n	800537c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4013      	ands	r3, r2
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	429a      	cmp	r2, r3
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	429a      	cmp	r2, r3
 8005378:	d1a3      	bne.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005390:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <SPI_EndRxTxTransaction+0x7c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1b      	ldr	r2, [pc, #108]	; (8005404 <SPI_EndRxTxTransaction+0x80>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	0d5b      	lsrs	r3, r3, #21
 800539c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053a0:	fb02 f303 	mul.w	r3, r2, r3
 80053a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ae:	d112      	bne.n	80053d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2200      	movs	r2, #0
 80053b8:	2180      	movs	r1, #128	; 0x80
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff ff78 	bl	80052b0 <SPI_WaitFlagStateUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d016      	beq.n	80053f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e00f      	b.n	80053f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3b01      	subs	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ec:	2b80      	cmp	r3, #128	; 0x80
 80053ee:	d0f2      	beq.n	80053d6 <SPI_EndRxTxTransaction+0x52>
 80053f0:	e000      	b.n	80053f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80053f2:	bf00      	nop
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000024 	.word	0x20000024
 8005404:	165e9f81 	.word	0x165e9f81

08005408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e01d      	b.n	8005456 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fd fba0 	bl	8002b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3304      	adds	r3, #4
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f000 fd1a 	bl	8005e80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0201 	orr.w	r2, r2, #1
 8005474:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b06      	cmp	r3, #6
 8005486:	d007      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e01d      	b.n	80054f4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f815 	bl	80054fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f000 fccb 	bl	8005e80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2201      	movs	r2, #1
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f001 f8c0 	bl	80066a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a15      	ldr	r2, [pc, #84]	; (8005584 <HAL_TIM_PWM_Start+0x74>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_TIM_PWM_Start+0x2c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a14      	ldr	r2, [pc, #80]	; (8005588 <HAL_TIM_PWM_Start+0x78>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d101      	bne.n	8005540 <HAL_TIM_PWM_Start+0x30>
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <HAL_TIM_PWM_Start+0x32>
 8005540:	2300      	movs	r3, #0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b06      	cmp	r3, #6
 8005566:	d007      	beq.n	8005578 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40010400 	.word	0x40010400

0800558c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 f882 	bl	80066a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a22      	ldr	r2, [pc, #136]	; (8005634 <HAL_TIM_PWM_Stop+0xa8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_TIM_PWM_Stop+0x2c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a21      	ldr	r2, [pc, #132]	; (8005638 <HAL_TIM_PWM_Stop+0xac>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d101      	bne.n	80055bc <HAL_TIM_PWM_Stop+0x30>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <HAL_TIM_PWM_Stop+0x32>
 80055bc:	2300      	movs	r3, #0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d017      	beq.n	80055f2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6a1a      	ldr	r2, [r3, #32]
 80055c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10f      	bne.n	80055f2 <HAL_TIM_PWM_Stop+0x66>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a1a      	ldr	r2, [r3, #32]
 80055d8:	f240 4344 	movw	r3, #1092	; 0x444
 80055dc:	4013      	ands	r3, r2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d107      	bne.n	80055f2 <HAL_TIM_PWM_Stop+0x66>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6a1a      	ldr	r2, [r3, #32]
 80055f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10f      	bne.n	8005622 <HAL_TIM_PWM_Stop+0x96>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6a1a      	ldr	r2, [r3, #32]
 8005608:	f240 4344 	movw	r3, #1092	; 0x444
 800560c:	4013      	ands	r3, r2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d107      	bne.n	8005622 <HAL_TIM_PWM_Stop+0x96>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40010000 	.word	0x40010000
 8005638:	40010400 	.word	0x40010400

0800563c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e01d      	b.n	800568a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f815 	bl	8005692 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f000 fc00 	bl	8005e80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b0c      	cmp	r3, #12
 80056b6:	d841      	bhi.n	800573c <HAL_TIM_IC_Start_IT+0x94>
 80056b8:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <HAL_TIM_IC_Start_IT+0x18>)
 80056ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056be:	bf00      	nop
 80056c0:	080056f5 	.word	0x080056f5
 80056c4:	0800573d 	.word	0x0800573d
 80056c8:	0800573d 	.word	0x0800573d
 80056cc:	0800573d 	.word	0x0800573d
 80056d0:	08005707 	.word	0x08005707
 80056d4:	0800573d 	.word	0x0800573d
 80056d8:	0800573d 	.word	0x0800573d
 80056dc:	0800573d 	.word	0x0800573d
 80056e0:	08005719 	.word	0x08005719
 80056e4:	0800573d 	.word	0x0800573d
 80056e8:	0800573d 	.word	0x0800573d
 80056ec:	0800573d 	.word	0x0800573d
 80056f0:	0800572b 	.word	0x0800572b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0202 	orr.w	r2, r2, #2
 8005702:	60da      	str	r2, [r3, #12]
      break;
 8005704:	e01b      	b.n	800573e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0204 	orr.w	r2, r2, #4
 8005714:	60da      	str	r2, [r3, #12]
      break;
 8005716:	e012      	b.n	800573e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0208 	orr.w	r2, r2, #8
 8005726:	60da      	str	r2, [r3, #12]
      break;
 8005728:	e009      	b.n	800573e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0210 	orr.w	r2, r2, #16
 8005738:	60da      	str	r2, [r3, #12]
      break;
 800573a:	e000      	b.n	800573e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800573c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2201      	movs	r2, #1
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 ffae 	bl	80066a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b06      	cmp	r3, #6
 800575c:	d007      	beq.n	800576e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0201 	orr.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b02      	cmp	r3, #2
 800578c:	d122      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b02      	cmp	r3, #2
 800579a:	d11b      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0202 	mvn.w	r2, #2
 80057a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fd f910 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 80057c0:	e005      	b.n	80057ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fb3e 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fb45 	bl	8005e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d122      	bne.n	8005828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d11b      	bne.n	8005828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0204 	mvn.w	r2, #4
 80057f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fd f8e6 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 8005814:	e005      	b.n	8005822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fb14 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fb1b 	bl	8005e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b08      	cmp	r3, #8
 8005834:	d122      	bne.n	800587c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b08      	cmp	r3, #8
 8005842:	d11b      	bne.n	800587c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0208 	mvn.w	r2, #8
 800584c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2204      	movs	r2, #4
 8005852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fd f8bc 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 8005868:	e005      	b.n	8005876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 faea 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 faf1 	bl	8005e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b10      	cmp	r3, #16
 8005888:	d122      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b10      	cmp	r3, #16
 8005896:	d11b      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0210 	mvn.w	r2, #16
 80058a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2208      	movs	r2, #8
 80058a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fd f892 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 80058bc:	e005      	b.n	80058ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fac0 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fac7 	bl	8005e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d10e      	bne.n	80058fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d107      	bne.n	80058fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0201 	mvn.w	r2, #1
 80058f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fd f85a 	bl	80029b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005906:	2b80      	cmp	r3, #128	; 0x80
 8005908:	d10e      	bne.n	8005928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005914:	2b80      	cmp	r3, #128	; 0x80
 8005916:	d107      	bne.n	8005928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 ff6c 	bl	8006800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b40      	cmp	r3, #64	; 0x40
 8005934:	d10e      	bne.n	8005954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d107      	bne.n	8005954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800594c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fa8c 	bl	8005e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b20      	cmp	r3, #32
 8005960:	d10e      	bne.n	8005980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b20      	cmp	r3, #32
 800596e:	d107      	bne.n	8005980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0220 	mvn.w	r2, #32
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 ff36 	bl	80067ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_TIM_IC_ConfigChannel+0x1a>
 800599e:	2302      	movs	r3, #2
 80059a0:	e08a      	b.n	8005ab8 <HAL_TIM_IC_ConfigChannel+0x130>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2202      	movs	r2, #2
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11b      	bne.n	80059f0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6819      	ldr	r1, [r3, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f000 fcaa 	bl	8006320 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 020c 	bic.w	r2, r2, #12
 80059da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6999      	ldr	r1, [r3, #24]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	619a      	str	r2, [r3, #24]
 80059ee:	e05a      	b.n	8005aa6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d11c      	bne.n	8005a30 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	6819      	ldr	r1, [r3, #0]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f000 fd2e 	bl	8006466 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6999      	ldr	r1, [r3, #24]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	021a      	lsls	r2, r3, #8
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	619a      	str	r2, [r3, #24]
 8005a2e:	e03a      	b.n	8005aa6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d11b      	bne.n	8005a6e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6819      	ldr	r1, [r3, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f000 fd7b 	bl	8006540 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 020c 	bic.w	r2, r2, #12
 8005a58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69d9      	ldr	r1, [r3, #28]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	61da      	str	r2, [r3, #28]
 8005a6c:	e01b      	b.n	8005aa6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6819      	ldr	r1, [r3, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f000 fd9b 	bl	80065b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a90:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69d9      	ldr	r1, [r3, #28]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	021a      	lsls	r2, r3, #8
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e0b4      	b.n	8005c44 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	f200 809f 	bhi.w	8005c30 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b2d 	.word	0x08005b2d
 8005afc:	08005c31 	.word	0x08005c31
 8005b00:	08005c31 	.word	0x08005c31
 8005b04:	08005c31 	.word	0x08005c31
 8005b08:	08005b6d 	.word	0x08005b6d
 8005b0c:	08005c31 	.word	0x08005c31
 8005b10:	08005c31 	.word	0x08005c31
 8005b14:	08005c31 	.word	0x08005c31
 8005b18:	08005baf 	.word	0x08005baf
 8005b1c:	08005c31 	.word	0x08005c31
 8005b20:	08005c31 	.word	0x08005c31
 8005b24:	08005c31 	.word	0x08005c31
 8005b28:	08005bef 	.word	0x08005bef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fa44 	bl	8005fc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0208 	orr.w	r2, r2, #8
 8005b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0204 	bic.w	r2, r2, #4
 8005b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6999      	ldr	r1, [r3, #24]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	619a      	str	r2, [r3, #24]
      break;
 8005b6a:	e062      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fa94 	bl	80060a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6999      	ldr	r1, [r3, #24]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	021a      	lsls	r2, r3, #8
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	619a      	str	r2, [r3, #24]
      break;
 8005bac:	e041      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fae9 	bl	800618c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0208 	orr.w	r2, r2, #8
 8005bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0204 	bic.w	r2, r2, #4
 8005bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69d9      	ldr	r1, [r3, #28]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	61da      	str	r2, [r3, #28]
      break;
 8005bec:	e021      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fb3d 	bl	8006274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69d9      	ldr	r1, [r3, #28]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	021a      	lsls	r2, r3, #8
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	61da      	str	r2, [r3, #28]
      break;
 8005c2e:	e000      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005c30:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIM_ConfigClockSource+0x18>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e0a6      	b.n	8005db2 <HAL_TIM_ConfigClockSource+0x166>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	d067      	beq.n	8005d6c <HAL_TIM_ConfigClockSource+0x120>
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d80b      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x6c>
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d073      	beq.n	8005d8c <HAL_TIM_ConfigClockSource+0x140>
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d802      	bhi.n	8005cae <HAL_TIM_ConfigClockSource+0x62>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d06f      	beq.n	8005d8c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005cac:	e078      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d06c      	beq.n	8005d8c <HAL_TIM_ConfigClockSource+0x140>
 8005cb2:	2b30      	cmp	r3, #48	; 0x30
 8005cb4:	d06a      	beq.n	8005d8c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005cb6:	e073      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005cb8:	2b70      	cmp	r3, #112	; 0x70
 8005cba:	d00d      	beq.n	8005cd8 <HAL_TIM_ConfigClockSource+0x8c>
 8005cbc:	2b70      	cmp	r3, #112	; 0x70
 8005cbe:	d804      	bhi.n	8005cca <HAL_TIM_ConfigClockSource+0x7e>
 8005cc0:	2b50      	cmp	r3, #80	; 0x50
 8005cc2:	d033      	beq.n	8005d2c <HAL_TIM_ConfigClockSource+0xe0>
 8005cc4:	2b60      	cmp	r3, #96	; 0x60
 8005cc6:	d041      	beq.n	8005d4c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005cc8:	e06a      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cce:	d066      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x152>
 8005cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd4:	d017      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005cd6:	e063      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	6899      	ldr	r1, [r3, #8]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f000 fcbe 	bl	8006668 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cfa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	609a      	str	r2, [r3, #8]
      break;
 8005d04:	e04c      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6899      	ldr	r1, [r3, #8]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f000 fca7 	bl	8006668 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d28:	609a      	str	r2, [r3, #8]
      break;
 8005d2a:	e039      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	6859      	ldr	r1, [r3, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f000 fb65 	bl	8006408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2150      	movs	r1, #80	; 0x50
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fc74 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005d4a:	e029      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	6859      	ldr	r1, [r3, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f000 fbc1 	bl	80064e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2160      	movs	r1, #96	; 0x60
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fc64 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005d6a:	e019      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	6859      	ldr	r1, [r3, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f000 fb45 	bl	8006408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2140      	movs	r1, #64	; 0x40
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fc54 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005d8a:	e009      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f000 fc4b 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e000      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005d9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	d831      	bhi.n	8005e34 <HAL_TIM_ReadCapturedValue+0x78>
 8005dd0:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e35 	.word	0x08005e35
 8005de4:	08005e35 	.word	0x08005e35
 8005de8:	08005e17 	.word	0x08005e17
 8005dec:	08005e35 	.word	0x08005e35
 8005df0:	08005e35 	.word	0x08005e35
 8005df4:	08005e35 	.word	0x08005e35
 8005df8:	08005e21 	.word	0x08005e21
 8005dfc:	08005e35 	.word	0x08005e35
 8005e00:	08005e35 	.word	0x08005e35
 8005e04:	08005e35 	.word	0x08005e35
 8005e08:	08005e2b 	.word	0x08005e2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e12:	60fb      	str	r3, [r7, #12]

      break;
 8005e14:	e00f      	b.n	8005e36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	60fb      	str	r3, [r7, #12]

      break;
 8005e1e:	e00a      	b.n	8005e36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	60fb      	str	r3, [r7, #12]

      break;
 8005e28:	e005      	b.n	8005e36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	60fb      	str	r3, [r7, #12]

      break;
 8005e32:	e000      	b.n	8005e36 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005e34:	bf00      	nop
  }

  return tmpreg;
 8005e36:	68fb      	ldr	r3, [r7, #12]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a40      	ldr	r2, [pc, #256]	; (8005f94 <TIM_Base_SetConfig+0x114>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d013      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d00f      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a3d      	ldr	r2, [pc, #244]	; (8005f98 <TIM_Base_SetConfig+0x118>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a3c      	ldr	r2, [pc, #240]	; (8005f9c <TIM_Base_SetConfig+0x11c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3b      	ldr	r2, [pc, #236]	; (8005fa0 <TIM_Base_SetConfig+0x120>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a3a      	ldr	r2, [pc, #232]	; (8005fa4 <TIM_Base_SetConfig+0x124>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d108      	bne.n	8005ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a2f      	ldr	r2, [pc, #188]	; (8005f94 <TIM_Base_SetConfig+0x114>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d02b      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee0:	d027      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2c      	ldr	r2, [pc, #176]	; (8005f98 <TIM_Base_SetConfig+0x118>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d023      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2b      	ldr	r2, [pc, #172]	; (8005f9c <TIM_Base_SetConfig+0x11c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01f      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2a      	ldr	r2, [pc, #168]	; (8005fa0 <TIM_Base_SetConfig+0x120>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01b      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a29      	ldr	r2, [pc, #164]	; (8005fa4 <TIM_Base_SetConfig+0x124>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d017      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a28      	ldr	r2, [pc, #160]	; (8005fa8 <TIM_Base_SetConfig+0x128>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a27      	ldr	r2, [pc, #156]	; (8005fac <TIM_Base_SetConfig+0x12c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00f      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a26      	ldr	r2, [pc, #152]	; (8005fb0 <TIM_Base_SetConfig+0x130>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00b      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a25      	ldr	r2, [pc, #148]	; (8005fb4 <TIM_Base_SetConfig+0x134>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a24      	ldr	r2, [pc, #144]	; (8005fb8 <TIM_Base_SetConfig+0x138>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_Base_SetConfig+0xb2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a23      	ldr	r2, [pc, #140]	; (8005fbc <TIM_Base_SetConfig+0x13c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d108      	bne.n	8005f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a0a      	ldr	r2, [pc, #40]	; (8005f94 <TIM_Base_SetConfig+0x114>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_Base_SetConfig+0xf8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a0c      	ldr	r2, [pc, #48]	; (8005fa4 <TIM_Base_SetConfig+0x124>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d103      	bne.n	8005f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	615a      	str	r2, [r3, #20]
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40010400 	.word	0x40010400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800
 8005fb4:	40001800 	.word	0x40001800
 8005fb8:	40001c00 	.word	0x40001c00
 8005fbc:	40002000 	.word	0x40002000

08005fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0201 	bic.w	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f023 0302 	bic.w	r3, r3, #2
 8006008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a20      	ldr	r2, [pc, #128]	; (8006098 <TIM_OC1_SetConfig+0xd8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_OC1_SetConfig+0x64>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a1f      	ldr	r2, [pc, #124]	; (800609c <TIM_OC1_SetConfig+0xdc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d10c      	bne.n	800603e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0308 	bic.w	r3, r3, #8
 800602a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f023 0304 	bic.w	r3, r3, #4
 800603c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a15      	ldr	r2, [pc, #84]	; (8006098 <TIM_OC1_SetConfig+0xd8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_OC1_SetConfig+0x8e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a14      	ldr	r2, [pc, #80]	; (800609c <TIM_OC1_SetConfig+0xdc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d111      	bne.n	8006072 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800605c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	621a      	str	r2, [r3, #32]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	40010000 	.word	0x40010000
 800609c:	40010400 	.word	0x40010400

080060a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f023 0210 	bic.w	r2, r3, #16
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f023 0320 	bic.w	r3, r3, #32
 80060ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a22      	ldr	r2, [pc, #136]	; (8006184 <TIM_OC2_SetConfig+0xe4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_OC2_SetConfig+0x68>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a21      	ldr	r2, [pc, #132]	; (8006188 <TIM_OC2_SetConfig+0xe8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d10d      	bne.n	8006124 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006122:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a17      	ldr	r2, [pc, #92]	; (8006184 <TIM_OC2_SetConfig+0xe4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_OC2_SetConfig+0x94>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a16      	ldr	r2, [pc, #88]	; (8006188 <TIM_OC2_SetConfig+0xe8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d113      	bne.n	800615c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800613a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006142:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40010000 	.word	0x40010000
 8006188:	40010400 	.word	0x40010400

0800618c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a21      	ldr	r2, [pc, #132]	; (800626c <TIM_OC3_SetConfig+0xe0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_OC3_SetConfig+0x66>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a20      	ldr	r2, [pc, #128]	; (8006270 <TIM_OC3_SetConfig+0xe4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10d      	bne.n	800620e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800620c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a16      	ldr	r2, [pc, #88]	; (800626c <TIM_OC3_SetConfig+0xe0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_OC3_SetConfig+0x92>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a15      	ldr	r2, [pc, #84]	; (8006270 <TIM_OC3_SetConfig+0xe4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d113      	bne.n	8006246 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800622c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	621a      	str	r2, [r3, #32]
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40010000 	.word	0x40010000
 8006270:	40010400 	.word	0x40010400

08006274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	031b      	lsls	r3, r3, #12
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a12      	ldr	r2, [pc, #72]	; (8006318 <TIM_OC4_SetConfig+0xa4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_OC4_SetConfig+0x68>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a11      	ldr	r2, [pc, #68]	; (800631c <TIM_OC4_SetConfig+0xa8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d109      	bne.n	80062f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	019b      	lsls	r3, r3, #6
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40010000 	.word	0x40010000
 800631c:	40010400 	.word	0x40010400

08006320 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f023 0201 	bic.w	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a28      	ldr	r2, [pc, #160]	; (80063ec <TIM_TI1_SetConfig+0xcc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01b      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006354:	d017      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a25      	ldr	r2, [pc, #148]	; (80063f0 <TIM_TI1_SetConfig+0xd0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a24      	ldr	r2, [pc, #144]	; (80063f4 <TIM_TI1_SetConfig+0xd4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00f      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a23      	ldr	r2, [pc, #140]	; (80063f8 <TIM_TI1_SetConfig+0xd8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00b      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4a22      	ldr	r2, [pc, #136]	; (80063fc <TIM_TI1_SetConfig+0xdc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a21      	ldr	r2, [pc, #132]	; (8006400 <TIM_TI1_SetConfig+0xe0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4a20      	ldr	r2, [pc, #128]	; (8006404 <TIM_TI1_SetConfig+0xe4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d101      	bne.n	800638a <TIM_TI1_SetConfig+0x6a>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <TIM_TI1_SetConfig+0x6c>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e003      	b.n	80063aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f023 030a 	bic.w	r3, r3, #10
 80063c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f003 030a 	and.w	r3, r3, #10
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40010400 	.word	0x40010400
 8006400:	40014000 	.word	0x40014000
 8006404:	40001800 	.word	0x40001800

08006408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f023 0201 	bic.w	r2, r3, #1
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f023 030a 	bic.w	r3, r3, #10
 8006444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006466:	b480      	push	{r7}
 8006468:	b087      	sub	sp, #28
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f023 0210 	bic.w	r2, r3, #16
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006492:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	031b      	lsls	r3, r3, #12
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	621a      	str	r2, [r3, #32]
}
 80064d4:	bf00      	nop
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f023 0210 	bic.w	r2, r3, #16
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800650a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	031b      	lsls	r3, r3, #12
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800651c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	621a      	str	r2, [r3, #32]
}
 8006534:	bf00      	nop
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f023 0303 	bic.w	r3, r3, #3
 800656c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4313      	orrs	r3, r2
 8006574:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800657c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	b2db      	uxtb	r3, r3
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006590:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	621a      	str	r2, [r3, #32]
}
 80065ac:	bf00      	nop
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	031b      	lsls	r3, r3, #12
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800660a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	031b      	lsls	r3, r3, #12
 8006610:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	f043 0307 	orr.w	r3, r3, #7
 8006654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	609a      	str	r2, [r3, #8]
}
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	021a      	lsls	r2, r3, #8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	431a      	orrs	r2, r3
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4313      	orrs	r3, r2
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	609a      	str	r2, [r3, #8]
}
 800669c:	bf00      	nop
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2201      	movs	r2, #1
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a1a      	ldr	r2, [r3, #32]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	43db      	mvns	r3, r3
 80066ca:	401a      	ands	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a1a      	ldr	r2, [r3, #32]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	fa01 f303 	lsl.w	r3, r1, r3
 80066e0:	431a      	orrs	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
	...

080066f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006708:	2302      	movs	r3, #2
 800670a:	e05a      	b.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a21      	ldr	r2, [pc, #132]	; (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d022      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006758:	d01d      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a1d      	ldr	r2, [pc, #116]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d018      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1b      	ldr	r2, [pc, #108]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1a      	ldr	r2, [pc, #104]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a18      	ldr	r2, [pc, #96]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a17      	ldr	r2, [pc, #92]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d10c      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800679c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40000400 	.word	0x40000400
 80067d8:	40000800 	.word	0x40000800
 80067dc:	40000c00 	.word	0x40000c00
 80067e0:	40010400 	.word	0x40010400
 80067e4:	40014000 	.word	0x40014000
 80067e8:	40001800 	.word	0x40001800

080067ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e03f      	b.n	80068a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fc fad8 	bl	8002df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2224      	movs	r2, #36	; 0x24
 8006844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fb59 	bl	8006f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800686c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800687c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800688c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b088      	sub	sp, #32
 80068b2:	af02      	add	r7, sp, #8
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	603b      	str	r3, [r7, #0]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	f040 8090 	bne.w	80069f0 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_UART_Receive+0x2e>
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e088      	b.n	80069f2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Receive+0x40>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e081      	b.n	80069f2 <HAL_UART_Receive+0x144>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2222      	movs	r2, #34	; 0x22
 8006900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006904:	f7fc fbd8 	bl	80030b8 <HAL_GetTick>
 8006908:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	88fa      	ldrh	r2, [r7, #6]
 800690e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	88fa      	ldrh	r2, [r7, #6]
 8006914:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800691e:	e05c      	b.n	80069da <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006936:	d12b      	bne.n	8006990 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2200      	movs	r2, #0
 8006940:	2120      	movs	r1, #32
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f978 	bl	8006c38 <UART_WaitOnFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e04f      	b.n	80069f2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10c      	bne.n	8006978 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696a:	b29a      	uxth	r2, r3
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	3302      	adds	r3, #2
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	e030      	b.n	80069da <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	b29b      	uxth	r3, r3
 8006980:	b2db      	uxtb	r3, r3
 8006982:	b29a      	uxth	r2, r3
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	3301      	adds	r3, #1
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	e024      	b.n	80069da <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2200      	movs	r2, #0
 8006998:	2120      	movs	r1, #32
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f94c 	bl	8006c38 <UART_WaitOnFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e023      	b.n	80069f2 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d108      	bne.n	80069c4 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6859      	ldr	r1, [r3, #4]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	60ba      	str	r2, [r7, #8]
 80069be:	b2ca      	uxtb	r2, r1
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e00a      	b.n	80069da <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	1c59      	adds	r1, r3, #1
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d19d      	bne.n	8006920 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e000      	b.n	80069f2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80069f0:	2302      	movs	r3, #2
  }
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10d      	bne.n	8006a4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d008      	beq.n	8006a4e <HAL_UART_IRQHandler+0x52>
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f9e0 	bl	8006e0c <UART_Receive_IT>
      return;
 8006a4c:	e0d1      	b.n	8006bf2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80b0 	beq.w	8006bb6 <HAL_UART_IRQHandler+0x1ba>
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d105      	bne.n	8006a6c <HAL_UART_IRQHandler+0x70>
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80a5 	beq.w	8006bb6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <HAL_UART_IRQHandler+0x90>
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a84:	f043 0201 	orr.w	r2, r3, #1
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <HAL_UART_IRQHandler+0xb0>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa4:	f043 0202 	orr.w	r2, r3, #2
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <HAL_UART_IRQHandler+0xd0>
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac4:	f043 0204 	orr.w	r2, r3, #4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00f      	beq.n	8006af6 <HAL_UART_IRQHandler+0xfa>
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <HAL_UART_IRQHandler+0xee>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	f043 0208 	orr.w	r2, r3, #8
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d078      	beq.n	8006bf0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d007      	beq.n	8006b18 <HAL_UART_IRQHandler+0x11c>
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f97a 	bl	8006e0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b22:	2b40      	cmp	r3, #64	; 0x40
 8006b24:	bf0c      	ite	eq
 8006b26:	2301      	moveq	r3, #1
 8006b28:	2300      	movne	r3, #0
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <HAL_UART_IRQHandler+0x144>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d031      	beq.n	8006ba4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f8c3 	bl	8006ccc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b50:	2b40      	cmp	r3, #64	; 0x40
 8006b52:	d123      	bne.n	8006b9c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695a      	ldr	r2, [r3, #20]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b62:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d013      	beq.n	8006b94 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b70:	4a21      	ldr	r2, [pc, #132]	; (8006bf8 <HAL_UART_IRQHandler+0x1fc>)
 8006b72:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fc fbdc 	bl	8003336 <HAL_DMA_Abort_IT>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d016      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b8e:	4610      	mov	r0, r2
 8006b90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b92:	e00e      	b.n	8006bb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f845 	bl	8006c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b9a:	e00a      	b.n	8006bb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f841 	bl	8006c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba2:	e006      	b.n	8006bb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f83d 	bl	8006c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006bb0:	e01e      	b.n	8006bf0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb2:	bf00      	nop
    return;
 8006bb4:	e01c      	b.n	8006bf0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x1d6>
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f8b0 	bl	8006d30 <UART_Transmit_IT>
    return;
 8006bd0:	e00f      	b.n	8006bf2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00a      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x1f6>
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f8f8 	bl	8006ddc <UART_EndTransmit_IT>
    return;
 8006bec:	bf00      	nop
 8006bee:	e000      	b.n	8006bf2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006bf0:	bf00      	nop
  }
}
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	08006d09 	.word	0x08006d09

08006bfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	4613      	mov	r3, r2
 8006c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c48:	e02c      	b.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d028      	beq.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d007      	beq.n	8006c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c58:	f7fc fa2e 	bl	80030b8 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d21d      	bcs.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c76:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695a      	ldr	r2, [r3, #20]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e00f      	b.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	4013      	ands	r3, r2
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	bf0c      	ite	eq
 8006cb4:	2301      	moveq	r3, #1
 8006cb6:	2300      	movne	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d0c3      	beq.n	8006c4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ce2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695a      	ldr	r2, [r3, #20]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0201 	bic.w	r2, r2, #1
 8006cf2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7ff ff7e 	bl	8006c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b21      	cmp	r3, #33	; 0x21
 8006d42:	d144      	bne.n	8006dce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4c:	d11a      	bne.n	8006d84 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d62:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d105      	bne.n	8006d78 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	1c9a      	adds	r2, r3, #2
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]
 8006d76:	e00e      	b.n	8006d96 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	621a      	str	r2, [r3, #32]
 8006d82:	e008      	b.n	8006d96 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	1c59      	adds	r1, r3, #1
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6211      	str	r1, [r2, #32]
 8006d8e:	781a      	ldrb	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	4619      	mov	r1, r3
 8006da4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10f      	bne.n	8006dca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006db8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e000      	b.n	8006dd0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006dce:	2302      	movs	r3, #2
  }
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff fefd 	bl	8006bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b22      	cmp	r3, #34	; 0x22
 8006e1e:	d171      	bne.n	8006f04 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e28:	d123      	bne.n	8006e72 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10e      	bne.n	8006e56 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	1c9a      	adds	r2, r3, #2
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	629a      	str	r2, [r3, #40]	; 0x28
 8006e54:	e029      	b.n	8006eaa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e70:	e01b      	b.n	8006eaa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6858      	ldr	r0, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	1c59      	adds	r1, r3, #1
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6291      	str	r1, [r2, #40]	; 0x28
 8006e8a:	b2c2      	uxtb	r2, r0
 8006e8c:	701a      	strb	r2, [r3, #0]
 8006e8e:	e00c      	b.n	8006eaa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9c:	1c58      	adds	r0, r3, #1
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	6288      	str	r0, [r1, #40]	; 0x28
 8006ea2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d120      	bne.n	8006f00 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0220 	bic.w	r2, r2, #32
 8006ecc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006edc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695a      	ldr	r2, [r3, #20]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0201 	bic.w	r2, r2, #1
 8006eec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fe8a 	bl	8006c10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	e002      	b.n	8006f06 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	e000      	b.n	8006f06 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006f04:	2302      	movs	r3, #2
  }
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006f52:	f023 030c 	bic.w	r3, r3, #12
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6812      	ldr	r2, [r2, #0]
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7e:	f040 818b 	bne.w	8007298 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4ac1      	ldr	r2, [pc, #772]	; (800728c <UART_SetConfig+0x37c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d005      	beq.n	8006f98 <UART_SetConfig+0x88>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4abf      	ldr	r2, [pc, #764]	; (8007290 <UART_SetConfig+0x380>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	f040 80bd 	bne.w	8007112 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f98:	f7fd ff70 	bl	8004e7c <HAL_RCC_GetPCLK2Freq>
 8006f9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	461d      	mov	r5, r3
 8006fa2:	f04f 0600 	mov.w	r6, #0
 8006fa6:	46a8      	mov	r8, r5
 8006fa8:	46b1      	mov	r9, r6
 8006faa:	eb18 0308 	adds.w	r3, r8, r8
 8006fae:	eb49 0409 	adc.w	r4, r9, r9
 8006fb2:	4698      	mov	r8, r3
 8006fb4:	46a1      	mov	r9, r4
 8006fb6:	eb18 0805 	adds.w	r8, r8, r5
 8006fba:	eb49 0906 	adc.w	r9, r9, r6
 8006fbe:	f04f 0100 	mov.w	r1, #0
 8006fc2:	f04f 0200 	mov.w	r2, #0
 8006fc6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006fca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006fce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006fd2:	4688      	mov	r8, r1
 8006fd4:	4691      	mov	r9, r2
 8006fd6:	eb18 0005 	adds.w	r0, r8, r5
 8006fda:	eb49 0106 	adc.w	r1, r9, r6
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	461d      	mov	r5, r3
 8006fe4:	f04f 0600 	mov.w	r6, #0
 8006fe8:	196b      	adds	r3, r5, r5
 8006fea:	eb46 0406 	adc.w	r4, r6, r6
 8006fee:	461a      	mov	r2, r3
 8006ff0:	4623      	mov	r3, r4
 8006ff2:	f7f9 fded 	bl	8000bd0 <__aeabi_uldivmod>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4ba5      	ldr	r3, [pc, #660]	; (8007294 <UART_SetConfig+0x384>)
 8006ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	461d      	mov	r5, r3
 800700c:	f04f 0600 	mov.w	r6, #0
 8007010:	46a9      	mov	r9, r5
 8007012:	46b2      	mov	sl, r6
 8007014:	eb19 0309 	adds.w	r3, r9, r9
 8007018:	eb4a 040a 	adc.w	r4, sl, sl
 800701c:	4699      	mov	r9, r3
 800701e:	46a2      	mov	sl, r4
 8007020:	eb19 0905 	adds.w	r9, r9, r5
 8007024:	eb4a 0a06 	adc.w	sl, sl, r6
 8007028:	f04f 0100 	mov.w	r1, #0
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007034:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007038:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800703c:	4689      	mov	r9, r1
 800703e:	4692      	mov	sl, r2
 8007040:	eb19 0005 	adds.w	r0, r9, r5
 8007044:	eb4a 0106 	adc.w	r1, sl, r6
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	461d      	mov	r5, r3
 800704e:	f04f 0600 	mov.w	r6, #0
 8007052:	196b      	adds	r3, r5, r5
 8007054:	eb46 0406 	adc.w	r4, r6, r6
 8007058:	461a      	mov	r2, r3
 800705a:	4623      	mov	r3, r4
 800705c:	f7f9 fdb8 	bl	8000bd0 <__aeabi_uldivmod>
 8007060:	4603      	mov	r3, r0
 8007062:	460c      	mov	r4, r1
 8007064:	461a      	mov	r2, r3
 8007066:	4b8b      	ldr	r3, [pc, #556]	; (8007294 <UART_SetConfig+0x384>)
 8007068:	fba3 1302 	umull	r1, r3, r3, r2
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	2164      	movs	r1, #100	; 0x64
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	3332      	adds	r3, #50	; 0x32
 800707a:	4a86      	ldr	r2, [pc, #536]	; (8007294 <UART_SetConfig+0x384>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007088:	4498      	add	r8, r3
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	461d      	mov	r5, r3
 800708e:	f04f 0600 	mov.w	r6, #0
 8007092:	46a9      	mov	r9, r5
 8007094:	46b2      	mov	sl, r6
 8007096:	eb19 0309 	adds.w	r3, r9, r9
 800709a:	eb4a 040a 	adc.w	r4, sl, sl
 800709e:	4699      	mov	r9, r3
 80070a0:	46a2      	mov	sl, r4
 80070a2:	eb19 0905 	adds.w	r9, r9, r5
 80070a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80070aa:	f04f 0100 	mov.w	r1, #0
 80070ae:	f04f 0200 	mov.w	r2, #0
 80070b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070be:	4689      	mov	r9, r1
 80070c0:	4692      	mov	sl, r2
 80070c2:	eb19 0005 	adds.w	r0, r9, r5
 80070c6:	eb4a 0106 	adc.w	r1, sl, r6
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	461d      	mov	r5, r3
 80070d0:	f04f 0600 	mov.w	r6, #0
 80070d4:	196b      	adds	r3, r5, r5
 80070d6:	eb46 0406 	adc.w	r4, r6, r6
 80070da:	461a      	mov	r2, r3
 80070dc:	4623      	mov	r3, r4
 80070de:	f7f9 fd77 	bl	8000bd0 <__aeabi_uldivmod>
 80070e2:	4603      	mov	r3, r0
 80070e4:	460c      	mov	r4, r1
 80070e6:	461a      	mov	r2, r3
 80070e8:	4b6a      	ldr	r3, [pc, #424]	; (8007294 <UART_SetConfig+0x384>)
 80070ea:	fba3 1302 	umull	r1, r3, r3, r2
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	2164      	movs	r1, #100	; 0x64
 80070f2:	fb01 f303 	mul.w	r3, r1, r3
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	3332      	adds	r3, #50	; 0x32
 80070fc:	4a65      	ldr	r2, [pc, #404]	; (8007294 <UART_SetConfig+0x384>)
 80070fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	f003 0207 	and.w	r2, r3, #7
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4442      	add	r2, r8
 800710e:	609a      	str	r2, [r3, #8]
 8007110:	e26f      	b.n	80075f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007112:	f7fd fe9f 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 8007116:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	461d      	mov	r5, r3
 800711c:	f04f 0600 	mov.w	r6, #0
 8007120:	46a8      	mov	r8, r5
 8007122:	46b1      	mov	r9, r6
 8007124:	eb18 0308 	adds.w	r3, r8, r8
 8007128:	eb49 0409 	adc.w	r4, r9, r9
 800712c:	4698      	mov	r8, r3
 800712e:	46a1      	mov	r9, r4
 8007130:	eb18 0805 	adds.w	r8, r8, r5
 8007134:	eb49 0906 	adc.w	r9, r9, r6
 8007138:	f04f 0100 	mov.w	r1, #0
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007144:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007148:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800714c:	4688      	mov	r8, r1
 800714e:	4691      	mov	r9, r2
 8007150:	eb18 0005 	adds.w	r0, r8, r5
 8007154:	eb49 0106 	adc.w	r1, r9, r6
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	461d      	mov	r5, r3
 800715e:	f04f 0600 	mov.w	r6, #0
 8007162:	196b      	adds	r3, r5, r5
 8007164:	eb46 0406 	adc.w	r4, r6, r6
 8007168:	461a      	mov	r2, r3
 800716a:	4623      	mov	r3, r4
 800716c:	f7f9 fd30 	bl	8000bd0 <__aeabi_uldivmod>
 8007170:	4603      	mov	r3, r0
 8007172:	460c      	mov	r4, r1
 8007174:	461a      	mov	r2, r3
 8007176:	4b47      	ldr	r3, [pc, #284]	; (8007294 <UART_SetConfig+0x384>)
 8007178:	fba3 2302 	umull	r2, r3, r3, r2
 800717c:	095b      	lsrs	r3, r3, #5
 800717e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	461d      	mov	r5, r3
 8007186:	f04f 0600 	mov.w	r6, #0
 800718a:	46a9      	mov	r9, r5
 800718c:	46b2      	mov	sl, r6
 800718e:	eb19 0309 	adds.w	r3, r9, r9
 8007192:	eb4a 040a 	adc.w	r4, sl, sl
 8007196:	4699      	mov	r9, r3
 8007198:	46a2      	mov	sl, r4
 800719a:	eb19 0905 	adds.w	r9, r9, r5
 800719e:	eb4a 0a06 	adc.w	sl, sl, r6
 80071a2:	f04f 0100 	mov.w	r1, #0
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071b6:	4689      	mov	r9, r1
 80071b8:	4692      	mov	sl, r2
 80071ba:	eb19 0005 	adds.w	r0, r9, r5
 80071be:	eb4a 0106 	adc.w	r1, sl, r6
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	461d      	mov	r5, r3
 80071c8:	f04f 0600 	mov.w	r6, #0
 80071cc:	196b      	adds	r3, r5, r5
 80071ce:	eb46 0406 	adc.w	r4, r6, r6
 80071d2:	461a      	mov	r2, r3
 80071d4:	4623      	mov	r3, r4
 80071d6:	f7f9 fcfb 	bl	8000bd0 <__aeabi_uldivmod>
 80071da:	4603      	mov	r3, r0
 80071dc:	460c      	mov	r4, r1
 80071de:	461a      	mov	r2, r3
 80071e0:	4b2c      	ldr	r3, [pc, #176]	; (8007294 <UART_SetConfig+0x384>)
 80071e2:	fba3 1302 	umull	r1, r3, r3, r2
 80071e6:	095b      	lsrs	r3, r3, #5
 80071e8:	2164      	movs	r1, #100	; 0x64
 80071ea:	fb01 f303 	mul.w	r3, r1, r3
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	3332      	adds	r3, #50	; 0x32
 80071f4:	4a27      	ldr	r2, [pc, #156]	; (8007294 <UART_SetConfig+0x384>)
 80071f6:	fba2 2303 	umull	r2, r3, r2, r3
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007202:	4498      	add	r8, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	461d      	mov	r5, r3
 8007208:	f04f 0600 	mov.w	r6, #0
 800720c:	46a9      	mov	r9, r5
 800720e:	46b2      	mov	sl, r6
 8007210:	eb19 0309 	adds.w	r3, r9, r9
 8007214:	eb4a 040a 	adc.w	r4, sl, sl
 8007218:	4699      	mov	r9, r3
 800721a:	46a2      	mov	sl, r4
 800721c:	eb19 0905 	adds.w	r9, r9, r5
 8007220:	eb4a 0a06 	adc.w	sl, sl, r6
 8007224:	f04f 0100 	mov.w	r1, #0
 8007228:	f04f 0200 	mov.w	r2, #0
 800722c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007230:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007234:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007238:	4689      	mov	r9, r1
 800723a:	4692      	mov	sl, r2
 800723c:	eb19 0005 	adds.w	r0, r9, r5
 8007240:	eb4a 0106 	adc.w	r1, sl, r6
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	461d      	mov	r5, r3
 800724a:	f04f 0600 	mov.w	r6, #0
 800724e:	196b      	adds	r3, r5, r5
 8007250:	eb46 0406 	adc.w	r4, r6, r6
 8007254:	461a      	mov	r2, r3
 8007256:	4623      	mov	r3, r4
 8007258:	f7f9 fcba 	bl	8000bd0 <__aeabi_uldivmod>
 800725c:	4603      	mov	r3, r0
 800725e:	460c      	mov	r4, r1
 8007260:	461a      	mov	r2, r3
 8007262:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <UART_SetConfig+0x384>)
 8007264:	fba3 1302 	umull	r1, r3, r3, r2
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	2164      	movs	r1, #100	; 0x64
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	3332      	adds	r3, #50	; 0x32
 8007276:	4a07      	ldr	r2, [pc, #28]	; (8007294 <UART_SetConfig+0x384>)
 8007278:	fba2 2303 	umull	r2, r3, r2, r3
 800727c:	095b      	lsrs	r3, r3, #5
 800727e:	f003 0207 	and.w	r2, r3, #7
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4442      	add	r2, r8
 8007288:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800728a:	e1b2      	b.n	80075f2 <UART_SetConfig+0x6e2>
 800728c:	40011000 	.word	0x40011000
 8007290:	40011400 	.word	0x40011400
 8007294:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4ad7      	ldr	r2, [pc, #860]	; (80075fc <UART_SetConfig+0x6ec>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d005      	beq.n	80072ae <UART_SetConfig+0x39e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4ad6      	ldr	r2, [pc, #856]	; (8007600 <UART_SetConfig+0x6f0>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	f040 80d1 	bne.w	8007450 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80072ae:	f7fd fde5 	bl	8004e7c <HAL_RCC_GetPCLK2Freq>
 80072b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	469a      	mov	sl, r3
 80072b8:	f04f 0b00 	mov.w	fp, #0
 80072bc:	46d0      	mov	r8, sl
 80072be:	46d9      	mov	r9, fp
 80072c0:	eb18 0308 	adds.w	r3, r8, r8
 80072c4:	eb49 0409 	adc.w	r4, r9, r9
 80072c8:	4698      	mov	r8, r3
 80072ca:	46a1      	mov	r9, r4
 80072cc:	eb18 080a 	adds.w	r8, r8, sl
 80072d0:	eb49 090b 	adc.w	r9, r9, fp
 80072d4:	f04f 0100 	mov.w	r1, #0
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80072e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80072e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072e8:	4688      	mov	r8, r1
 80072ea:	4691      	mov	r9, r2
 80072ec:	eb1a 0508 	adds.w	r5, sl, r8
 80072f0:	eb4b 0609 	adc.w	r6, fp, r9
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	4619      	mov	r1, r3
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	f04f 0400 	mov.w	r4, #0
 8007306:	0094      	lsls	r4, r2, #2
 8007308:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800730c:	008b      	lsls	r3, r1, #2
 800730e:	461a      	mov	r2, r3
 8007310:	4623      	mov	r3, r4
 8007312:	4628      	mov	r0, r5
 8007314:	4631      	mov	r1, r6
 8007316:	f7f9 fc5b 	bl	8000bd0 <__aeabi_uldivmod>
 800731a:	4603      	mov	r3, r0
 800731c:	460c      	mov	r4, r1
 800731e:	461a      	mov	r2, r3
 8007320:	4bb8      	ldr	r3, [pc, #736]	; (8007604 <UART_SetConfig+0x6f4>)
 8007322:	fba3 2302 	umull	r2, r3, r3, r2
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	469b      	mov	fp, r3
 8007330:	f04f 0c00 	mov.w	ip, #0
 8007334:	46d9      	mov	r9, fp
 8007336:	46e2      	mov	sl, ip
 8007338:	eb19 0309 	adds.w	r3, r9, r9
 800733c:	eb4a 040a 	adc.w	r4, sl, sl
 8007340:	4699      	mov	r9, r3
 8007342:	46a2      	mov	sl, r4
 8007344:	eb19 090b 	adds.w	r9, r9, fp
 8007348:	eb4a 0a0c 	adc.w	sl, sl, ip
 800734c:	f04f 0100 	mov.w	r1, #0
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007358:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800735c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007360:	4689      	mov	r9, r1
 8007362:	4692      	mov	sl, r2
 8007364:	eb1b 0509 	adds.w	r5, fp, r9
 8007368:	eb4c 060a 	adc.w	r6, ip, sl
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	4619      	mov	r1, r3
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	f04f 0400 	mov.w	r4, #0
 800737e:	0094      	lsls	r4, r2, #2
 8007380:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007384:	008b      	lsls	r3, r1, #2
 8007386:	461a      	mov	r2, r3
 8007388:	4623      	mov	r3, r4
 800738a:	4628      	mov	r0, r5
 800738c:	4631      	mov	r1, r6
 800738e:	f7f9 fc1f 	bl	8000bd0 <__aeabi_uldivmod>
 8007392:	4603      	mov	r3, r0
 8007394:	460c      	mov	r4, r1
 8007396:	461a      	mov	r2, r3
 8007398:	4b9a      	ldr	r3, [pc, #616]	; (8007604 <UART_SetConfig+0x6f4>)
 800739a:	fba3 1302 	umull	r1, r3, r3, r2
 800739e:	095b      	lsrs	r3, r3, #5
 80073a0:	2164      	movs	r1, #100	; 0x64
 80073a2:	fb01 f303 	mul.w	r3, r1, r3
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	3332      	adds	r3, #50	; 0x32
 80073ac:	4a95      	ldr	r2, [pc, #596]	; (8007604 <UART_SetConfig+0x6f4>)
 80073ae:	fba2 2303 	umull	r2, r3, r2, r3
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073b8:	4498      	add	r8, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	469b      	mov	fp, r3
 80073be:	f04f 0c00 	mov.w	ip, #0
 80073c2:	46d9      	mov	r9, fp
 80073c4:	46e2      	mov	sl, ip
 80073c6:	eb19 0309 	adds.w	r3, r9, r9
 80073ca:	eb4a 040a 	adc.w	r4, sl, sl
 80073ce:	4699      	mov	r9, r3
 80073d0:	46a2      	mov	sl, r4
 80073d2:	eb19 090b 	adds.w	r9, r9, fp
 80073d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80073da:	f04f 0100 	mov.w	r1, #0
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073ee:	4689      	mov	r9, r1
 80073f0:	4692      	mov	sl, r2
 80073f2:	eb1b 0509 	adds.w	r5, fp, r9
 80073f6:	eb4c 060a 	adc.w	r6, ip, sl
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	4619      	mov	r1, r3
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	f04f 0400 	mov.w	r4, #0
 800740c:	0094      	lsls	r4, r2, #2
 800740e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007412:	008b      	lsls	r3, r1, #2
 8007414:	461a      	mov	r2, r3
 8007416:	4623      	mov	r3, r4
 8007418:	4628      	mov	r0, r5
 800741a:	4631      	mov	r1, r6
 800741c:	f7f9 fbd8 	bl	8000bd0 <__aeabi_uldivmod>
 8007420:	4603      	mov	r3, r0
 8007422:	460c      	mov	r4, r1
 8007424:	461a      	mov	r2, r3
 8007426:	4b77      	ldr	r3, [pc, #476]	; (8007604 <UART_SetConfig+0x6f4>)
 8007428:	fba3 1302 	umull	r1, r3, r3, r2
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	2164      	movs	r1, #100	; 0x64
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	3332      	adds	r3, #50	; 0x32
 800743a:	4a72      	ldr	r2, [pc, #456]	; (8007604 <UART_SetConfig+0x6f4>)
 800743c:	fba2 2303 	umull	r2, r3, r2, r3
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	f003 020f 	and.w	r2, r3, #15
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4442      	add	r2, r8
 800744c:	609a      	str	r2, [r3, #8]
 800744e:	e0d0      	b.n	80075f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007450:	f7fd fd00 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 8007454:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	469a      	mov	sl, r3
 800745a:	f04f 0b00 	mov.w	fp, #0
 800745e:	46d0      	mov	r8, sl
 8007460:	46d9      	mov	r9, fp
 8007462:	eb18 0308 	adds.w	r3, r8, r8
 8007466:	eb49 0409 	adc.w	r4, r9, r9
 800746a:	4698      	mov	r8, r3
 800746c:	46a1      	mov	r9, r4
 800746e:	eb18 080a 	adds.w	r8, r8, sl
 8007472:	eb49 090b 	adc.w	r9, r9, fp
 8007476:	f04f 0100 	mov.w	r1, #0
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007482:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007486:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800748a:	4688      	mov	r8, r1
 800748c:	4691      	mov	r9, r2
 800748e:	eb1a 0508 	adds.w	r5, sl, r8
 8007492:	eb4b 0609 	adc.w	r6, fp, r9
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	4619      	mov	r1, r3
 800749c:	f04f 0200 	mov.w	r2, #0
 80074a0:	f04f 0300 	mov.w	r3, #0
 80074a4:	f04f 0400 	mov.w	r4, #0
 80074a8:	0094      	lsls	r4, r2, #2
 80074aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074ae:	008b      	lsls	r3, r1, #2
 80074b0:	461a      	mov	r2, r3
 80074b2:	4623      	mov	r3, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	4631      	mov	r1, r6
 80074b8:	f7f9 fb8a 	bl	8000bd0 <__aeabi_uldivmod>
 80074bc:	4603      	mov	r3, r0
 80074be:	460c      	mov	r4, r1
 80074c0:	461a      	mov	r2, r3
 80074c2:	4b50      	ldr	r3, [pc, #320]	; (8007604 <UART_SetConfig+0x6f4>)
 80074c4:	fba3 2302 	umull	r2, r3, r3, r2
 80074c8:	095b      	lsrs	r3, r3, #5
 80074ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	469b      	mov	fp, r3
 80074d2:	f04f 0c00 	mov.w	ip, #0
 80074d6:	46d9      	mov	r9, fp
 80074d8:	46e2      	mov	sl, ip
 80074da:	eb19 0309 	adds.w	r3, r9, r9
 80074de:	eb4a 040a 	adc.w	r4, sl, sl
 80074e2:	4699      	mov	r9, r3
 80074e4:	46a2      	mov	sl, r4
 80074e6:	eb19 090b 	adds.w	r9, r9, fp
 80074ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074ee:	f04f 0100 	mov.w	r1, #0
 80074f2:	f04f 0200 	mov.w	r2, #0
 80074f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007502:	4689      	mov	r9, r1
 8007504:	4692      	mov	sl, r2
 8007506:	eb1b 0509 	adds.w	r5, fp, r9
 800750a:	eb4c 060a 	adc.w	r6, ip, sl
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	4619      	mov	r1, r3
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	f04f 0400 	mov.w	r4, #0
 8007520:	0094      	lsls	r4, r2, #2
 8007522:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007526:	008b      	lsls	r3, r1, #2
 8007528:	461a      	mov	r2, r3
 800752a:	4623      	mov	r3, r4
 800752c:	4628      	mov	r0, r5
 800752e:	4631      	mov	r1, r6
 8007530:	f7f9 fb4e 	bl	8000bd0 <__aeabi_uldivmod>
 8007534:	4603      	mov	r3, r0
 8007536:	460c      	mov	r4, r1
 8007538:	461a      	mov	r2, r3
 800753a:	4b32      	ldr	r3, [pc, #200]	; (8007604 <UART_SetConfig+0x6f4>)
 800753c:	fba3 1302 	umull	r1, r3, r3, r2
 8007540:	095b      	lsrs	r3, r3, #5
 8007542:	2164      	movs	r1, #100	; 0x64
 8007544:	fb01 f303 	mul.w	r3, r1, r3
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	3332      	adds	r3, #50	; 0x32
 800754e:	4a2d      	ldr	r2, [pc, #180]	; (8007604 <UART_SetConfig+0x6f4>)
 8007550:	fba2 2303 	umull	r2, r3, r2, r3
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800755a:	4498      	add	r8, r3
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	469b      	mov	fp, r3
 8007560:	f04f 0c00 	mov.w	ip, #0
 8007564:	46d9      	mov	r9, fp
 8007566:	46e2      	mov	sl, ip
 8007568:	eb19 0309 	adds.w	r3, r9, r9
 800756c:	eb4a 040a 	adc.w	r4, sl, sl
 8007570:	4699      	mov	r9, r3
 8007572:	46a2      	mov	sl, r4
 8007574:	eb19 090b 	adds.w	r9, r9, fp
 8007578:	eb4a 0a0c 	adc.w	sl, sl, ip
 800757c:	f04f 0100 	mov.w	r1, #0
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007588:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800758c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007590:	4689      	mov	r9, r1
 8007592:	4692      	mov	sl, r2
 8007594:	eb1b 0509 	adds.w	r5, fp, r9
 8007598:	eb4c 060a 	adc.w	r6, ip, sl
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	4619      	mov	r1, r3
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	f04f 0400 	mov.w	r4, #0
 80075ae:	0094      	lsls	r4, r2, #2
 80075b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075b4:	008b      	lsls	r3, r1, #2
 80075b6:	461a      	mov	r2, r3
 80075b8:	4623      	mov	r3, r4
 80075ba:	4628      	mov	r0, r5
 80075bc:	4631      	mov	r1, r6
 80075be:	f7f9 fb07 	bl	8000bd0 <__aeabi_uldivmod>
 80075c2:	4603      	mov	r3, r0
 80075c4:	460c      	mov	r4, r1
 80075c6:	461a      	mov	r2, r3
 80075c8:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <UART_SetConfig+0x6f4>)
 80075ca:	fba3 1302 	umull	r1, r3, r3, r2
 80075ce:	095b      	lsrs	r3, r3, #5
 80075d0:	2164      	movs	r1, #100	; 0x64
 80075d2:	fb01 f303 	mul.w	r3, r1, r3
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	011b      	lsls	r3, r3, #4
 80075da:	3332      	adds	r3, #50	; 0x32
 80075dc:	4a09      	ldr	r2, [pc, #36]	; (8007604 <UART_SetConfig+0x6f4>)
 80075de:	fba2 2303 	umull	r2, r3, r2, r3
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	f003 020f 	and.w	r2, r3, #15
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4442      	add	r2, r8
 80075ee:	609a      	str	r2, [r3, #8]
}
 80075f0:	e7ff      	b.n	80075f2 <UART_SetConfig+0x6e2>
 80075f2:	bf00      	nop
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fc:	40011000 	.word	0x40011000
 8007600:	40011400 	.word	0x40011400
 8007604:	51eb851f 	.word	0x51eb851f

08007608 <atoi>:
 8007608:	220a      	movs	r2, #10
 800760a:	2100      	movs	r1, #0
 800760c:	f000 b8b8 	b.w	8007780 <strtol>

08007610 <__errno>:
 8007610:	4b01      	ldr	r3, [pc, #4]	; (8007618 <__errno+0x8>)
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	20000030 	.word	0x20000030

0800761c <__libc_init_array>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4e0d      	ldr	r6, [pc, #52]	; (8007654 <__libc_init_array+0x38>)
 8007620:	4c0d      	ldr	r4, [pc, #52]	; (8007658 <__libc_init_array+0x3c>)
 8007622:	1ba4      	subs	r4, r4, r6
 8007624:	10a4      	asrs	r4, r4, #2
 8007626:	2500      	movs	r5, #0
 8007628:	42a5      	cmp	r5, r4
 800762a:	d109      	bne.n	8007640 <__libc_init_array+0x24>
 800762c:	4e0b      	ldr	r6, [pc, #44]	; (800765c <__libc_init_array+0x40>)
 800762e:	4c0c      	ldr	r4, [pc, #48]	; (8007660 <__libc_init_array+0x44>)
 8007630:	f001 fad6 	bl	8008be0 <_init>
 8007634:	1ba4      	subs	r4, r4, r6
 8007636:	10a4      	asrs	r4, r4, #2
 8007638:	2500      	movs	r5, #0
 800763a:	42a5      	cmp	r5, r4
 800763c:	d105      	bne.n	800764a <__libc_init_array+0x2e>
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007644:	4798      	blx	r3
 8007646:	3501      	adds	r5, #1
 8007648:	e7ee      	b.n	8007628 <__libc_init_array+0xc>
 800764a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800764e:	4798      	blx	r3
 8007650:	3501      	adds	r5, #1
 8007652:	e7f2      	b.n	800763a <__libc_init_array+0x1e>
 8007654:	08008d88 	.word	0x08008d88
 8007658:	08008d88 	.word	0x08008d88
 800765c:	08008d88 	.word	0x08008d88
 8007660:	08008d8c 	.word	0x08008d8c

08007664 <memcpy>:
 8007664:	b510      	push	{r4, lr}
 8007666:	1e43      	subs	r3, r0, #1
 8007668:	440a      	add	r2, r1
 800766a:	4291      	cmp	r1, r2
 800766c:	d100      	bne.n	8007670 <memcpy+0xc>
 800766e:	bd10      	pop	{r4, pc}
 8007670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007678:	e7f7      	b.n	800766a <memcpy+0x6>

0800767a <memset>:
 800767a:	4402      	add	r2, r0
 800767c:	4603      	mov	r3, r0
 800767e:	4293      	cmp	r3, r2
 8007680:	d100      	bne.n	8007684 <memset+0xa>
 8007682:	4770      	bx	lr
 8007684:	f803 1b01 	strb.w	r1, [r3], #1
 8007688:	e7f9      	b.n	800767e <memset+0x4>

0800768a <_strtol_l.isra.0>:
 800768a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800768e:	4680      	mov	r8, r0
 8007690:	4689      	mov	r9, r1
 8007692:	4692      	mov	sl, r2
 8007694:	461e      	mov	r6, r3
 8007696:	460f      	mov	r7, r1
 8007698:	463d      	mov	r5, r7
 800769a:	9808      	ldr	r0, [sp, #32]
 800769c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076a0:	f000 f884 	bl	80077ac <__locale_ctype_ptr_l>
 80076a4:	4420      	add	r0, r4
 80076a6:	7843      	ldrb	r3, [r0, #1]
 80076a8:	f013 0308 	ands.w	r3, r3, #8
 80076ac:	d132      	bne.n	8007714 <_strtol_l.isra.0+0x8a>
 80076ae:	2c2d      	cmp	r4, #45	; 0x2d
 80076b0:	d132      	bne.n	8007718 <_strtol_l.isra.0+0x8e>
 80076b2:	787c      	ldrb	r4, [r7, #1]
 80076b4:	1cbd      	adds	r5, r7, #2
 80076b6:	2201      	movs	r2, #1
 80076b8:	2e00      	cmp	r6, #0
 80076ba:	d05d      	beq.n	8007778 <_strtol_l.isra.0+0xee>
 80076bc:	2e10      	cmp	r6, #16
 80076be:	d109      	bne.n	80076d4 <_strtol_l.isra.0+0x4a>
 80076c0:	2c30      	cmp	r4, #48	; 0x30
 80076c2:	d107      	bne.n	80076d4 <_strtol_l.isra.0+0x4a>
 80076c4:	782b      	ldrb	r3, [r5, #0]
 80076c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80076ca:	2b58      	cmp	r3, #88	; 0x58
 80076cc:	d14f      	bne.n	800776e <_strtol_l.isra.0+0xe4>
 80076ce:	786c      	ldrb	r4, [r5, #1]
 80076d0:	2610      	movs	r6, #16
 80076d2:	3502      	adds	r5, #2
 80076d4:	2a00      	cmp	r2, #0
 80076d6:	bf14      	ite	ne
 80076d8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80076dc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80076e0:	2700      	movs	r7, #0
 80076e2:	fbb1 fcf6 	udiv	ip, r1, r6
 80076e6:	4638      	mov	r0, r7
 80076e8:	fb06 1e1c 	mls	lr, r6, ip, r1
 80076ec:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80076f0:	2b09      	cmp	r3, #9
 80076f2:	d817      	bhi.n	8007724 <_strtol_l.isra.0+0x9a>
 80076f4:	461c      	mov	r4, r3
 80076f6:	42a6      	cmp	r6, r4
 80076f8:	dd23      	ble.n	8007742 <_strtol_l.isra.0+0xb8>
 80076fa:	1c7b      	adds	r3, r7, #1
 80076fc:	d007      	beq.n	800770e <_strtol_l.isra.0+0x84>
 80076fe:	4584      	cmp	ip, r0
 8007700:	d31c      	bcc.n	800773c <_strtol_l.isra.0+0xb2>
 8007702:	d101      	bne.n	8007708 <_strtol_l.isra.0+0x7e>
 8007704:	45a6      	cmp	lr, r4
 8007706:	db19      	blt.n	800773c <_strtol_l.isra.0+0xb2>
 8007708:	fb00 4006 	mla	r0, r0, r6, r4
 800770c:	2701      	movs	r7, #1
 800770e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007712:	e7eb      	b.n	80076ec <_strtol_l.isra.0+0x62>
 8007714:	462f      	mov	r7, r5
 8007716:	e7bf      	b.n	8007698 <_strtol_l.isra.0+0xe>
 8007718:	2c2b      	cmp	r4, #43	; 0x2b
 800771a:	bf04      	itt	eq
 800771c:	1cbd      	addeq	r5, r7, #2
 800771e:	787c      	ldrbeq	r4, [r7, #1]
 8007720:	461a      	mov	r2, r3
 8007722:	e7c9      	b.n	80076b8 <_strtol_l.isra.0+0x2e>
 8007724:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007728:	2b19      	cmp	r3, #25
 800772a:	d801      	bhi.n	8007730 <_strtol_l.isra.0+0xa6>
 800772c:	3c37      	subs	r4, #55	; 0x37
 800772e:	e7e2      	b.n	80076f6 <_strtol_l.isra.0+0x6c>
 8007730:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007734:	2b19      	cmp	r3, #25
 8007736:	d804      	bhi.n	8007742 <_strtol_l.isra.0+0xb8>
 8007738:	3c57      	subs	r4, #87	; 0x57
 800773a:	e7dc      	b.n	80076f6 <_strtol_l.isra.0+0x6c>
 800773c:	f04f 37ff 	mov.w	r7, #4294967295
 8007740:	e7e5      	b.n	800770e <_strtol_l.isra.0+0x84>
 8007742:	1c7b      	adds	r3, r7, #1
 8007744:	d108      	bne.n	8007758 <_strtol_l.isra.0+0xce>
 8007746:	2322      	movs	r3, #34	; 0x22
 8007748:	f8c8 3000 	str.w	r3, [r8]
 800774c:	4608      	mov	r0, r1
 800774e:	f1ba 0f00 	cmp.w	sl, #0
 8007752:	d107      	bne.n	8007764 <_strtol_l.isra.0+0xda>
 8007754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007758:	b102      	cbz	r2, 800775c <_strtol_l.isra.0+0xd2>
 800775a:	4240      	negs	r0, r0
 800775c:	f1ba 0f00 	cmp.w	sl, #0
 8007760:	d0f8      	beq.n	8007754 <_strtol_l.isra.0+0xca>
 8007762:	b10f      	cbz	r7, 8007768 <_strtol_l.isra.0+0xde>
 8007764:	f105 39ff 	add.w	r9, r5, #4294967295
 8007768:	f8ca 9000 	str.w	r9, [sl]
 800776c:	e7f2      	b.n	8007754 <_strtol_l.isra.0+0xca>
 800776e:	2430      	movs	r4, #48	; 0x30
 8007770:	2e00      	cmp	r6, #0
 8007772:	d1af      	bne.n	80076d4 <_strtol_l.isra.0+0x4a>
 8007774:	2608      	movs	r6, #8
 8007776:	e7ad      	b.n	80076d4 <_strtol_l.isra.0+0x4a>
 8007778:	2c30      	cmp	r4, #48	; 0x30
 800777a:	d0a3      	beq.n	80076c4 <_strtol_l.isra.0+0x3a>
 800777c:	260a      	movs	r6, #10
 800777e:	e7a9      	b.n	80076d4 <_strtol_l.isra.0+0x4a>

08007780 <strtol>:
 8007780:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <strtol+0x24>)
 8007782:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007784:	681c      	ldr	r4, [r3, #0]
 8007786:	4d08      	ldr	r5, [pc, #32]	; (80077a8 <strtol+0x28>)
 8007788:	6a23      	ldr	r3, [r4, #32]
 800778a:	2b00      	cmp	r3, #0
 800778c:	bf08      	it	eq
 800778e:	462b      	moveq	r3, r5
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	4613      	mov	r3, r2
 8007794:	460a      	mov	r2, r1
 8007796:	4601      	mov	r1, r0
 8007798:	4620      	mov	r0, r4
 800779a:	f7ff ff76 	bl	800768a <_strtol_l.isra.0>
 800779e:	b003      	add	sp, #12
 80077a0:	bd30      	pop	{r4, r5, pc}
 80077a2:	bf00      	nop
 80077a4:	20000030 	.word	0x20000030
 80077a8:	20000094 	.word	0x20000094

080077ac <__locale_ctype_ptr_l>:
 80077ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80077b0:	4770      	bx	lr

080077b2 <__ascii_mbtowc>:
 80077b2:	b082      	sub	sp, #8
 80077b4:	b901      	cbnz	r1, 80077b8 <__ascii_mbtowc+0x6>
 80077b6:	a901      	add	r1, sp, #4
 80077b8:	b142      	cbz	r2, 80077cc <__ascii_mbtowc+0x1a>
 80077ba:	b14b      	cbz	r3, 80077d0 <__ascii_mbtowc+0x1e>
 80077bc:	7813      	ldrb	r3, [r2, #0]
 80077be:	600b      	str	r3, [r1, #0]
 80077c0:	7812      	ldrb	r2, [r2, #0]
 80077c2:	1c10      	adds	r0, r2, #0
 80077c4:	bf18      	it	ne
 80077c6:	2001      	movne	r0, #1
 80077c8:	b002      	add	sp, #8
 80077ca:	4770      	bx	lr
 80077cc:	4610      	mov	r0, r2
 80077ce:	e7fb      	b.n	80077c8 <__ascii_mbtowc+0x16>
 80077d0:	f06f 0001 	mvn.w	r0, #1
 80077d4:	e7f8      	b.n	80077c8 <__ascii_mbtowc+0x16>

080077d6 <__ascii_wctomb>:
 80077d6:	b149      	cbz	r1, 80077ec <__ascii_wctomb+0x16>
 80077d8:	2aff      	cmp	r2, #255	; 0xff
 80077da:	bf85      	ittet	hi
 80077dc:	238a      	movhi	r3, #138	; 0x8a
 80077de:	6003      	strhi	r3, [r0, #0]
 80077e0:	700a      	strbls	r2, [r1, #0]
 80077e2:	f04f 30ff 	movhi.w	r0, #4294967295
 80077e6:	bf98      	it	ls
 80077e8:	2001      	movls	r0, #1
 80077ea:	4770      	bx	lr
 80077ec:	4608      	mov	r0, r1
 80077ee:	4770      	bx	lr

080077f0 <round>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	ec57 6b10 	vmov	r6, r7, d0
 80077f6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80077fa:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80077fe:	2c13      	cmp	r4, #19
 8007800:	463b      	mov	r3, r7
 8007802:	463d      	mov	r5, r7
 8007804:	dc17      	bgt.n	8007836 <round+0x46>
 8007806:	2c00      	cmp	r4, #0
 8007808:	da09      	bge.n	800781e <round+0x2e>
 800780a:	3401      	adds	r4, #1
 800780c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007810:	d103      	bne.n	800781a <round+0x2a>
 8007812:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007816:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800781a:	2100      	movs	r1, #0
 800781c:	e02c      	b.n	8007878 <round+0x88>
 800781e:	4a18      	ldr	r2, [pc, #96]	; (8007880 <round+0x90>)
 8007820:	4122      	asrs	r2, r4
 8007822:	4217      	tst	r7, r2
 8007824:	d100      	bne.n	8007828 <round+0x38>
 8007826:	b19e      	cbz	r6, 8007850 <round+0x60>
 8007828:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800782c:	4123      	asrs	r3, r4
 800782e:	442b      	add	r3, r5
 8007830:	ea23 0302 	bic.w	r3, r3, r2
 8007834:	e7f1      	b.n	800781a <round+0x2a>
 8007836:	2c33      	cmp	r4, #51	; 0x33
 8007838:	dd0d      	ble.n	8007856 <round+0x66>
 800783a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800783e:	d107      	bne.n	8007850 <round+0x60>
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	ee10 2a10 	vmov	r2, s0
 8007848:	f7f8 fcc4 	bl	80001d4 <__adddf3>
 800784c:	4606      	mov	r6, r0
 800784e:	460f      	mov	r7, r1
 8007850:	ec47 6b10 	vmov	d0, r6, r7
 8007854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007856:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800785a:	f04f 30ff 	mov.w	r0, #4294967295
 800785e:	40d0      	lsrs	r0, r2
 8007860:	4206      	tst	r6, r0
 8007862:	d0f5      	beq.n	8007850 <round+0x60>
 8007864:	2201      	movs	r2, #1
 8007866:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800786a:	fa02 f404 	lsl.w	r4, r2, r4
 800786e:	1931      	adds	r1, r6, r4
 8007870:	bf28      	it	cs
 8007872:	189b      	addcs	r3, r3, r2
 8007874:	ea21 0100 	bic.w	r1, r1, r0
 8007878:	461f      	mov	r7, r3
 800787a:	460e      	mov	r6, r1
 800787c:	e7e8      	b.n	8007850 <round+0x60>
 800787e:	bf00      	nop
 8007880:	000fffff 	.word	0x000fffff

08007884 <pow>:
 8007884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007888:	ed2d 8b04 	vpush	{d8-d9}
 800788c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007b60 <pow+0x2dc>
 8007890:	b08d      	sub	sp, #52	; 0x34
 8007892:	ec57 6b10 	vmov	r6, r7, d0
 8007896:	ec55 4b11 	vmov	r4, r5, d1
 800789a:	f000 f9dd 	bl	8007c58 <__ieee754_pow>
 800789e:	f999 3000 	ldrsb.w	r3, [r9]
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	3301      	adds	r3, #1
 80078a6:	eeb0 8a40 	vmov.f32	s16, s0
 80078aa:	eef0 8a60 	vmov.f32	s17, s1
 80078ae:	46c8      	mov	r8, r9
 80078b0:	d05f      	beq.n	8007972 <pow+0xee>
 80078b2:	4622      	mov	r2, r4
 80078b4:	462b      	mov	r3, r5
 80078b6:	4620      	mov	r0, r4
 80078b8:	4629      	mov	r1, r5
 80078ba:	f7f9 f8db 	bl	8000a74 <__aeabi_dcmpun>
 80078be:	4683      	mov	fp, r0
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d156      	bne.n	8007972 <pow+0xee>
 80078c4:	4632      	mov	r2, r6
 80078c6:	463b      	mov	r3, r7
 80078c8:	4630      	mov	r0, r6
 80078ca:	4639      	mov	r1, r7
 80078cc:	f7f9 f8d2 	bl	8000a74 <__aeabi_dcmpun>
 80078d0:	9001      	str	r0, [sp, #4]
 80078d2:	b1e8      	cbz	r0, 8007910 <pow+0x8c>
 80078d4:	2200      	movs	r2, #0
 80078d6:	2300      	movs	r3, #0
 80078d8:	4620      	mov	r0, r4
 80078da:	4629      	mov	r1, r5
 80078dc:	f7f9 f898 	bl	8000a10 <__aeabi_dcmpeq>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d046      	beq.n	8007972 <pow+0xee>
 80078e4:	2301      	movs	r3, #1
 80078e6:	9302      	str	r3, [sp, #8]
 80078e8:	4b96      	ldr	r3, [pc, #600]	; (8007b44 <pow+0x2c0>)
 80078ea:	9303      	str	r3, [sp, #12]
 80078ec:	4b96      	ldr	r3, [pc, #600]	; (8007b48 <pow+0x2c4>)
 80078ee:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80078f2:	2200      	movs	r2, #0
 80078f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078f8:	9b00      	ldr	r3, [sp, #0]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007900:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007904:	d033      	beq.n	800796e <pow+0xea>
 8007906:	a802      	add	r0, sp, #8
 8007908:	f001 f849 	bl	800899e <matherr>
 800790c:	bb48      	cbnz	r0, 8007962 <pow+0xde>
 800790e:	e05d      	b.n	80079cc <pow+0x148>
 8007910:	f04f 0a00 	mov.w	sl, #0
 8007914:	f04f 0b00 	mov.w	fp, #0
 8007918:	4652      	mov	r2, sl
 800791a:	465b      	mov	r3, fp
 800791c:	4630      	mov	r0, r6
 800791e:	4639      	mov	r1, r7
 8007920:	f7f9 f876 	bl	8000a10 <__aeabi_dcmpeq>
 8007924:	ec4b ab19 	vmov	d9, sl, fp
 8007928:	2800      	cmp	r0, #0
 800792a:	d054      	beq.n	80079d6 <pow+0x152>
 800792c:	4652      	mov	r2, sl
 800792e:	465b      	mov	r3, fp
 8007930:	4620      	mov	r0, r4
 8007932:	4629      	mov	r1, r5
 8007934:	f7f9 f86c 	bl	8000a10 <__aeabi_dcmpeq>
 8007938:	4680      	mov	r8, r0
 800793a:	b318      	cbz	r0, 8007984 <pow+0x100>
 800793c:	2301      	movs	r3, #1
 800793e:	9302      	str	r3, [sp, #8]
 8007940:	4b80      	ldr	r3, [pc, #512]	; (8007b44 <pow+0x2c0>)
 8007942:	9303      	str	r3, [sp, #12]
 8007944:	9b01      	ldr	r3, [sp, #4]
 8007946:	930a      	str	r3, [sp, #40]	; 0x28
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800794e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007952:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0d5      	beq.n	8007906 <pow+0x82>
 800795a:	4b7b      	ldr	r3, [pc, #492]	; (8007b48 <pow+0x2c4>)
 800795c:	2200      	movs	r2, #0
 800795e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007964:	b11b      	cbz	r3, 800796e <pow+0xea>
 8007966:	f7ff fe53 	bl	8007610 <__errno>
 800796a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800796c:	6003      	str	r3, [r0, #0]
 800796e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007972:	eeb0 0a48 	vmov.f32	s0, s16
 8007976:	eef0 0a68 	vmov.f32	s1, s17
 800797a:	b00d      	add	sp, #52	; 0x34
 800797c:	ecbd 8b04 	vpop	{d8-d9}
 8007980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007984:	ec45 4b10 	vmov	d0, r4, r5
 8007988:	f001 f801 	bl	800898e <finite>
 800798c:	2800      	cmp	r0, #0
 800798e:	d0f0      	beq.n	8007972 <pow+0xee>
 8007990:	4652      	mov	r2, sl
 8007992:	465b      	mov	r3, fp
 8007994:	4620      	mov	r0, r4
 8007996:	4629      	mov	r1, r5
 8007998:	f7f9 f844 	bl	8000a24 <__aeabi_dcmplt>
 800799c:	2800      	cmp	r0, #0
 800799e:	d0e8      	beq.n	8007972 <pow+0xee>
 80079a0:	2301      	movs	r3, #1
 80079a2:	9302      	str	r3, [sp, #8]
 80079a4:	4b67      	ldr	r3, [pc, #412]	; (8007b44 <pow+0x2c0>)
 80079a6:	9303      	str	r3, [sp, #12]
 80079a8:	f999 3000 	ldrsb.w	r3, [r9]
 80079ac:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80079b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80079b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80079b8:	b913      	cbnz	r3, 80079c0 <pow+0x13c>
 80079ba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80079be:	e7a2      	b.n	8007906 <pow+0x82>
 80079c0:	4962      	ldr	r1, [pc, #392]	; (8007b4c <pow+0x2c8>)
 80079c2:	2000      	movs	r0, #0
 80079c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d19c      	bne.n	8007906 <pow+0x82>
 80079cc:	f7ff fe20 	bl	8007610 <__errno>
 80079d0:	2321      	movs	r3, #33	; 0x21
 80079d2:	6003      	str	r3, [r0, #0]
 80079d4:	e7c5      	b.n	8007962 <pow+0xde>
 80079d6:	eeb0 0a48 	vmov.f32	s0, s16
 80079da:	eef0 0a68 	vmov.f32	s1, s17
 80079de:	f000 ffd6 	bl	800898e <finite>
 80079e2:	9000      	str	r0, [sp, #0]
 80079e4:	2800      	cmp	r0, #0
 80079e6:	f040 8081 	bne.w	8007aec <pow+0x268>
 80079ea:	ec47 6b10 	vmov	d0, r6, r7
 80079ee:	f000 ffce 	bl	800898e <finite>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d07a      	beq.n	8007aec <pow+0x268>
 80079f6:	ec45 4b10 	vmov	d0, r4, r5
 80079fa:	f000 ffc8 	bl	800898e <finite>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d074      	beq.n	8007aec <pow+0x268>
 8007a02:	ec53 2b18 	vmov	r2, r3, d8
 8007a06:	ee18 0a10 	vmov	r0, s16
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	f7f9 f832 	bl	8000a74 <__aeabi_dcmpun>
 8007a10:	f999 9000 	ldrsb.w	r9, [r9]
 8007a14:	4b4b      	ldr	r3, [pc, #300]	; (8007b44 <pow+0x2c0>)
 8007a16:	b1b0      	cbz	r0, 8007a46 <pow+0x1c2>
 8007a18:	2201      	movs	r2, #1
 8007a1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a1e:	9b00      	ldr	r3, [sp, #0]
 8007a20:	930a      	str	r3, [sp, #40]	; 0x28
 8007a22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007a26:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007a2a:	f1b9 0f00 	cmp.w	r9, #0
 8007a2e:	d0c4      	beq.n	80079ba <pow+0x136>
 8007a30:	4652      	mov	r2, sl
 8007a32:	465b      	mov	r3, fp
 8007a34:	4650      	mov	r0, sl
 8007a36:	4659      	mov	r1, fp
 8007a38:	f7f8 feac 	bl	8000794 <__aeabi_ddiv>
 8007a3c:	f1b9 0f02 	cmp.w	r9, #2
 8007a40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a44:	e7c1      	b.n	80079ca <pow+0x146>
 8007a46:	2203      	movs	r2, #3
 8007a48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a4c:	900a      	str	r0, [sp, #40]	; 0x28
 8007a4e:	4629      	mov	r1, r5
 8007a50:	4620      	mov	r0, r4
 8007a52:	2200      	movs	r2, #0
 8007a54:	4b3e      	ldr	r3, [pc, #248]	; (8007b50 <pow+0x2cc>)
 8007a56:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007a5a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007a5e:	f7f8 fd6f 	bl	8000540 <__aeabi_dmul>
 8007a62:	4604      	mov	r4, r0
 8007a64:	460d      	mov	r5, r1
 8007a66:	f1b9 0f00 	cmp.w	r9, #0
 8007a6a:	d124      	bne.n	8007ab6 <pow+0x232>
 8007a6c:	4b39      	ldr	r3, [pc, #228]	; (8007b54 <pow+0x2d0>)
 8007a6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007a72:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a76:	4630      	mov	r0, r6
 8007a78:	4652      	mov	r2, sl
 8007a7a:	465b      	mov	r3, fp
 8007a7c:	4639      	mov	r1, r7
 8007a7e:	f7f8 ffd1 	bl	8000a24 <__aeabi_dcmplt>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d056      	beq.n	8007b34 <pow+0x2b0>
 8007a86:	ec45 4b10 	vmov	d0, r4, r5
 8007a8a:	f000 ff95 	bl	80089b8 <rint>
 8007a8e:	4622      	mov	r2, r4
 8007a90:	462b      	mov	r3, r5
 8007a92:	ec51 0b10 	vmov	r0, r1, d0
 8007a96:	f7f8 ffbb 	bl	8000a10 <__aeabi_dcmpeq>
 8007a9a:	b920      	cbnz	r0, 8007aa6 <pow+0x222>
 8007a9c:	4b2e      	ldr	r3, [pc, #184]	; (8007b58 <pow+0x2d4>)
 8007a9e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007aa2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007aa6:	f998 3000 	ldrsb.w	r3, [r8]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d142      	bne.n	8007b34 <pow+0x2b0>
 8007aae:	f7ff fdaf 	bl	8007610 <__errno>
 8007ab2:	2322      	movs	r3, #34	; 0x22
 8007ab4:	e78d      	b.n	80079d2 <pow+0x14e>
 8007ab6:	4b29      	ldr	r3, [pc, #164]	; (8007b5c <pow+0x2d8>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007abe:	4630      	mov	r0, r6
 8007ac0:	4652      	mov	r2, sl
 8007ac2:	465b      	mov	r3, fp
 8007ac4:	4639      	mov	r1, r7
 8007ac6:	f7f8 ffad 	bl	8000a24 <__aeabi_dcmplt>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0eb      	beq.n	8007aa6 <pow+0x222>
 8007ace:	ec45 4b10 	vmov	d0, r4, r5
 8007ad2:	f000 ff71 	bl	80089b8 <rint>
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	462b      	mov	r3, r5
 8007ada:	ec51 0b10 	vmov	r0, r1, d0
 8007ade:	f7f8 ff97 	bl	8000a10 <__aeabi_dcmpeq>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d1df      	bne.n	8007aa6 <pow+0x222>
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	4b18      	ldr	r3, [pc, #96]	; (8007b4c <pow+0x2c8>)
 8007aea:	e7da      	b.n	8007aa2 <pow+0x21e>
 8007aec:	2200      	movs	r2, #0
 8007aee:	2300      	movs	r3, #0
 8007af0:	ec51 0b18 	vmov	r0, r1, d8
 8007af4:	f7f8 ff8c 	bl	8000a10 <__aeabi_dcmpeq>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	f43f af3a 	beq.w	8007972 <pow+0xee>
 8007afe:	ec47 6b10 	vmov	d0, r6, r7
 8007b02:	f000 ff44 	bl	800898e <finite>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f43f af33 	beq.w	8007972 <pow+0xee>
 8007b0c:	ec45 4b10 	vmov	d0, r4, r5
 8007b10:	f000 ff3d 	bl	800898e <finite>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	f43f af2c 	beq.w	8007972 <pow+0xee>
 8007b1a:	2304      	movs	r3, #4
 8007b1c:	9302      	str	r3, [sp, #8]
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <pow+0x2c0>)
 8007b20:	9303      	str	r3, [sp, #12]
 8007b22:	2300      	movs	r3, #0
 8007b24:	930a      	str	r3, [sp, #40]	; 0x28
 8007b26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007b2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007b2e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007b32:	e7b8      	b.n	8007aa6 <pow+0x222>
 8007b34:	a802      	add	r0, sp, #8
 8007b36:	f000 ff32 	bl	800899e <matherr>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	f47f af11 	bne.w	8007962 <pow+0xde>
 8007b40:	e7b5      	b.n	8007aae <pow+0x22a>
 8007b42:	bf00      	nop
 8007b44:	08008d1b 	.word	0x08008d1b
 8007b48:	3ff00000 	.word	0x3ff00000
 8007b4c:	fff00000 	.word	0xfff00000
 8007b50:	3fe00000 	.word	0x3fe00000
 8007b54:	47efffff 	.word	0x47efffff
 8007b58:	c7efffff 	.word	0xc7efffff
 8007b5c:	7ff00000 	.word	0x7ff00000
 8007b60:	20000200 	.word	0x20000200

08007b64 <expf>:
 8007b64:	b530      	push	{r4, r5, lr}
 8007b66:	ed2d 8b02 	vpush	{d8}
 8007b6a:	4d35      	ldr	r5, [pc, #212]	; (8007c40 <expf+0xdc>)
 8007b6c:	b08b      	sub	sp, #44	; 0x2c
 8007b6e:	eeb0 8a40 	vmov.f32	s16, s0
 8007b72:	f000 fe2f 	bl	80087d4 <__ieee754_expf>
 8007b76:	f995 3000 	ldrsb.w	r3, [r5]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	ee10 4a10 	vmov	r4, s0
 8007b80:	d030      	beq.n	8007be4 <expf+0x80>
 8007b82:	eeb0 0a48 	vmov.f32	s0, s16
 8007b86:	f001 f811 	bl	8008bac <finitef>
 8007b8a:	b358      	cbz	r0, 8007be4 <expf+0x80>
 8007b8c:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8007c44 <expf+0xe0>
 8007b90:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b98:	dd35      	ble.n	8007c06 <expf+0xa2>
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	4b2a      	ldr	r3, [pc, #168]	; (8007c48 <expf+0xe4>)
 8007ba0:	9301      	str	r3, [sp, #4]
 8007ba2:	ee18 0a10 	vmov	r0, s16
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	9308      	str	r3, [sp, #32]
 8007baa:	f7f8 fc71 	bl	8000490 <__aeabi_f2d>
 8007bae:	f995 3000 	ldrsb.w	r3, [r5]
 8007bb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bba:	b9cb      	cbnz	r3, 8007bf0 <expf+0x8c>
 8007bbc:	4b23      	ldr	r3, [pc, #140]	; (8007c4c <expf+0xe8>)
 8007bbe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007bc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bc6:	4668      	mov	r0, sp
 8007bc8:	f000 fee9 	bl	800899e <matherr>
 8007bcc:	b1b0      	cbz	r0, 8007bfc <expf+0x98>
 8007bce:	9b08      	ldr	r3, [sp, #32]
 8007bd0:	b11b      	cbz	r3, 8007bda <expf+0x76>
 8007bd2:	f7ff fd1d 	bl	8007610 <__errno>
 8007bd6:	9b08      	ldr	r3, [sp, #32]
 8007bd8:	6003      	str	r3, [r0, #0]
 8007bda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bde:	f7f8 ffa7 	bl	8000b30 <__aeabi_d2f>
 8007be2:	4604      	mov	r4, r0
 8007be4:	ee00 4a10 	vmov	s0, r4
 8007be8:	b00b      	add	sp, #44	; 0x2c
 8007bea:	ecbd 8b02 	vpop	{d8}
 8007bee:	bd30      	pop	{r4, r5, pc}
 8007bf0:	4917      	ldr	r1, [pc, #92]	; (8007c50 <expf+0xec>)
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d1e4      	bne.n	8007bc6 <expf+0x62>
 8007bfc:	f7ff fd08 	bl	8007610 <__errno>
 8007c00:	2322      	movs	r3, #34	; 0x22
 8007c02:	6003      	str	r3, [r0, #0]
 8007c04:	e7e3      	b.n	8007bce <expf+0x6a>
 8007c06:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007c54 <expf+0xf0>
 8007c0a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c12:	d5e7      	bpl.n	8007be4 <expf+0x80>
 8007c14:	2304      	movs	r3, #4
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	4b0b      	ldr	r3, [pc, #44]	; (8007c48 <expf+0xe4>)
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	ee18 0a10 	vmov	r0, s16
 8007c20:	2300      	movs	r3, #0
 8007c22:	9308      	str	r3, [sp, #32]
 8007c24:	f7f8 fc34 	bl	8000490 <__aeabi_f2d>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c38:	f995 3000 	ldrsb.w	r3, [r5]
 8007c3c:	e7dc      	b.n	8007bf8 <expf+0x94>
 8007c3e:	bf00      	nop
 8007c40:	20000200 	.word	0x20000200
 8007c44:	42b17180 	.word	0x42b17180
 8007c48:	08008d1f 	.word	0x08008d1f
 8007c4c:	47efffff 	.word	0x47efffff
 8007c50:	7ff00000 	.word	0x7ff00000
 8007c54:	c2cff1b5 	.word	0xc2cff1b5

08007c58 <__ieee754_pow>:
 8007c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	b091      	sub	sp, #68	; 0x44
 8007c5e:	ed8d 1b00 	vstr	d1, [sp]
 8007c62:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007c66:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007c6a:	ea58 0302 	orrs.w	r3, r8, r2
 8007c6e:	ec57 6b10 	vmov	r6, r7, d0
 8007c72:	f000 84be 	beq.w	80085f2 <__ieee754_pow+0x99a>
 8007c76:	4b7a      	ldr	r3, [pc, #488]	; (8007e60 <__ieee754_pow+0x208>)
 8007c78:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	463d      	mov	r5, r7
 8007c80:	ee10 aa10 	vmov	sl, s0
 8007c84:	dc09      	bgt.n	8007c9a <__ieee754_pow+0x42>
 8007c86:	d103      	bne.n	8007c90 <__ieee754_pow+0x38>
 8007c88:	b93e      	cbnz	r6, 8007c9a <__ieee754_pow+0x42>
 8007c8a:	45a0      	cmp	r8, r4
 8007c8c:	dc0d      	bgt.n	8007caa <__ieee754_pow+0x52>
 8007c8e:	e001      	b.n	8007c94 <__ieee754_pow+0x3c>
 8007c90:	4598      	cmp	r8, r3
 8007c92:	dc02      	bgt.n	8007c9a <__ieee754_pow+0x42>
 8007c94:	4598      	cmp	r8, r3
 8007c96:	d10e      	bne.n	8007cb6 <__ieee754_pow+0x5e>
 8007c98:	b16a      	cbz	r2, 8007cb6 <__ieee754_pow+0x5e>
 8007c9a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007c9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007ca2:	ea54 030a 	orrs.w	r3, r4, sl
 8007ca6:	f000 84a4 	beq.w	80085f2 <__ieee754_pow+0x99a>
 8007caa:	486e      	ldr	r0, [pc, #440]	; (8007e64 <__ieee754_pow+0x20c>)
 8007cac:	b011      	add	sp, #68	; 0x44
 8007cae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb2:	f000 be79 	b.w	80089a8 <nan>
 8007cb6:	2d00      	cmp	r5, #0
 8007cb8:	da53      	bge.n	8007d62 <__ieee754_pow+0x10a>
 8007cba:	4b6b      	ldr	r3, [pc, #428]	; (8007e68 <__ieee754_pow+0x210>)
 8007cbc:	4598      	cmp	r8, r3
 8007cbe:	dc4d      	bgt.n	8007d5c <__ieee754_pow+0x104>
 8007cc0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007cc4:	4598      	cmp	r8, r3
 8007cc6:	dd4c      	ble.n	8007d62 <__ieee754_pow+0x10a>
 8007cc8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007ccc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007cd0:	2b14      	cmp	r3, #20
 8007cd2:	dd26      	ble.n	8007d22 <__ieee754_pow+0xca>
 8007cd4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007cd8:	fa22 f103 	lsr.w	r1, r2, r3
 8007cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d13e      	bne.n	8007d62 <__ieee754_pow+0x10a>
 8007ce4:	f001 0101 	and.w	r1, r1, #1
 8007ce8:	f1c1 0b02 	rsb	fp, r1, #2
 8007cec:	2a00      	cmp	r2, #0
 8007cee:	d15b      	bne.n	8007da8 <__ieee754_pow+0x150>
 8007cf0:	4b5b      	ldr	r3, [pc, #364]	; (8007e60 <__ieee754_pow+0x208>)
 8007cf2:	4598      	cmp	r8, r3
 8007cf4:	d124      	bne.n	8007d40 <__ieee754_pow+0xe8>
 8007cf6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007cfa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007cfe:	ea53 030a 	orrs.w	r3, r3, sl
 8007d02:	f000 8476 	beq.w	80085f2 <__ieee754_pow+0x99a>
 8007d06:	4b59      	ldr	r3, [pc, #356]	; (8007e6c <__ieee754_pow+0x214>)
 8007d08:	429c      	cmp	r4, r3
 8007d0a:	dd2d      	ble.n	8007d68 <__ieee754_pow+0x110>
 8007d0c:	f1b9 0f00 	cmp.w	r9, #0
 8007d10:	f280 8473 	bge.w	80085fa <__ieee754_pow+0x9a2>
 8007d14:	2000      	movs	r0, #0
 8007d16:	2100      	movs	r1, #0
 8007d18:	ec41 0b10 	vmov	d0, r0, r1
 8007d1c:	b011      	add	sp, #68	; 0x44
 8007d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d22:	2a00      	cmp	r2, #0
 8007d24:	d13e      	bne.n	8007da4 <__ieee754_pow+0x14c>
 8007d26:	f1c3 0314 	rsb	r3, r3, #20
 8007d2a:	fa48 f103 	asr.w	r1, r8, r3
 8007d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d32:	4543      	cmp	r3, r8
 8007d34:	f040 8469 	bne.w	800860a <__ieee754_pow+0x9b2>
 8007d38:	f001 0101 	and.w	r1, r1, #1
 8007d3c:	f1c1 0b02 	rsb	fp, r1, #2
 8007d40:	4b4b      	ldr	r3, [pc, #300]	; (8007e70 <__ieee754_pow+0x218>)
 8007d42:	4598      	cmp	r8, r3
 8007d44:	d118      	bne.n	8007d78 <__ieee754_pow+0x120>
 8007d46:	f1b9 0f00 	cmp.w	r9, #0
 8007d4a:	f280 845a 	bge.w	8008602 <__ieee754_pow+0x9aa>
 8007d4e:	4948      	ldr	r1, [pc, #288]	; (8007e70 <__ieee754_pow+0x218>)
 8007d50:	4632      	mov	r2, r6
 8007d52:	463b      	mov	r3, r7
 8007d54:	2000      	movs	r0, #0
 8007d56:	f7f8 fd1d 	bl	8000794 <__aeabi_ddiv>
 8007d5a:	e7dd      	b.n	8007d18 <__ieee754_pow+0xc0>
 8007d5c:	f04f 0b02 	mov.w	fp, #2
 8007d60:	e7c4      	b.n	8007cec <__ieee754_pow+0x94>
 8007d62:	f04f 0b00 	mov.w	fp, #0
 8007d66:	e7c1      	b.n	8007cec <__ieee754_pow+0x94>
 8007d68:	f1b9 0f00 	cmp.w	r9, #0
 8007d6c:	dad2      	bge.n	8007d14 <__ieee754_pow+0xbc>
 8007d6e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007d72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007d76:	e7cf      	b.n	8007d18 <__ieee754_pow+0xc0>
 8007d78:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007d7c:	d106      	bne.n	8007d8c <__ieee754_pow+0x134>
 8007d7e:	4632      	mov	r2, r6
 8007d80:	463b      	mov	r3, r7
 8007d82:	4610      	mov	r0, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	f7f8 fbdb 	bl	8000540 <__aeabi_dmul>
 8007d8a:	e7c5      	b.n	8007d18 <__ieee754_pow+0xc0>
 8007d8c:	4b39      	ldr	r3, [pc, #228]	; (8007e74 <__ieee754_pow+0x21c>)
 8007d8e:	4599      	cmp	r9, r3
 8007d90:	d10a      	bne.n	8007da8 <__ieee754_pow+0x150>
 8007d92:	2d00      	cmp	r5, #0
 8007d94:	db08      	blt.n	8007da8 <__ieee754_pow+0x150>
 8007d96:	ec47 6b10 	vmov	d0, r6, r7
 8007d9a:	b011      	add	sp, #68	; 0x44
 8007d9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da0:	f000 bc68 	b.w	8008674 <__ieee754_sqrt>
 8007da4:	f04f 0b00 	mov.w	fp, #0
 8007da8:	ec47 6b10 	vmov	d0, r6, r7
 8007dac:	f000 fde6 	bl	800897c <fabs>
 8007db0:	ec51 0b10 	vmov	r0, r1, d0
 8007db4:	f1ba 0f00 	cmp.w	sl, #0
 8007db8:	d127      	bne.n	8007e0a <__ieee754_pow+0x1b2>
 8007dba:	b124      	cbz	r4, 8007dc6 <__ieee754_pow+0x16e>
 8007dbc:	4b2c      	ldr	r3, [pc, #176]	; (8007e70 <__ieee754_pow+0x218>)
 8007dbe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d121      	bne.n	8007e0a <__ieee754_pow+0x1b2>
 8007dc6:	f1b9 0f00 	cmp.w	r9, #0
 8007dca:	da05      	bge.n	8007dd8 <__ieee754_pow+0x180>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	4927      	ldr	r1, [pc, #156]	; (8007e70 <__ieee754_pow+0x218>)
 8007dd4:	f7f8 fcde 	bl	8000794 <__aeabi_ddiv>
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	da9d      	bge.n	8007d18 <__ieee754_pow+0xc0>
 8007ddc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007de0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007de4:	ea54 030b 	orrs.w	r3, r4, fp
 8007de8:	d108      	bne.n	8007dfc <__ieee754_pow+0x1a4>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4610      	mov	r0, r2
 8007df0:	4619      	mov	r1, r3
 8007df2:	f7f8 f9ed 	bl	80001d0 <__aeabi_dsub>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	e7ac      	b.n	8007d56 <__ieee754_pow+0xfe>
 8007dfc:	f1bb 0f01 	cmp.w	fp, #1
 8007e00:	d18a      	bne.n	8007d18 <__ieee754_pow+0xc0>
 8007e02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e06:	4619      	mov	r1, r3
 8007e08:	e786      	b.n	8007d18 <__ieee754_pow+0xc0>
 8007e0a:	0fed      	lsrs	r5, r5, #31
 8007e0c:	1e6b      	subs	r3, r5, #1
 8007e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e10:	ea5b 0303 	orrs.w	r3, fp, r3
 8007e14:	d102      	bne.n	8007e1c <__ieee754_pow+0x1c4>
 8007e16:	4632      	mov	r2, r6
 8007e18:	463b      	mov	r3, r7
 8007e1a:	e7e8      	b.n	8007dee <__ieee754_pow+0x196>
 8007e1c:	4b16      	ldr	r3, [pc, #88]	; (8007e78 <__ieee754_pow+0x220>)
 8007e1e:	4598      	cmp	r8, r3
 8007e20:	f340 80fe 	ble.w	8008020 <__ieee754_pow+0x3c8>
 8007e24:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007e28:	4598      	cmp	r8, r3
 8007e2a:	dd0a      	ble.n	8007e42 <__ieee754_pow+0x1ea>
 8007e2c:	4b0f      	ldr	r3, [pc, #60]	; (8007e6c <__ieee754_pow+0x214>)
 8007e2e:	429c      	cmp	r4, r3
 8007e30:	dc0d      	bgt.n	8007e4e <__ieee754_pow+0x1f6>
 8007e32:	f1b9 0f00 	cmp.w	r9, #0
 8007e36:	f6bf af6d 	bge.w	8007d14 <__ieee754_pow+0xbc>
 8007e3a:	a307      	add	r3, pc, #28	; (adr r3, 8007e58 <__ieee754_pow+0x200>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	e79f      	b.n	8007d82 <__ieee754_pow+0x12a>
 8007e42:	4b0e      	ldr	r3, [pc, #56]	; (8007e7c <__ieee754_pow+0x224>)
 8007e44:	429c      	cmp	r4, r3
 8007e46:	ddf4      	ble.n	8007e32 <__ieee754_pow+0x1da>
 8007e48:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <__ieee754_pow+0x218>)
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	dd18      	ble.n	8007e80 <__ieee754_pow+0x228>
 8007e4e:	f1b9 0f00 	cmp.w	r9, #0
 8007e52:	dcf2      	bgt.n	8007e3a <__ieee754_pow+0x1e2>
 8007e54:	e75e      	b.n	8007d14 <__ieee754_pow+0xbc>
 8007e56:	bf00      	nop
 8007e58:	8800759c 	.word	0x8800759c
 8007e5c:	7e37e43c 	.word	0x7e37e43c
 8007e60:	7ff00000 	.word	0x7ff00000
 8007e64:	08008c19 	.word	0x08008c19
 8007e68:	433fffff 	.word	0x433fffff
 8007e6c:	3fefffff 	.word	0x3fefffff
 8007e70:	3ff00000 	.word	0x3ff00000
 8007e74:	3fe00000 	.word	0x3fe00000
 8007e78:	41e00000 	.word	0x41e00000
 8007e7c:	3feffffe 	.word	0x3feffffe
 8007e80:	2200      	movs	r2, #0
 8007e82:	4b63      	ldr	r3, [pc, #396]	; (8008010 <__ieee754_pow+0x3b8>)
 8007e84:	f7f8 f9a4 	bl	80001d0 <__aeabi_dsub>
 8007e88:	a355      	add	r3, pc, #340	; (adr r3, 8007fe0 <__ieee754_pow+0x388>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	4604      	mov	r4, r0
 8007e90:	460d      	mov	r5, r1
 8007e92:	f7f8 fb55 	bl	8000540 <__aeabi_dmul>
 8007e96:	a354      	add	r3, pc, #336	; (adr r3, 8007fe8 <__ieee754_pow+0x390>)
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	460f      	mov	r7, r1
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	f7f8 fb4c 	bl	8000540 <__aeabi_dmul>
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eae:	4b59      	ldr	r3, [pc, #356]	; (8008014 <__ieee754_pow+0x3bc>)
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	f7f8 fb44 	bl	8000540 <__aeabi_dmul>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	a14c      	add	r1, pc, #304	; (adr r1, 8007ff0 <__ieee754_pow+0x398>)
 8007ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec2:	f7f8 f985 	bl	80001d0 <__aeabi_dsub>
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	462b      	mov	r3, r5
 8007eca:	f7f8 fb39 	bl	8000540 <__aeabi_dmul>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	4950      	ldr	r1, [pc, #320]	; (8008018 <__ieee754_pow+0x3c0>)
 8007ed6:	f7f8 f97b 	bl	80001d0 <__aeabi_dsub>
 8007eda:	4622      	mov	r2, r4
 8007edc:	462b      	mov	r3, r5
 8007ede:	4680      	mov	r8, r0
 8007ee0:	4689      	mov	r9, r1
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	f7f8 fb2b 	bl	8000540 <__aeabi_dmul>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4640      	mov	r0, r8
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	f7f8 fb25 	bl	8000540 <__aeabi_dmul>
 8007ef6:	a340      	add	r3, pc, #256	; (adr r3, 8007ff8 <__ieee754_pow+0x3a0>)
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f7f8 fb20 	bl	8000540 <__aeabi_dmul>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f08:	f7f8 f962 	bl	80001d0 <__aeabi_dsub>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4604      	mov	r4, r0
 8007f12:	460d      	mov	r5, r1
 8007f14:	4630      	mov	r0, r6
 8007f16:	4639      	mov	r1, r7
 8007f18:	f7f8 f95c 	bl	80001d4 <__adddf3>
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f22:	4632      	mov	r2, r6
 8007f24:	463b      	mov	r3, r7
 8007f26:	f7f8 f953 	bl	80001d0 <__aeabi_dsub>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4620      	mov	r0, r4
 8007f30:	4629      	mov	r1, r5
 8007f32:	f7f8 f94d 	bl	80001d0 <__aeabi_dsub>
 8007f36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f38:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460f      	mov	r7, r1
 8007f42:	f040 81eb 	bne.w	800831c <__ieee754_pow+0x6c4>
 8007f46:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008000 <__ieee754_pow+0x3a8>
 8007f4a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007f4e:	2400      	movs	r4, #0
 8007f50:	4622      	mov	r2, r4
 8007f52:	462b      	mov	r3, r5
 8007f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f5c:	f7f8 f938 	bl	80001d0 <__aeabi_dsub>
 8007f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f64:	f7f8 faec 	bl	8000540 <__aeabi_dmul>
 8007f68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	4689      	mov	r9, r1
 8007f70:	4630      	mov	r0, r6
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f8 fae4 	bl	8000540 <__aeabi_dmul>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4640      	mov	r0, r8
 8007f7e:	4649      	mov	r1, r9
 8007f80:	f7f8 f928 	bl	80001d4 <__adddf3>
 8007f84:	4622      	mov	r2, r4
 8007f86:	462b      	mov	r3, r5
 8007f88:	4680      	mov	r8, r0
 8007f8a:	4689      	mov	r9, r1
 8007f8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f90:	f7f8 fad6 	bl	8000540 <__aeabi_dmul>
 8007f94:	460b      	mov	r3, r1
 8007f96:	4604      	mov	r4, r0
 8007f98:	460d      	mov	r5, r1
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	e9cd 4500 	strd	r4, r5, [sp]
 8007fa4:	f7f8 f916 	bl	80001d4 <__adddf3>
 8007fa8:	4b1c      	ldr	r3, [pc, #112]	; (800801c <__ieee754_pow+0x3c4>)
 8007faa:	4299      	cmp	r1, r3
 8007fac:	4606      	mov	r6, r0
 8007fae:	460f      	mov	r7, r1
 8007fb0:	468b      	mov	fp, r1
 8007fb2:	f340 82f7 	ble.w	80085a4 <__ieee754_pow+0x94c>
 8007fb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007fba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007fbe:	4303      	orrs	r3, r0
 8007fc0:	f000 81ea 	beq.w	8008398 <__ieee754_pow+0x740>
 8007fc4:	a310      	add	r3, pc, #64	; (adr r3, 8008008 <__ieee754_pow+0x3b0>)
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fce:	f7f8 fab7 	bl	8000540 <__aeabi_dmul>
 8007fd2:	a30d      	add	r3, pc, #52	; (adr r3, 8008008 <__ieee754_pow+0x3b0>)
 8007fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd8:	e6d5      	b.n	8007d86 <__ieee754_pow+0x12e>
 8007fda:	bf00      	nop
 8007fdc:	f3af 8000 	nop.w
 8007fe0:	60000000 	.word	0x60000000
 8007fe4:	3ff71547 	.word	0x3ff71547
 8007fe8:	f85ddf44 	.word	0xf85ddf44
 8007fec:	3e54ae0b 	.word	0x3e54ae0b
 8007ff0:	55555555 	.word	0x55555555
 8007ff4:	3fd55555 	.word	0x3fd55555
 8007ff8:	652b82fe 	.word	0x652b82fe
 8007ffc:	3ff71547 	.word	0x3ff71547
 8008000:	00000000 	.word	0x00000000
 8008004:	bff00000 	.word	0xbff00000
 8008008:	8800759c 	.word	0x8800759c
 800800c:	7e37e43c 	.word	0x7e37e43c
 8008010:	3ff00000 	.word	0x3ff00000
 8008014:	3fd00000 	.word	0x3fd00000
 8008018:	3fe00000 	.word	0x3fe00000
 800801c:	408fffff 	.word	0x408fffff
 8008020:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008024:	f04f 0200 	mov.w	r2, #0
 8008028:	da05      	bge.n	8008036 <__ieee754_pow+0x3de>
 800802a:	4bd3      	ldr	r3, [pc, #844]	; (8008378 <__ieee754_pow+0x720>)
 800802c:	f7f8 fa88 	bl	8000540 <__aeabi_dmul>
 8008030:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008034:	460c      	mov	r4, r1
 8008036:	1523      	asrs	r3, r4, #20
 8008038:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800803c:	4413      	add	r3, r2
 800803e:	9309      	str	r3, [sp, #36]	; 0x24
 8008040:	4bce      	ldr	r3, [pc, #824]	; (800837c <__ieee754_pow+0x724>)
 8008042:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008046:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800804a:	429c      	cmp	r4, r3
 800804c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008050:	dd08      	ble.n	8008064 <__ieee754_pow+0x40c>
 8008052:	4bcb      	ldr	r3, [pc, #812]	; (8008380 <__ieee754_pow+0x728>)
 8008054:	429c      	cmp	r4, r3
 8008056:	f340 815e 	ble.w	8008316 <__ieee754_pow+0x6be>
 800805a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800805c:	3301      	adds	r3, #1
 800805e:	9309      	str	r3, [sp, #36]	; 0x24
 8008060:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008064:	f04f 0a00 	mov.w	sl, #0
 8008068:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800806c:	930c      	str	r3, [sp, #48]	; 0x30
 800806e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008070:	4bc4      	ldr	r3, [pc, #784]	; (8008384 <__ieee754_pow+0x72c>)
 8008072:	4413      	add	r3, r2
 8008074:	ed93 7b00 	vldr	d7, [r3]
 8008078:	4629      	mov	r1, r5
 800807a:	ec53 2b17 	vmov	r2, r3, d7
 800807e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008082:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008086:	f7f8 f8a3 	bl	80001d0 <__aeabi_dsub>
 800808a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800808e:	4606      	mov	r6, r0
 8008090:	460f      	mov	r7, r1
 8008092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008096:	f7f8 f89d 	bl	80001d4 <__adddf3>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	2000      	movs	r0, #0
 80080a0:	49b9      	ldr	r1, [pc, #740]	; (8008388 <__ieee754_pow+0x730>)
 80080a2:	f7f8 fb77 	bl	8000794 <__aeabi_ddiv>
 80080a6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4630      	mov	r0, r6
 80080b0:	4639      	mov	r1, r7
 80080b2:	f7f8 fa45 	bl	8000540 <__aeabi_dmul>
 80080b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080ba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80080be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080c2:	2300      	movs	r3, #0
 80080c4:	9302      	str	r3, [sp, #8]
 80080c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80080ca:	106d      	asrs	r5, r5, #1
 80080cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80080d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80080d4:	2200      	movs	r2, #0
 80080d6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	4614      	mov	r4, r2
 80080e0:	461d      	mov	r5, r3
 80080e2:	f7f8 fa2d 	bl	8000540 <__aeabi_dmul>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	4630      	mov	r0, r6
 80080ec:	4639      	mov	r1, r7
 80080ee:	f7f8 f86f 	bl	80001d0 <__aeabi_dsub>
 80080f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080f6:	4606      	mov	r6, r0
 80080f8:	460f      	mov	r7, r1
 80080fa:	4620      	mov	r0, r4
 80080fc:	4629      	mov	r1, r5
 80080fe:	f7f8 f867 	bl	80001d0 <__aeabi_dsub>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800810a:	f7f8 f861 	bl	80001d0 <__aeabi_dsub>
 800810e:	4642      	mov	r2, r8
 8008110:	464b      	mov	r3, r9
 8008112:	f7f8 fa15 	bl	8000540 <__aeabi_dmul>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4630      	mov	r0, r6
 800811c:	4639      	mov	r1, r7
 800811e:	f7f8 f857 	bl	80001d0 <__aeabi_dsub>
 8008122:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008126:	f7f8 fa0b 	bl	8000540 <__aeabi_dmul>
 800812a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800812e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008132:	4610      	mov	r0, r2
 8008134:	4619      	mov	r1, r3
 8008136:	f7f8 fa03 	bl	8000540 <__aeabi_dmul>
 800813a:	a37b      	add	r3, pc, #492	; (adr r3, 8008328 <__ieee754_pow+0x6d0>)
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	4604      	mov	r4, r0
 8008142:	460d      	mov	r5, r1
 8008144:	f7f8 f9fc 	bl	8000540 <__aeabi_dmul>
 8008148:	a379      	add	r3, pc, #484	; (adr r3, 8008330 <__ieee754_pow+0x6d8>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f7f8 f841 	bl	80001d4 <__adddf3>
 8008152:	4622      	mov	r2, r4
 8008154:	462b      	mov	r3, r5
 8008156:	f7f8 f9f3 	bl	8000540 <__aeabi_dmul>
 800815a:	a377      	add	r3, pc, #476	; (adr r3, 8008338 <__ieee754_pow+0x6e0>)
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f7f8 f838 	bl	80001d4 <__adddf3>
 8008164:	4622      	mov	r2, r4
 8008166:	462b      	mov	r3, r5
 8008168:	f7f8 f9ea 	bl	8000540 <__aeabi_dmul>
 800816c:	a374      	add	r3, pc, #464	; (adr r3, 8008340 <__ieee754_pow+0x6e8>)
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	f7f8 f82f 	bl	80001d4 <__adddf3>
 8008176:	4622      	mov	r2, r4
 8008178:	462b      	mov	r3, r5
 800817a:	f7f8 f9e1 	bl	8000540 <__aeabi_dmul>
 800817e:	a372      	add	r3, pc, #456	; (adr r3, 8008348 <__ieee754_pow+0x6f0>)
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	f7f8 f826 	bl	80001d4 <__adddf3>
 8008188:	4622      	mov	r2, r4
 800818a:	462b      	mov	r3, r5
 800818c:	f7f8 f9d8 	bl	8000540 <__aeabi_dmul>
 8008190:	a36f      	add	r3, pc, #444	; (adr r3, 8008350 <__ieee754_pow+0x6f8>)
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f7f8 f81d 	bl	80001d4 <__adddf3>
 800819a:	4622      	mov	r2, r4
 800819c:	4606      	mov	r6, r0
 800819e:	460f      	mov	r7, r1
 80081a0:	462b      	mov	r3, r5
 80081a2:	4620      	mov	r0, r4
 80081a4:	4629      	mov	r1, r5
 80081a6:	f7f8 f9cb 	bl	8000540 <__aeabi_dmul>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4630      	mov	r0, r6
 80081b0:	4639      	mov	r1, r7
 80081b2:	f7f8 f9c5 	bl	8000540 <__aeabi_dmul>
 80081b6:	4642      	mov	r2, r8
 80081b8:	4604      	mov	r4, r0
 80081ba:	460d      	mov	r5, r1
 80081bc:	464b      	mov	r3, r9
 80081be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081c2:	f7f8 f807 	bl	80001d4 <__adddf3>
 80081c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081ca:	f7f8 f9b9 	bl	8000540 <__aeabi_dmul>
 80081ce:	4622      	mov	r2, r4
 80081d0:	462b      	mov	r3, r5
 80081d2:	f7f7 ffff 	bl	80001d4 <__adddf3>
 80081d6:	4642      	mov	r2, r8
 80081d8:	4606      	mov	r6, r0
 80081da:	460f      	mov	r7, r1
 80081dc:	464b      	mov	r3, r9
 80081de:	4640      	mov	r0, r8
 80081e0:	4649      	mov	r1, r9
 80081e2:	f7f8 f9ad 	bl	8000540 <__aeabi_dmul>
 80081e6:	2200      	movs	r2, #0
 80081e8:	4b68      	ldr	r3, [pc, #416]	; (800838c <__ieee754_pow+0x734>)
 80081ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80081ee:	f7f7 fff1 	bl	80001d4 <__adddf3>
 80081f2:	4632      	mov	r2, r6
 80081f4:	463b      	mov	r3, r7
 80081f6:	f7f7 ffed 	bl	80001d4 <__adddf3>
 80081fa:	9802      	ldr	r0, [sp, #8]
 80081fc:	460d      	mov	r5, r1
 80081fe:	4604      	mov	r4, r0
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4640      	mov	r0, r8
 8008206:	4649      	mov	r1, r9
 8008208:	f7f8 f99a 	bl	8000540 <__aeabi_dmul>
 800820c:	2200      	movs	r2, #0
 800820e:	4680      	mov	r8, r0
 8008210:	4689      	mov	r9, r1
 8008212:	4b5e      	ldr	r3, [pc, #376]	; (800838c <__ieee754_pow+0x734>)
 8008214:	4620      	mov	r0, r4
 8008216:	4629      	mov	r1, r5
 8008218:	f7f7 ffda 	bl	80001d0 <__aeabi_dsub>
 800821c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008220:	f7f7 ffd6 	bl	80001d0 <__aeabi_dsub>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4630      	mov	r0, r6
 800822a:	4639      	mov	r1, r7
 800822c:	f7f7 ffd0 	bl	80001d0 <__aeabi_dsub>
 8008230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008234:	f7f8 f984 	bl	8000540 <__aeabi_dmul>
 8008238:	4622      	mov	r2, r4
 800823a:	4606      	mov	r6, r0
 800823c:	460f      	mov	r7, r1
 800823e:	462b      	mov	r3, r5
 8008240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008244:	f7f8 f97c 	bl	8000540 <__aeabi_dmul>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4630      	mov	r0, r6
 800824e:	4639      	mov	r1, r7
 8008250:	f7f7 ffc0 	bl	80001d4 <__adddf3>
 8008254:	4606      	mov	r6, r0
 8008256:	460f      	mov	r7, r1
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4640      	mov	r0, r8
 800825e:	4649      	mov	r1, r9
 8008260:	f7f7 ffb8 	bl	80001d4 <__adddf3>
 8008264:	9802      	ldr	r0, [sp, #8]
 8008266:	a33c      	add	r3, pc, #240	; (adr r3, 8008358 <__ieee754_pow+0x700>)
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	4604      	mov	r4, r0
 800826e:	460d      	mov	r5, r1
 8008270:	f7f8 f966 	bl	8000540 <__aeabi_dmul>
 8008274:	4642      	mov	r2, r8
 8008276:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800827a:	464b      	mov	r3, r9
 800827c:	4620      	mov	r0, r4
 800827e:	4629      	mov	r1, r5
 8008280:	f7f7 ffa6 	bl	80001d0 <__aeabi_dsub>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4630      	mov	r0, r6
 800828a:	4639      	mov	r1, r7
 800828c:	f7f7 ffa0 	bl	80001d0 <__aeabi_dsub>
 8008290:	a333      	add	r3, pc, #204	; (adr r3, 8008360 <__ieee754_pow+0x708>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f8 f953 	bl	8000540 <__aeabi_dmul>
 800829a:	a333      	add	r3, pc, #204	; (adr r3, 8008368 <__ieee754_pow+0x710>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	4606      	mov	r6, r0
 80082a2:	460f      	mov	r7, r1
 80082a4:	4620      	mov	r0, r4
 80082a6:	4629      	mov	r1, r5
 80082a8:	f7f8 f94a 	bl	8000540 <__aeabi_dmul>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4630      	mov	r0, r6
 80082b2:	4639      	mov	r1, r7
 80082b4:	f7f7 ff8e 	bl	80001d4 <__adddf3>
 80082b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ba:	4b35      	ldr	r3, [pc, #212]	; (8008390 <__ieee754_pow+0x738>)
 80082bc:	4413      	add	r3, r2
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f7 ff87 	bl	80001d4 <__adddf3>
 80082c6:	4604      	mov	r4, r0
 80082c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ca:	460d      	mov	r5, r1
 80082cc:	f7f8 f8ce 	bl	800046c <__aeabi_i2d>
 80082d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082d2:	4b30      	ldr	r3, [pc, #192]	; (8008394 <__ieee754_pow+0x73c>)
 80082d4:	4413      	add	r3, r2
 80082d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082da:	4606      	mov	r6, r0
 80082dc:	460f      	mov	r7, r1
 80082de:	4622      	mov	r2, r4
 80082e0:	462b      	mov	r3, r5
 80082e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082e6:	f7f7 ff75 	bl	80001d4 <__adddf3>
 80082ea:	4642      	mov	r2, r8
 80082ec:	464b      	mov	r3, r9
 80082ee:	f7f7 ff71 	bl	80001d4 <__adddf3>
 80082f2:	4632      	mov	r2, r6
 80082f4:	463b      	mov	r3, r7
 80082f6:	f7f7 ff6d 	bl	80001d4 <__adddf3>
 80082fa:	9802      	ldr	r0, [sp, #8]
 80082fc:	4632      	mov	r2, r6
 80082fe:	463b      	mov	r3, r7
 8008300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008304:	f7f7 ff64 	bl	80001d0 <__aeabi_dsub>
 8008308:	4642      	mov	r2, r8
 800830a:	464b      	mov	r3, r9
 800830c:	f7f7 ff60 	bl	80001d0 <__aeabi_dsub>
 8008310:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008314:	e607      	b.n	8007f26 <__ieee754_pow+0x2ce>
 8008316:	f04f 0a01 	mov.w	sl, #1
 800831a:	e6a5      	b.n	8008068 <__ieee754_pow+0x410>
 800831c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008370 <__ieee754_pow+0x718>
 8008320:	e613      	b.n	8007f4a <__ieee754_pow+0x2f2>
 8008322:	bf00      	nop
 8008324:	f3af 8000 	nop.w
 8008328:	4a454eef 	.word	0x4a454eef
 800832c:	3fca7e28 	.word	0x3fca7e28
 8008330:	93c9db65 	.word	0x93c9db65
 8008334:	3fcd864a 	.word	0x3fcd864a
 8008338:	a91d4101 	.word	0xa91d4101
 800833c:	3fd17460 	.word	0x3fd17460
 8008340:	518f264d 	.word	0x518f264d
 8008344:	3fd55555 	.word	0x3fd55555
 8008348:	db6fabff 	.word	0xdb6fabff
 800834c:	3fdb6db6 	.word	0x3fdb6db6
 8008350:	33333303 	.word	0x33333303
 8008354:	3fe33333 	.word	0x3fe33333
 8008358:	e0000000 	.word	0xe0000000
 800835c:	3feec709 	.word	0x3feec709
 8008360:	dc3a03fd 	.word	0xdc3a03fd
 8008364:	3feec709 	.word	0x3feec709
 8008368:	145b01f5 	.word	0x145b01f5
 800836c:	be3e2fe0 	.word	0xbe3e2fe0
 8008370:	00000000 	.word	0x00000000
 8008374:	3ff00000 	.word	0x3ff00000
 8008378:	43400000 	.word	0x43400000
 800837c:	0003988e 	.word	0x0003988e
 8008380:	000bb679 	.word	0x000bb679
 8008384:	08008d28 	.word	0x08008d28
 8008388:	3ff00000 	.word	0x3ff00000
 800838c:	40080000 	.word	0x40080000
 8008390:	08008d48 	.word	0x08008d48
 8008394:	08008d38 	.word	0x08008d38
 8008398:	a3b4      	add	r3, pc, #720	; (adr r3, 800866c <__ieee754_pow+0xa14>)
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	4640      	mov	r0, r8
 80083a0:	4649      	mov	r1, r9
 80083a2:	f7f7 ff17 	bl	80001d4 <__adddf3>
 80083a6:	4622      	mov	r2, r4
 80083a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083ac:	462b      	mov	r3, r5
 80083ae:	4630      	mov	r0, r6
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7f7 ff0d 	bl	80001d0 <__aeabi_dsub>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083be:	f7f8 fb4f 	bl	8000a60 <__aeabi_dcmpgt>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	f47f adfe 	bne.w	8007fc4 <__ieee754_pow+0x36c>
 80083c8:	4aa3      	ldr	r2, [pc, #652]	; (8008658 <__ieee754_pow+0xa00>)
 80083ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083ce:	4293      	cmp	r3, r2
 80083d0:	f340 810a 	ble.w	80085e8 <__ieee754_pow+0x990>
 80083d4:	151b      	asrs	r3, r3, #20
 80083d6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80083da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80083de:	fa4a f303 	asr.w	r3, sl, r3
 80083e2:	445b      	add	r3, fp
 80083e4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80083e8:	4e9c      	ldr	r6, [pc, #624]	; (800865c <__ieee754_pow+0xa04>)
 80083ea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80083ee:	4116      	asrs	r6, r2
 80083f0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80083f4:	2000      	movs	r0, #0
 80083f6:	ea23 0106 	bic.w	r1, r3, r6
 80083fa:	f1c2 0214 	rsb	r2, r2, #20
 80083fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008402:	fa4a fa02 	asr.w	sl, sl, r2
 8008406:	f1bb 0f00 	cmp.w	fp, #0
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	4620      	mov	r0, r4
 8008410:	4629      	mov	r1, r5
 8008412:	bfb8      	it	lt
 8008414:	f1ca 0a00 	rsblt	sl, sl, #0
 8008418:	f7f7 feda 	bl	80001d0 <__aeabi_dsub>
 800841c:	e9cd 0100 	strd	r0, r1, [sp]
 8008420:	4642      	mov	r2, r8
 8008422:	464b      	mov	r3, r9
 8008424:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008428:	f7f7 fed4 	bl	80001d4 <__adddf3>
 800842c:	2000      	movs	r0, #0
 800842e:	a378      	add	r3, pc, #480	; (adr r3, 8008610 <__ieee754_pow+0x9b8>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	4604      	mov	r4, r0
 8008436:	460d      	mov	r5, r1
 8008438:	f7f8 f882 	bl	8000540 <__aeabi_dmul>
 800843c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008440:	4606      	mov	r6, r0
 8008442:	460f      	mov	r7, r1
 8008444:	4620      	mov	r0, r4
 8008446:	4629      	mov	r1, r5
 8008448:	f7f7 fec2 	bl	80001d0 <__aeabi_dsub>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4640      	mov	r0, r8
 8008452:	4649      	mov	r1, r9
 8008454:	f7f7 febc 	bl	80001d0 <__aeabi_dsub>
 8008458:	a36f      	add	r3, pc, #444	; (adr r3, 8008618 <__ieee754_pow+0x9c0>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f7f8 f86f 	bl	8000540 <__aeabi_dmul>
 8008462:	a36f      	add	r3, pc, #444	; (adr r3, 8008620 <__ieee754_pow+0x9c8>)
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	4680      	mov	r8, r0
 800846a:	4689      	mov	r9, r1
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f8 f866 	bl	8000540 <__aeabi_dmul>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4640      	mov	r0, r8
 800847a:	4649      	mov	r1, r9
 800847c:	f7f7 feaa 	bl	80001d4 <__adddf3>
 8008480:	4604      	mov	r4, r0
 8008482:	460d      	mov	r5, r1
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4630      	mov	r0, r6
 800848a:	4639      	mov	r1, r7
 800848c:	f7f7 fea2 	bl	80001d4 <__adddf3>
 8008490:	4632      	mov	r2, r6
 8008492:	463b      	mov	r3, r7
 8008494:	4680      	mov	r8, r0
 8008496:	4689      	mov	r9, r1
 8008498:	f7f7 fe9a 	bl	80001d0 <__aeabi_dsub>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4620      	mov	r0, r4
 80084a2:	4629      	mov	r1, r5
 80084a4:	f7f7 fe94 	bl	80001d0 <__aeabi_dsub>
 80084a8:	4642      	mov	r2, r8
 80084aa:	4606      	mov	r6, r0
 80084ac:	460f      	mov	r7, r1
 80084ae:	464b      	mov	r3, r9
 80084b0:	4640      	mov	r0, r8
 80084b2:	4649      	mov	r1, r9
 80084b4:	f7f8 f844 	bl	8000540 <__aeabi_dmul>
 80084b8:	a35b      	add	r3, pc, #364	; (adr r3, 8008628 <__ieee754_pow+0x9d0>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	4604      	mov	r4, r0
 80084c0:	460d      	mov	r5, r1
 80084c2:	f7f8 f83d 	bl	8000540 <__aeabi_dmul>
 80084c6:	a35a      	add	r3, pc, #360	; (adr r3, 8008630 <__ieee754_pow+0x9d8>)
 80084c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084cc:	f7f7 fe80 	bl	80001d0 <__aeabi_dsub>
 80084d0:	4622      	mov	r2, r4
 80084d2:	462b      	mov	r3, r5
 80084d4:	f7f8 f834 	bl	8000540 <__aeabi_dmul>
 80084d8:	a357      	add	r3, pc, #348	; (adr r3, 8008638 <__ieee754_pow+0x9e0>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f7f7 fe79 	bl	80001d4 <__adddf3>
 80084e2:	4622      	mov	r2, r4
 80084e4:	462b      	mov	r3, r5
 80084e6:	f7f8 f82b 	bl	8000540 <__aeabi_dmul>
 80084ea:	a355      	add	r3, pc, #340	; (adr r3, 8008640 <__ieee754_pow+0x9e8>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f7f7 fe6e 	bl	80001d0 <__aeabi_dsub>
 80084f4:	4622      	mov	r2, r4
 80084f6:	462b      	mov	r3, r5
 80084f8:	f7f8 f822 	bl	8000540 <__aeabi_dmul>
 80084fc:	a352      	add	r3, pc, #328	; (adr r3, 8008648 <__ieee754_pow+0x9f0>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f7f7 fe67 	bl	80001d4 <__adddf3>
 8008506:	4622      	mov	r2, r4
 8008508:	462b      	mov	r3, r5
 800850a:	f7f8 f819 	bl	8000540 <__aeabi_dmul>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	4640      	mov	r0, r8
 8008514:	4649      	mov	r1, r9
 8008516:	f7f7 fe5b 	bl	80001d0 <__aeabi_dsub>
 800851a:	4604      	mov	r4, r0
 800851c:	460d      	mov	r5, r1
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4640      	mov	r0, r8
 8008524:	4649      	mov	r1, r9
 8008526:	f7f8 f80b 	bl	8000540 <__aeabi_dmul>
 800852a:	2200      	movs	r2, #0
 800852c:	e9cd 0100 	strd	r0, r1, [sp]
 8008530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008534:	4620      	mov	r0, r4
 8008536:	4629      	mov	r1, r5
 8008538:	f7f7 fe4a 	bl	80001d0 <__aeabi_dsub>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008544:	f7f8 f926 	bl	8000794 <__aeabi_ddiv>
 8008548:	4632      	mov	r2, r6
 800854a:	4604      	mov	r4, r0
 800854c:	460d      	mov	r5, r1
 800854e:	463b      	mov	r3, r7
 8008550:	4640      	mov	r0, r8
 8008552:	4649      	mov	r1, r9
 8008554:	f7f7 fff4 	bl	8000540 <__aeabi_dmul>
 8008558:	4632      	mov	r2, r6
 800855a:	463b      	mov	r3, r7
 800855c:	f7f7 fe3a 	bl	80001d4 <__adddf3>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4620      	mov	r0, r4
 8008566:	4629      	mov	r1, r5
 8008568:	f7f7 fe32 	bl	80001d0 <__aeabi_dsub>
 800856c:	4642      	mov	r2, r8
 800856e:	464b      	mov	r3, r9
 8008570:	f7f7 fe2e 	bl	80001d0 <__aeabi_dsub>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	2000      	movs	r0, #0
 800857a:	4939      	ldr	r1, [pc, #228]	; (8008660 <__ieee754_pow+0xa08>)
 800857c:	f7f7 fe28 	bl	80001d0 <__aeabi_dsub>
 8008580:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008584:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	da2f      	bge.n	80085ee <__ieee754_pow+0x996>
 800858e:	4650      	mov	r0, sl
 8008590:	ec43 2b10 	vmov	d0, r2, r3
 8008594:	f000 fa94 	bl	8008ac0 <scalbn>
 8008598:	ec51 0b10 	vmov	r0, r1, d0
 800859c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085a0:	f7ff bbf1 	b.w	8007d86 <__ieee754_pow+0x12e>
 80085a4:	4b2f      	ldr	r3, [pc, #188]	; (8008664 <__ieee754_pow+0xa0c>)
 80085a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80085aa:	429e      	cmp	r6, r3
 80085ac:	f77f af0c 	ble.w	80083c8 <__ieee754_pow+0x770>
 80085b0:	4b2d      	ldr	r3, [pc, #180]	; (8008668 <__ieee754_pow+0xa10>)
 80085b2:	440b      	add	r3, r1
 80085b4:	4303      	orrs	r3, r0
 80085b6:	d00b      	beq.n	80085d0 <__ieee754_pow+0x978>
 80085b8:	a325      	add	r3, pc, #148	; (adr r3, 8008650 <__ieee754_pow+0x9f8>)
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c2:	f7f7 ffbd 	bl	8000540 <__aeabi_dmul>
 80085c6:	a322      	add	r3, pc, #136	; (adr r3, 8008650 <__ieee754_pow+0x9f8>)
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f7ff bbdb 	b.w	8007d86 <__ieee754_pow+0x12e>
 80085d0:	4622      	mov	r2, r4
 80085d2:	462b      	mov	r3, r5
 80085d4:	f7f7 fdfc 	bl	80001d0 <__aeabi_dsub>
 80085d8:	4642      	mov	r2, r8
 80085da:	464b      	mov	r3, r9
 80085dc:	f7f8 fa36 	bl	8000a4c <__aeabi_dcmpge>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	f43f aef1 	beq.w	80083c8 <__ieee754_pow+0x770>
 80085e6:	e7e7      	b.n	80085b8 <__ieee754_pow+0x960>
 80085e8:	f04f 0a00 	mov.w	sl, #0
 80085ec:	e718      	b.n	8008420 <__ieee754_pow+0x7c8>
 80085ee:	4621      	mov	r1, r4
 80085f0:	e7d4      	b.n	800859c <__ieee754_pow+0x944>
 80085f2:	2000      	movs	r0, #0
 80085f4:	491a      	ldr	r1, [pc, #104]	; (8008660 <__ieee754_pow+0xa08>)
 80085f6:	f7ff bb8f 	b.w	8007d18 <__ieee754_pow+0xc0>
 80085fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085fe:	f7ff bb8b 	b.w	8007d18 <__ieee754_pow+0xc0>
 8008602:	4630      	mov	r0, r6
 8008604:	4639      	mov	r1, r7
 8008606:	f7ff bb87 	b.w	8007d18 <__ieee754_pow+0xc0>
 800860a:	4693      	mov	fp, r2
 800860c:	f7ff bb98 	b.w	8007d40 <__ieee754_pow+0xe8>
 8008610:	00000000 	.word	0x00000000
 8008614:	3fe62e43 	.word	0x3fe62e43
 8008618:	fefa39ef 	.word	0xfefa39ef
 800861c:	3fe62e42 	.word	0x3fe62e42
 8008620:	0ca86c39 	.word	0x0ca86c39
 8008624:	be205c61 	.word	0xbe205c61
 8008628:	72bea4d0 	.word	0x72bea4d0
 800862c:	3e663769 	.word	0x3e663769
 8008630:	c5d26bf1 	.word	0xc5d26bf1
 8008634:	3ebbbd41 	.word	0x3ebbbd41
 8008638:	af25de2c 	.word	0xaf25de2c
 800863c:	3f11566a 	.word	0x3f11566a
 8008640:	16bebd93 	.word	0x16bebd93
 8008644:	3f66c16c 	.word	0x3f66c16c
 8008648:	5555553e 	.word	0x5555553e
 800864c:	3fc55555 	.word	0x3fc55555
 8008650:	c2f8f359 	.word	0xc2f8f359
 8008654:	01a56e1f 	.word	0x01a56e1f
 8008658:	3fe00000 	.word	0x3fe00000
 800865c:	000fffff 	.word	0x000fffff
 8008660:	3ff00000 	.word	0x3ff00000
 8008664:	4090cbff 	.word	0x4090cbff
 8008668:	3f6f3400 	.word	0x3f6f3400
 800866c:	652b82fe 	.word	0x652b82fe
 8008670:	3c971547 	.word	0x3c971547

08008674 <__ieee754_sqrt>:
 8008674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008678:	4955      	ldr	r1, [pc, #340]	; (80087d0 <__ieee754_sqrt+0x15c>)
 800867a:	ec55 4b10 	vmov	r4, r5, d0
 800867e:	43a9      	bics	r1, r5
 8008680:	462b      	mov	r3, r5
 8008682:	462a      	mov	r2, r5
 8008684:	d112      	bne.n	80086ac <__ieee754_sqrt+0x38>
 8008686:	ee10 2a10 	vmov	r2, s0
 800868a:	ee10 0a10 	vmov	r0, s0
 800868e:	4629      	mov	r1, r5
 8008690:	f7f7 ff56 	bl	8000540 <__aeabi_dmul>
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	4620      	mov	r0, r4
 800869a:	4629      	mov	r1, r5
 800869c:	f7f7 fd9a 	bl	80001d4 <__adddf3>
 80086a0:	4604      	mov	r4, r0
 80086a2:	460d      	mov	r5, r1
 80086a4:	ec45 4b10 	vmov	d0, r4, r5
 80086a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ac:	2d00      	cmp	r5, #0
 80086ae:	ee10 0a10 	vmov	r0, s0
 80086b2:	4621      	mov	r1, r4
 80086b4:	dc0f      	bgt.n	80086d6 <__ieee754_sqrt+0x62>
 80086b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80086ba:	4330      	orrs	r0, r6
 80086bc:	d0f2      	beq.n	80086a4 <__ieee754_sqrt+0x30>
 80086be:	b155      	cbz	r5, 80086d6 <__ieee754_sqrt+0x62>
 80086c0:	ee10 2a10 	vmov	r2, s0
 80086c4:	4620      	mov	r0, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	f7f7 fd82 	bl	80001d0 <__aeabi_dsub>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	f7f8 f860 	bl	8000794 <__aeabi_ddiv>
 80086d4:	e7e4      	b.n	80086a0 <__ieee754_sqrt+0x2c>
 80086d6:	151b      	asrs	r3, r3, #20
 80086d8:	d073      	beq.n	80087c2 <__ieee754_sqrt+0x14e>
 80086da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80086de:	07dd      	lsls	r5, r3, #31
 80086e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80086e4:	bf48      	it	mi
 80086e6:	0fc8      	lsrmi	r0, r1, #31
 80086e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80086ec:	bf44      	itt	mi
 80086ee:	0049      	lslmi	r1, r1, #1
 80086f0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80086f4:	2500      	movs	r5, #0
 80086f6:	1058      	asrs	r0, r3, #1
 80086f8:	0fcb      	lsrs	r3, r1, #31
 80086fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80086fe:	0049      	lsls	r1, r1, #1
 8008700:	2316      	movs	r3, #22
 8008702:	462c      	mov	r4, r5
 8008704:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008708:	19a7      	adds	r7, r4, r6
 800870a:	4297      	cmp	r7, r2
 800870c:	bfde      	ittt	le
 800870e:	19bc      	addle	r4, r7, r6
 8008710:	1bd2      	suble	r2, r2, r7
 8008712:	19ad      	addle	r5, r5, r6
 8008714:	0fcf      	lsrs	r7, r1, #31
 8008716:	3b01      	subs	r3, #1
 8008718:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800871c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008720:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008724:	d1f0      	bne.n	8008708 <__ieee754_sqrt+0x94>
 8008726:	f04f 0c20 	mov.w	ip, #32
 800872a:	469e      	mov	lr, r3
 800872c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008730:	42a2      	cmp	r2, r4
 8008732:	eb06 070e 	add.w	r7, r6, lr
 8008736:	dc02      	bgt.n	800873e <__ieee754_sqrt+0xca>
 8008738:	d112      	bne.n	8008760 <__ieee754_sqrt+0xec>
 800873a:	428f      	cmp	r7, r1
 800873c:	d810      	bhi.n	8008760 <__ieee754_sqrt+0xec>
 800873e:	2f00      	cmp	r7, #0
 8008740:	eb07 0e06 	add.w	lr, r7, r6
 8008744:	da42      	bge.n	80087cc <__ieee754_sqrt+0x158>
 8008746:	f1be 0f00 	cmp.w	lr, #0
 800874a:	db3f      	blt.n	80087cc <__ieee754_sqrt+0x158>
 800874c:	f104 0801 	add.w	r8, r4, #1
 8008750:	1b12      	subs	r2, r2, r4
 8008752:	428f      	cmp	r7, r1
 8008754:	bf88      	it	hi
 8008756:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800875a:	1bc9      	subs	r1, r1, r7
 800875c:	4433      	add	r3, r6
 800875e:	4644      	mov	r4, r8
 8008760:	0052      	lsls	r2, r2, #1
 8008762:	f1bc 0c01 	subs.w	ip, ip, #1
 8008766:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800876a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800876e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008772:	d1dd      	bne.n	8008730 <__ieee754_sqrt+0xbc>
 8008774:	430a      	orrs	r2, r1
 8008776:	d006      	beq.n	8008786 <__ieee754_sqrt+0x112>
 8008778:	1c5c      	adds	r4, r3, #1
 800877a:	bf13      	iteet	ne
 800877c:	3301      	addne	r3, #1
 800877e:	3501      	addeq	r5, #1
 8008780:	4663      	moveq	r3, ip
 8008782:	f023 0301 	bicne.w	r3, r3, #1
 8008786:	106a      	asrs	r2, r5, #1
 8008788:	085b      	lsrs	r3, r3, #1
 800878a:	07e9      	lsls	r1, r5, #31
 800878c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008790:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008794:	bf48      	it	mi
 8008796:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800879a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800879e:	461c      	mov	r4, r3
 80087a0:	e780      	b.n	80086a4 <__ieee754_sqrt+0x30>
 80087a2:	0aca      	lsrs	r2, r1, #11
 80087a4:	3815      	subs	r0, #21
 80087a6:	0549      	lsls	r1, r1, #21
 80087a8:	2a00      	cmp	r2, #0
 80087aa:	d0fa      	beq.n	80087a2 <__ieee754_sqrt+0x12e>
 80087ac:	02d6      	lsls	r6, r2, #11
 80087ae:	d50a      	bpl.n	80087c6 <__ieee754_sqrt+0x152>
 80087b0:	f1c3 0420 	rsb	r4, r3, #32
 80087b4:	fa21 f404 	lsr.w	r4, r1, r4
 80087b8:	1e5d      	subs	r5, r3, #1
 80087ba:	4099      	lsls	r1, r3
 80087bc:	4322      	orrs	r2, r4
 80087be:	1b43      	subs	r3, r0, r5
 80087c0:	e78b      	b.n	80086da <__ieee754_sqrt+0x66>
 80087c2:	4618      	mov	r0, r3
 80087c4:	e7f0      	b.n	80087a8 <__ieee754_sqrt+0x134>
 80087c6:	0052      	lsls	r2, r2, #1
 80087c8:	3301      	adds	r3, #1
 80087ca:	e7ef      	b.n	80087ac <__ieee754_sqrt+0x138>
 80087cc:	46a0      	mov	r8, r4
 80087ce:	e7bf      	b.n	8008750 <__ieee754_sqrt+0xdc>
 80087d0:	7ff00000 	.word	0x7ff00000

080087d4 <__ieee754_expf>:
 80087d4:	ee10 2a10 	vmov	r2, s0
 80087d8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80087dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80087e0:	d902      	bls.n	80087e8 <__ieee754_expf+0x14>
 80087e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80087e6:	4770      	bx	lr
 80087e8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80087ec:	d106      	bne.n	80087fc <__ieee754_expf+0x28>
 80087ee:	eddf 7a51 	vldr	s15, [pc, #324]	; 8008934 <__ieee754_expf+0x160>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bf18      	it	ne
 80087f6:	eeb0 0a67 	vmovne.f32	s0, s15
 80087fa:	4770      	bx	lr
 80087fc:	484e      	ldr	r0, [pc, #312]	; (8008938 <__ieee754_expf+0x164>)
 80087fe:	4282      	cmp	r2, r0
 8008800:	dd04      	ble.n	800880c <__ieee754_expf+0x38>
 8008802:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800893c <__ieee754_expf+0x168>
 8008806:	ee20 0a00 	vmul.f32	s0, s0, s0
 800880a:	4770      	bx	lr
 800880c:	2a00      	cmp	r2, #0
 800880e:	da03      	bge.n	8008818 <__ieee754_expf+0x44>
 8008810:	4a4b      	ldr	r2, [pc, #300]	; (8008940 <__ieee754_expf+0x16c>)
 8008812:	4291      	cmp	r1, r2
 8008814:	f200 808a 	bhi.w	800892c <__ieee754_expf+0x158>
 8008818:	4a4a      	ldr	r2, [pc, #296]	; (8008944 <__ieee754_expf+0x170>)
 800881a:	4291      	cmp	r1, r2
 800881c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008820:	d954      	bls.n	80088cc <__ieee754_expf+0xf8>
 8008822:	4a49      	ldr	r2, [pc, #292]	; (8008948 <__ieee754_expf+0x174>)
 8008824:	4291      	cmp	r1, r2
 8008826:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800882a:	d836      	bhi.n	800889a <__ieee754_expf+0xc6>
 800882c:	4947      	ldr	r1, [pc, #284]	; (800894c <__ieee754_expf+0x178>)
 800882e:	4411      	add	r1, r2
 8008830:	ed91 7a00 	vldr	s14, [r1]
 8008834:	4946      	ldr	r1, [pc, #280]	; (8008950 <__ieee754_expf+0x17c>)
 8008836:	440a      	add	r2, r1
 8008838:	edd2 7a00 	vldr	s15, [r2]
 800883c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8008840:	f1c3 0201 	rsb	r2, r3, #1
 8008844:	1ad2      	subs	r2, r2, r3
 8008846:	ee37 0a67 	vsub.f32	s0, s14, s15
 800884a:	ee60 6a00 	vmul.f32	s13, s0, s0
 800884e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8008954 <__ieee754_expf+0x180>
 8008852:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8008958 <__ieee754_expf+0x184>
 8008856:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800885a:	eddf 5a40 	vldr	s11, [pc, #256]	; 800895c <__ieee754_expf+0x188>
 800885e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8008862:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8008960 <__ieee754_expf+0x18c>
 8008866:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800886a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008964 <__ieee754_expf+0x190>
 800886e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8008872:	eeb0 5a40 	vmov.f32	s10, s0
 8008876:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800887a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800887e:	eef0 6a45 	vmov.f32	s13, s10
 8008882:	ee20 5a05 	vmul.f32	s10, s0, s10
 8008886:	bb92      	cbnz	r2, 80088ee <__ieee754_expf+0x11a>
 8008888:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800888c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8008890:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008894:	ee36 0a40 	vsub.f32	s0, s12, s0
 8008898:	4770      	bx	lr
 800889a:	4b33      	ldr	r3, [pc, #204]	; (8008968 <__ieee754_expf+0x194>)
 800889c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800896c <__ieee754_expf+0x198>
 80088a0:	4413      	add	r3, r2
 80088a2:	edd3 7a00 	vldr	s15, [r3]
 80088a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80088aa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008970 <__ieee754_expf+0x19c>
 80088ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088b2:	ee17 2a90 	vmov	r2, s15
 80088b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088ba:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80088be:	eeb0 7a40 	vmov.f32	s14, s0
 80088c2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8008974 <__ieee754_expf+0x1a0>
 80088c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80088ca:	e7bc      	b.n	8008846 <__ieee754_expf+0x72>
 80088cc:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80088d0:	d20b      	bcs.n	80088ea <__ieee754_expf+0x116>
 80088d2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800893c <__ieee754_expf+0x168>
 80088d6:	ee70 6a26 	vadd.f32	s13, s0, s13
 80088da:	eef4 6ac6 	vcmpe.f32	s13, s12
 80088de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e2:	dd02      	ble.n	80088ea <__ieee754_expf+0x116>
 80088e4:	ee30 0a06 	vadd.f32	s0, s0, s12
 80088e8:	4770      	bx	lr
 80088ea:	2200      	movs	r2, #0
 80088ec:	e7ad      	b.n	800884a <__ieee754_expf+0x76>
 80088ee:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80088f2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80088f6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80088fa:	bfb8      	it	lt
 80088fc:	3264      	addlt	r2, #100	; 0x64
 80088fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008902:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008906:	ee76 7a40 	vsub.f32	s15, s12, s0
 800890a:	ee17 3a90 	vmov	r3, s15
 800890e:	bfab      	itete	ge
 8008910:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8008914:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8008918:	ee00 3a10 	vmovge	s0, r3
 800891c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8008978 <__ieee754_expf+0x1a4>
 8008920:	bfbc      	itt	lt
 8008922:	ee00 3a10 	vmovlt	s0, r3
 8008926:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800892a:	4770      	bx	lr
 800892c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008934 <__ieee754_expf+0x160>
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	00000000 	.word	0x00000000
 8008938:	42b17217 	.word	0x42b17217
 800893c:	7149f2ca 	.word	0x7149f2ca
 8008940:	42cff1b5 	.word	0x42cff1b5
 8008944:	3eb17218 	.word	0x3eb17218
 8008948:	3f851591 	.word	0x3f851591
 800894c:	08008d60 	.word	0x08008d60
 8008950:	08008d68 	.word	0x08008d68
 8008954:	3331bb4c 	.word	0x3331bb4c
 8008958:	b5ddea0e 	.word	0xb5ddea0e
 800895c:	388ab355 	.word	0x388ab355
 8008960:	bb360b61 	.word	0xbb360b61
 8008964:	3e2aaaab 	.word	0x3e2aaaab
 8008968:	08008d58 	.word	0x08008d58
 800896c:	3fb8aa3b 	.word	0x3fb8aa3b
 8008970:	3f317180 	.word	0x3f317180
 8008974:	3717f7d1 	.word	0x3717f7d1
 8008978:	0d800000 	.word	0x0d800000

0800897c <fabs>:
 800897c:	ec51 0b10 	vmov	r0, r1, d0
 8008980:	ee10 2a10 	vmov	r2, s0
 8008984:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008988:	ec43 2b10 	vmov	d0, r2, r3
 800898c:	4770      	bx	lr

0800898e <finite>:
 800898e:	ee10 3a90 	vmov	r3, s1
 8008992:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008996:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800899a:	0fc0      	lsrs	r0, r0, #31
 800899c:	4770      	bx	lr

0800899e <matherr>:
 800899e:	2000      	movs	r0, #0
 80089a0:	4770      	bx	lr
 80089a2:	0000      	movs	r0, r0
 80089a4:	0000      	movs	r0, r0
	...

080089a8 <nan>:
 80089a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80089b0 <nan+0x8>
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	00000000 	.word	0x00000000
 80089b4:	7ff80000 	.word	0x7ff80000

080089b8 <rint>:
 80089b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ba:	ec51 0b10 	vmov	r0, r1, d0
 80089be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80089c2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80089c6:	2e13      	cmp	r6, #19
 80089c8:	460b      	mov	r3, r1
 80089ca:	ee10 4a10 	vmov	r4, s0
 80089ce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80089d2:	dc56      	bgt.n	8008a82 <rint+0xca>
 80089d4:	2e00      	cmp	r6, #0
 80089d6:	da2b      	bge.n	8008a30 <rint+0x78>
 80089d8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80089dc:	4302      	orrs	r2, r0
 80089de:	d023      	beq.n	8008a28 <rint+0x70>
 80089e0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80089e4:	4302      	orrs	r2, r0
 80089e6:	4254      	negs	r4, r2
 80089e8:	4314      	orrs	r4, r2
 80089ea:	0c4b      	lsrs	r3, r1, #17
 80089ec:	0b24      	lsrs	r4, r4, #12
 80089ee:	045b      	lsls	r3, r3, #17
 80089f0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80089f4:	ea44 0103 	orr.w	r1, r4, r3
 80089f8:	460b      	mov	r3, r1
 80089fa:	492f      	ldr	r1, [pc, #188]	; (8008ab8 <rint+0x100>)
 80089fc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008a00:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008a04:	4602      	mov	r2, r0
 8008a06:	4639      	mov	r1, r7
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f7f7 fbe3 	bl	80001d4 <__adddf3>
 8008a0e:	e9cd 0100 	strd	r0, r1, [sp]
 8008a12:	463b      	mov	r3, r7
 8008a14:	4632      	mov	r2, r6
 8008a16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a1a:	f7f7 fbd9 	bl	80001d0 <__aeabi_dsub>
 8008a1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a22:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008a26:	4639      	mov	r1, r7
 8008a28:	ec41 0b10 	vmov	d0, r0, r1
 8008a2c:	b003      	add	sp, #12
 8008a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a30:	4a22      	ldr	r2, [pc, #136]	; (8008abc <rint+0x104>)
 8008a32:	4132      	asrs	r2, r6
 8008a34:	ea01 0702 	and.w	r7, r1, r2
 8008a38:	4307      	orrs	r7, r0
 8008a3a:	d0f5      	beq.n	8008a28 <rint+0x70>
 8008a3c:	0852      	lsrs	r2, r2, #1
 8008a3e:	4011      	ands	r1, r2
 8008a40:	430c      	orrs	r4, r1
 8008a42:	d00b      	beq.n	8008a5c <rint+0xa4>
 8008a44:	ea23 0202 	bic.w	r2, r3, r2
 8008a48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a4c:	2e13      	cmp	r6, #19
 8008a4e:	fa43 f306 	asr.w	r3, r3, r6
 8008a52:	bf0c      	ite	eq
 8008a54:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008a58:	2400      	movne	r4, #0
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	4916      	ldr	r1, [pc, #88]	; (8008ab8 <rint+0x100>)
 8008a5e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008a62:	4622      	mov	r2, r4
 8008a64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a68:	4620      	mov	r0, r4
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	f7f7 fbb2 	bl	80001d4 <__adddf3>
 8008a70:	e9cd 0100 	strd	r0, r1, [sp]
 8008a74:	4622      	mov	r2, r4
 8008a76:	462b      	mov	r3, r5
 8008a78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a7c:	f7f7 fba8 	bl	80001d0 <__aeabi_dsub>
 8008a80:	e7d2      	b.n	8008a28 <rint+0x70>
 8008a82:	2e33      	cmp	r6, #51	; 0x33
 8008a84:	dd07      	ble.n	8008a96 <rint+0xde>
 8008a86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008a8a:	d1cd      	bne.n	8008a28 <rint+0x70>
 8008a8c:	ee10 2a10 	vmov	r2, s0
 8008a90:	f7f7 fba0 	bl	80001d4 <__adddf3>
 8008a94:	e7c8      	b.n	8008a28 <rint+0x70>
 8008a96:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8008a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9e:	40f2      	lsrs	r2, r6
 8008aa0:	4210      	tst	r0, r2
 8008aa2:	d0c1      	beq.n	8008a28 <rint+0x70>
 8008aa4:	0852      	lsrs	r2, r2, #1
 8008aa6:	4210      	tst	r0, r2
 8008aa8:	bf1f      	itttt	ne
 8008aaa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008aae:	ea20 0202 	bicne.w	r2, r0, r2
 8008ab2:	4134      	asrne	r4, r6
 8008ab4:	4314      	orrne	r4, r2
 8008ab6:	e7d1      	b.n	8008a5c <rint+0xa4>
 8008ab8:	08008d70 	.word	0x08008d70
 8008abc:	000fffff 	.word	0x000fffff

08008ac0 <scalbn>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	ec55 4b10 	vmov	r4, r5, d0
 8008ac6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008aca:	4606      	mov	r6, r0
 8008acc:	462b      	mov	r3, r5
 8008ace:	b9aa      	cbnz	r2, 8008afc <scalbn+0x3c>
 8008ad0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008ad4:	4323      	orrs	r3, r4
 8008ad6:	d03b      	beq.n	8008b50 <scalbn+0x90>
 8008ad8:	4b31      	ldr	r3, [pc, #196]	; (8008ba0 <scalbn+0xe0>)
 8008ada:	4629      	mov	r1, r5
 8008adc:	2200      	movs	r2, #0
 8008ade:	ee10 0a10 	vmov	r0, s0
 8008ae2:	f7f7 fd2d 	bl	8000540 <__aeabi_dmul>
 8008ae6:	4b2f      	ldr	r3, [pc, #188]	; (8008ba4 <scalbn+0xe4>)
 8008ae8:	429e      	cmp	r6, r3
 8008aea:	4604      	mov	r4, r0
 8008aec:	460d      	mov	r5, r1
 8008aee:	da12      	bge.n	8008b16 <scalbn+0x56>
 8008af0:	a327      	add	r3, pc, #156	; (adr r3, 8008b90 <scalbn+0xd0>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f7f7 fd23 	bl	8000540 <__aeabi_dmul>
 8008afa:	e009      	b.n	8008b10 <scalbn+0x50>
 8008afc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008b00:	428a      	cmp	r2, r1
 8008b02:	d10c      	bne.n	8008b1e <scalbn+0x5e>
 8008b04:	ee10 2a10 	vmov	r2, s0
 8008b08:	4620      	mov	r0, r4
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	f7f7 fb62 	bl	80001d4 <__adddf3>
 8008b10:	4604      	mov	r4, r0
 8008b12:	460d      	mov	r5, r1
 8008b14:	e01c      	b.n	8008b50 <scalbn+0x90>
 8008b16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	3a36      	subs	r2, #54	; 0x36
 8008b1e:	4432      	add	r2, r6
 8008b20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008b24:	428a      	cmp	r2, r1
 8008b26:	dd0b      	ble.n	8008b40 <scalbn+0x80>
 8008b28:	ec45 4b11 	vmov	d1, r4, r5
 8008b2c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008b98 <scalbn+0xd8>
 8008b30:	f000 f846 	bl	8008bc0 <copysign>
 8008b34:	a318      	add	r3, pc, #96	; (adr r3, 8008b98 <scalbn+0xd8>)
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	ec51 0b10 	vmov	r0, r1, d0
 8008b3e:	e7da      	b.n	8008af6 <scalbn+0x36>
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	dd08      	ble.n	8008b56 <scalbn+0x96>
 8008b44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b50:	ec45 4b10 	vmov	d0, r4, r5
 8008b54:	bd70      	pop	{r4, r5, r6, pc}
 8008b56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008b5a:	da0d      	bge.n	8008b78 <scalbn+0xb8>
 8008b5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b60:	429e      	cmp	r6, r3
 8008b62:	ec45 4b11 	vmov	d1, r4, r5
 8008b66:	dce1      	bgt.n	8008b2c <scalbn+0x6c>
 8008b68:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008b90 <scalbn+0xd0>
 8008b6c:	f000 f828 	bl	8008bc0 <copysign>
 8008b70:	a307      	add	r3, pc, #28	; (adr r3, 8008b90 <scalbn+0xd0>)
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	e7e0      	b.n	8008b3a <scalbn+0x7a>
 8008b78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b7c:	3236      	adds	r2, #54	; 0x36
 8008b7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b86:	4620      	mov	r0, r4
 8008b88:	4629      	mov	r1, r5
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <scalbn+0xe8>)
 8008b8e:	e7b2      	b.n	8008af6 <scalbn+0x36>
 8008b90:	c2f8f359 	.word	0xc2f8f359
 8008b94:	01a56e1f 	.word	0x01a56e1f
 8008b98:	8800759c 	.word	0x8800759c
 8008b9c:	7e37e43c 	.word	0x7e37e43c
 8008ba0:	43500000 	.word	0x43500000
 8008ba4:	ffff3cb0 	.word	0xffff3cb0
 8008ba8:	3c900000 	.word	0x3c900000

08008bac <finitef>:
 8008bac:	ee10 3a10 	vmov	r3, s0
 8008bb0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8008bb4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008bb8:	bfac      	ite	ge
 8008bba:	2000      	movge	r0, #0
 8008bbc:	2001      	movlt	r0, #1
 8008bbe:	4770      	bx	lr

08008bc0 <copysign>:
 8008bc0:	ec51 0b10 	vmov	r0, r1, d0
 8008bc4:	ee11 0a90 	vmov	r0, s3
 8008bc8:	ee10 2a10 	vmov	r2, s0
 8008bcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008bd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008bd4:	ea41 0300 	orr.w	r3, r1, r0
 8008bd8:	ec43 2b10 	vmov	d0, r2, r3
 8008bdc:	4770      	bx	lr
	...

08008be0 <_init>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	bf00      	nop
 8008be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be6:	bc08      	pop	{r3}
 8008be8:	469e      	mov	lr, r3
 8008bea:	4770      	bx	lr

08008bec <_fini>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	bf00      	nop
 8008bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf2:	bc08      	pop	{r3}
 8008bf4:	469e      	mov	lr, r3
 8008bf6:	4770      	bx	lr
